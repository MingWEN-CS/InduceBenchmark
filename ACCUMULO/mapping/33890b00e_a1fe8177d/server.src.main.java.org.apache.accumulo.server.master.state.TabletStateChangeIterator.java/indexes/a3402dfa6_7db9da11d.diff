24a25
> import java.util.Collections;
51a53
>   private static final String MIGRATIONS_OPTION = "migrations";
56a59
>   Set<KeyExtent> migrations;
63a67,86
>     migrations = parseMigrations(options.get(MIGRATIONS_OPTION));
>   }
> 
>   private Set<KeyExtent> parseMigrations(String migrations) {
>     if (migrations == null)
>       return Collections.emptySet();
>     try {
>       Set<KeyExtent> result = new HashSet<KeyExtent>();
>       DataInputBuffer buffer = new DataInputBuffer();
>       byte[] data = Base64.decodeBase64(migrations.getBytes(UTF_8));
>       buffer.reset(data, data.length);
>       while (buffer.available() > 0) {
>         KeyExtent extent = new KeyExtent();
>         extent.readFields(buffer);
>         result.add(extent);
>       }
>       return result;
>     } catch (Exception ex) {
>       throw new RuntimeException(ex);
>     }
135a159,162
>       
>       if (migrations.contains(tls.extent)) {
>         return;
>       }
196a224,236
>   public static void setMigrations(IteratorSetting cfg, Collection<KeyExtent> migrations) {
>     DataOutputBuffer buffer = new DataOutputBuffer();
>     try {
>       for (KeyExtent  extent : migrations) {
>         extent.write(buffer);
>       }
>     } catch (Exception ex) {
>       throw new RuntimeException(ex);
>     }
>     String encoded = Base64.encodeBase64String(Arrays.copyOf(buffer.getData(), buffer.getLength()));
>     cfg.addOption(MIGRATIONS_OPTION, encoded);
>   }
> 
