1a2,78
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.apache.accumulo.tserver;
> 
> import java.util.concurrent.ConcurrentHashMap;
> 
> import jline.internal.Preconditions;
> 
> import org.apache.accumulo.core.data.KeyExtent;
> import org.slf4j.Logger;
> import org.slf4j.LoggerFactory;
> 
> 
> 
> 
> public class ActiveAssignmentRunnable implements Runnable {
>   private static final Logger log = LoggerFactory.getLogger(ActiveAssignmentRunnable.class);
> 
>   private final ConcurrentHashMap<KeyExtent,RunnableStartedAt> activeAssignments;
>   private final KeyExtent extent;
>   private final Runnable delegate;
> 
>   
>   private volatile Thread executingThread;
> 
>   public ActiveAssignmentRunnable(ConcurrentHashMap<KeyExtent,RunnableStartedAt> activeAssignments, KeyExtent extent, Runnable delegate) {
>     Preconditions.checkNotNull(activeAssignments);
>     Preconditions.checkNotNull(extent);
>     Preconditions.checkNotNull(delegate);
>     this.activeAssignments = activeAssignments;
>     this.extent = extent;
>     this.delegate = delegate;
>   }
> 
>   @Override
>   public void run() {
>     if (activeAssignments.containsKey(extent)) {
>       throw new IllegalStateException("Active assignment already exists for " + extent);
>     }
> 
>     executingThread = Thread.currentThread();
> 
>     try {
>       RunnableStartedAt runnableWithStartTime = new RunnableStartedAt(this, System.currentTimeMillis());
>       log.trace("Started assignment for {} at {}", extent, runnableWithStartTime.getStartTime());
>       activeAssignments.put(extent, runnableWithStartTime);
>       delegate.run();
>     } finally {
>       if (log.isTraceEnabled()) {
>         
>         log.trace("Finished assignment for {} at {}", extent, System.currentTimeMillis());
>       }
>       activeAssignments.remove(extent);
>     }
>   }
> 
>   public Exception getException() {
>     final Exception e = new Exception("Assignment of " + extent);
>     if (null != executingThread) {
>       e.setStackTrace(executingThread.getStackTrace());
>     }
>     return e;
>   }
> }
