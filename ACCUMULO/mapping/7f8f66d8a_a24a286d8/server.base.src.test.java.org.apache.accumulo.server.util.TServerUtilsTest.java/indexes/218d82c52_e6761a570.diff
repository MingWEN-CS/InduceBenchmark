23a24,25
> import static org.junit.Assert.assertEquals;
> import static org.junit.Assert.assertNotNull;
25a28,33
> import java.io.IOException;
> import java.net.InetAddress;
> import java.net.ServerSocket;
> import java.net.UnknownHostException;
> import java.nio.ByteBuffer;
> import java.util.List;
27a36,50
> import org.apache.accumulo.core.client.AccumuloException;
> import org.apache.accumulo.core.client.AccumuloSecurityException;
> import org.apache.accumulo.core.client.Connector;
> import org.apache.accumulo.core.client.Instance;
> import org.apache.accumulo.core.client.impl.thrift.ClientService.Iface;
> import org.apache.accumulo.core.client.impl.thrift.ClientService.Processor;
> import org.apache.accumulo.core.client.security.tokens.AuthenticationToken;
> import org.apache.accumulo.core.conf.AccumuloConfiguration;
> import org.apache.accumulo.core.conf.ConfigurationCopy;
> import org.apache.accumulo.core.conf.Property;
> import org.apache.accumulo.server.AccumuloServerContext;
> import org.apache.accumulo.server.client.ClientServiceHandler;
> import org.apache.accumulo.server.conf.ServerConfigurationFactory;
> import org.apache.accumulo.server.rpc.RpcWrapper;
> import org.apache.accumulo.server.rpc.ServerAddress;
30a54
> import org.junit.After;
33a58,136
> 
>   protected static class TestInstance implements Instance {
> 
>     @Override
>     public String getRootTabletLocation() {
>       throw new UnsupportedOperationException();
>     }
> 
>     @Override
>     public List<String> getMasterLocations() {
>       throw new UnsupportedOperationException();
>     }
> 
>     @Override
>     public String getInstanceID() {
>       return "1111";
>     }
> 
>     @Override
>     public String getInstanceName() {
>       return "test";
>     }
> 
>     @Override
>     public String getZooKeepers() {
>       return "";
>     }
> 
>     @Override
>     public int getZooKeepersSessionTimeOut() {
>       return 30;
>     }
> 
>     @Override
>     public Connector getConnector(String user, byte[] pass) throws AccumuloException, AccumuloSecurityException {
>       throw new UnsupportedOperationException();
>     }
> 
>     @Override
>     public Connector getConnector(String user, ByteBuffer pass) throws AccumuloException, AccumuloSecurityException {
>       throw new UnsupportedOperationException();
>     }
> 
>     @Override
>     public Connector getConnector(String user, CharSequence pass) throws AccumuloException, AccumuloSecurityException {
>       throw new UnsupportedOperationException();
>     }
> 
>     @Override
>     public AccumuloConfiguration getConfiguration() {
>       throw new UnsupportedOperationException();
>     }
> 
>     @Override
>     public void setConfiguration(AccumuloConfiguration conf) {}
> 
>     @Override
>     public Connector getConnector(String principal, AuthenticationToken token) throws AccumuloException, AccumuloSecurityException {
>       throw new UnsupportedOperationException();
>     }
> 
>   }
> 
>   protected static class TestServerConfigurationFactory extends ServerConfigurationFactory {
> 
>     private ConfigurationCopy conf = null;
> 
>     public TestServerConfigurationFactory(Instance instance) {
>       super(instance);
>       conf = new ConfigurationCopy(AccumuloConfiguration.getDefaultConfiguration());
>     }
> 
>     @Override
>     public synchronized AccumuloConfiguration getConfiguration() {
>       return conf;
>     }
> 
>   }
> 
83a187,344
> 
>   private static final TestInstance instance = new TestInstance();
>   private static final TestServerConfigurationFactory factory = new TestServerConfigurationFactory(instance);
> 
>   @After
>   public void resetProperty() {
>     ((ConfigurationCopy) factory.getConfiguration()).set(Property.TSERV_CLIENTPORT, Property.TSERV_CLIENTPORT.getDefaultValue());
>     ((ConfigurationCopy) factory.getConfiguration()).set(Property.TSERV_PORTSEARCH, Property.TSERV_PORTSEARCH.getDefaultValue());
>   }
> 
>   @Test
>   public void testStartServerZeroPort() throws Exception {
>     TServer server = null;
>     ((ConfigurationCopy) factory.getConfiguration()).set(Property.TSERV_CLIENTPORT, "0");
>     try {
>       ServerAddress address = startServer();
>       assertNotNull(address);
>       server = address.getServer();
>       assertNotNull(server);
>       assertTrue(address.getAddress().getPort() > 1024);
>     } finally {
>       if (null != server) {
>         TServerUtils.stopTServer(server);
>       }
>     }
>   }
> 
>   @Test
>   public void testStartServerFreePort() throws Exception {
>     TServer server = null;
>     int port = getFreePort(1024);
>     ((ConfigurationCopy) factory.getConfiguration()).set(Property.TSERV_CLIENTPORT, Integer.toString(port));
>     try {
>       ServerAddress address = startServer();
>       assertNotNull(address);
>       server = address.getServer();
>       assertNotNull(server);
>       assertEquals(port, address.getAddress().getPort());
>     } finally {
>       if (null != server) {
>         TServerUtils.stopTServer(server);
>       }
>     }
>   }
> 
>   @Test(expected = UnknownHostException.class)
>   public void testStartServerUsedPort() throws Exception {
>     int port = getFreePort(1024);
>     
>     ServerSocket s = new ServerSocket(port);
>     ((ConfigurationCopy) factory.getConfiguration()).set(Property.TSERV_CLIENTPORT, Integer.toString(port));
>     try {
>       startServer();
>     } finally {
>       s.close();
>     }
>   }
> 
>   @Test
>   public void testStartServerUsedPortWithSearch() throws Exception {
>     TServer server = null;
>     int[] port = findTwoFreeSequentialPorts(1024);
>     
>     ServerSocket s = new ServerSocket(port[0]);
>     ((ConfigurationCopy) factory.getConfiguration()).set(Property.TSERV_CLIENTPORT, Integer.toString(port[0]));
>     ((ConfigurationCopy) factory.getConfiguration()).set(Property.TSERV_PORTSEARCH, "true");
>     try {
>       ServerAddress address = startServer();
>       assertNotNull(address);
>       server = address.getServer();
>       assertNotNull(server);
>       assertEquals(port[1], address.getAddress().getPort());
>     } finally {
>       if (null != server) {
>         TServerUtils.stopTServer(server);
>       }
>       s.close();
>     }
>   }
> 
>   @Test
>   public void testStartServerPortRange() throws Exception {
>     TServer server = null;
>     int[] port = findTwoFreeSequentialPorts(1024);
>     String portRange = Integer.toString(port[0]) + "-" + Integer.toString(port[1]);
>     ((ConfigurationCopy) factory.getConfiguration()).set(Property.TSERV_CLIENTPORT, portRange);
>     try {
>       ServerAddress address = startServer();
>       assertNotNull(address);
>       server = address.getServer();
>       assertNotNull(server);
>       assertTrue(port[0] == address.getAddress().getPort() || port[1] == address.getAddress().getPort());
>     } finally {
>       if (null != server) {
>         TServerUtils.stopTServer(server);
>       }
>     }
>   }
> 
>   @Test
>   public void testStartServerPortRangeFirstPortUsed() throws Exception {
>     TServer server = null;
>     int[] port = findTwoFreeSequentialPorts(1024);
>     String portRange = Integer.toString(port[0]) + "-" + Integer.toString(port[1]);
>     
>     ServerSocket s = new ServerSocket(port[0]);
>     ((ConfigurationCopy) factory.getConfiguration()).set(Property.TSERV_CLIENTPORT, portRange);
>     try {
>       ServerAddress address = startServer();
>       assertNotNull(address);
>       server = address.getServer();
>       assertNotNull(server);
>       assertTrue(port[1] == address.getAddress().getPort());
>     } finally {
>       if (null != server) {
>         TServerUtils.stopTServer(server);
>       }
>       s.close();
>     }
>   }
> 
>   private int[] findTwoFreeSequentialPorts(int startingAddress) {
>     boolean sequential = false;
>     int low = startingAddress;
>     int high = 0;
>     do {
>       low = getFreePort(low);
>       high = getFreePort(low + 1);
>       sequential = ((high - low) == 1);
>     } while (!sequential);
>     return new int[] {low, high};
>   }
> 
>   private int getFreePort(int startingAddress) {
>     for (int i = startingAddress; i < 65535; i++) {
>       try {
>         ServerSocket s = new ServerSocket(i);
>         int port = s.getLocalPort();
>         s.close();
>         return port;
>       } catch (IOException e) {
>         
>       }
>     }
>     throw new RuntimeException("Unable to find open port");
>   }
> 
>   private ServerAddress startServer() throws Exception {
>     AccumuloServerContext ctx = new AccumuloServerContext(factory);
>     ClientServiceHandler clientHandler = new ClientServiceHandler(ctx, null, null);
>     Iface rpcProxy = RpcWrapper.service(clientHandler, new Processor<Iface>(clientHandler));
>     Processor<Iface> processor = new Processor<Iface>(rpcProxy);
>     String hostname = InetAddress.getLocalHost().getHostName();
> 
>     return TServerUtils.startServer(ctx, hostname, Property.TSERV_CLIENTPORT, processor, "TServerUtilsTest", "TServerUtilsTestThread",
>         Property.TSERV_PORTSEARCH, Property.TSERV_MINTHREADS, Property.TSERV_THREADCHECK, Property.GENERAL_MAX_MESSAGE_SIZE);
> 
>   }
