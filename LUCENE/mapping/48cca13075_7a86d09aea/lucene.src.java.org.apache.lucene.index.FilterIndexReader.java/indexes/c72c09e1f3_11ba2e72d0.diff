29a30
> import java.util.Comparator;
43,44d43
<   public static class FilterTermDocs implements TermDocs {
<     protected TermDocs in;
46c45,46
<     public FilterTermDocs(TermDocs in) { this.in = in; }
---
>   public static class FilterFields extends Fields {
>     protected Fields in;
48,54c48,59
<     public void seek(Term term) throws IOException { in.seek(term); }
<     public void seek(TermEnum termEnum) throws IOException { in.seek(termEnum); }
<     public int doc() { return in.doc(); }
<     public int freq() { return in.freq(); }
<     public boolean next() throws IOException { return in.next(); }
<     public int read(int[] docs, int[] freqs) throws IOException {
<       return in.read(docs, freqs);
---
>     public FilterFields(Fields in) {
>       this.in = in;
>     }
> 
>     @Override
>     public FieldsEnum iterator() throws IOException {
>       return in.iterator();
>     }
> 
>     @Override
>     public Terms terms(String field) throws IOException {
>       return in.terms(field);
56,57d60
<     public boolean skipTo(int i) throws IOException { return in.skipTo(i); }
<     public void close() throws IOException { in.close(); }
61,62d63
<   public static class FilterTermPositions
<           extends FilterTermDocs implements TermPositions {
64c65,66
<     public FilterTermPositions(TermPositions in) { super(in); }
---
>   public static class FilterTerms extends Terms {
>     protected Terms in;
66,67c68,69
<     public int nextPosition() throws IOException {
<       return ((TermPositions) this.in).nextPosition();
---
>     public FilterTerms(Terms in) {
>       this.in = in;
69,71c71,74
<     
<     public int getPayloadLength() throws IOException {
<       return ((TermPositions) this.in).getPayloadLength();
---
> 
>     @Override
>     public TermsEnum iterator() throws IOException {
>       return in.iterator();
74,75c77,79
<     public byte[] getPayload(byte[] data, int offset) throws IOException {
<       return ((TermPositions) this.in).getPayload(data, offset);
---
>     @Override
>     public Comparator<BytesRef> getComparator() throws IOException {
>       return in.getComparator();
77a82,85
>     @Override
>     public int docFreq(BytesRef text) throws IOException {
>       return in.docFreq(text);
>     }
79,81c87,208
<     
<     public boolean isPayloadAvailable() {
<       return ((TermPositions)this.in).isPayloadAvailable();
---
>     @Override
>     public DocsEnum docs(Bits skipDocs, BytesRef text, DocsEnum reuse) throws IOException {
>       return in.docs(skipDocs, text, reuse);
>     }
> 
>     @Override
>     public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {
>       return in.docsAndPositions(skipDocs, text, reuse);
>     }
> 
>     @Override
>     public long getUniqueTermCount() throws IOException {
>       return in.getUniqueTermCount();
>     }
>   }
> 
>   
>   public static class FilterFieldsEnum extends FieldsEnum {
>     protected FieldsEnum in;
>     public FilterFieldsEnum(FieldsEnum in) {
>       this.in = in;
>     }
> 
>     @Override
>     public String next() throws IOException {
>       return in.next();
>     }
> 
>     @Override
>     public TermsEnum terms() throws IOException {
>       return in.terms();
>     }
>   }
> 
>   
>   public static class FilterTermsEnum extends TermsEnum {
>     protected TermsEnum in;
> 
>     public FilterTermsEnum(TermsEnum in) { this.in = in; }
> 
>     @Override
>     public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {
>       return in.seek(text, useCache);
>     }
> 
>     @Override
>     public SeekStatus seek(long ord) throws IOException {
>       return in.seek(ord);
>     }
> 
>     @Override
>     public BytesRef next() throws IOException {
>       return in.next();
>     }
> 
>     @Override
>     public BytesRef term() throws IOException {
>       return in.term();
>     }
> 
>     @Override
>     public long ord() throws IOException {
>       return in.ord();
>     }
> 
>     @Override
>     public int docFreq() {
>       return in.docFreq();
>     }
> 
>     @Override
>       public DocsEnum docs(Bits skipDocs, DocsEnum reuse) throws IOException {
>       return in.docs(skipDocs, reuse);
>     }
> 
>     @Override
>     public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {
>       return in.docsAndPositions(skipDocs, reuse);
>     }
> 
>     @Override
>     public Comparator<BytesRef> getComparator() throws IOException {
>       return in.getComparator();
>     }
>   }
> 
>   
>   public static class FilterDocsEnum extends DocsEnum {
>     protected DocsEnum in;
> 
>     public FilterDocsEnum(DocsEnum in) {
>       this.in = in;
>     }
> 
>     @Override
>     public int docID() {
>       return in.docID();
>     }
> 
>     @Override
>     public int freq() {
>       return in.freq();
>     }
> 
>     @Override
>     public int nextDoc() throws IOException {
>       return in.nextDoc();
>     }
> 
>     @Override
>     public int advance(int target) throws IOException {
>       return in.advance(target);
>     }
> 
>     @Override
>     public BulkReadResult getBulkResult() {
>       return in.getBulkResult();
>     }
> 
>     @Override
>     public int read() throws IOException {
>       return in.read();
86,87c213,228
<   public static class FilterTermEnum extends TermEnum {
<     protected TermEnum in;
---
>   public static class FilterDocsAndPositionsEnum extends DocsAndPositionsEnum {
>     protected DocsAndPositionsEnum in;
> 
>     public FilterDocsAndPositionsEnum(DocsAndPositionsEnum in) {
>       this.in = in;
>     }
> 
>     @Override
>     public int docID() {
>       return in.docID();
>     }
> 
>     @Override
>     public int freq() {
>       return in.freq();
>     }
89c230,233
<     public FilterTermEnum(TermEnum in) { this.in = in; }
---
>     @Override
>     public int nextDoc() throws IOException {
>       return in.nextDoc();
>     }
92c236,239
<     public boolean next() throws IOException { return in.next(); }
---
>     public int advance(int target) throws IOException {
>       return in.advance(target);
>     }
> 
94c241,244
<     public Term term() { return in.term(); }
---
>     public int nextPosition() throws IOException {
>       return in.nextPosition();
>     }
> 
96c246,249
<     public int docFreq() { return in.docFreq(); }
---
>     public BytesRef getPayload() throws IOException {
>       return in.getPayload();
>     }
> 
98c251,253
<     public void close() throws IOException { in.close(); }
---
>     public boolean hasPayload() {
>       return in.hasPayload();
>     }
208a364
>   
210c366
<   public TermEnum terms() throws IOException {
---
>   public final TermEnum terms() throws IOException {
214a371
>   
216c373
<   public TermEnum terms(Term t) throws IOException {
---
>   public final TermEnum terms(Term t) throws IOException {
231a389
> 
234c392
<   public TermDocs termDocs() throws IOException {
---
>   public final TermDocs termDocs() throws IOException {
238a397
>   
240c399
<   public TermDocs termDocs(Term term) throws IOException {
---
>   public final TermDocs termDocs(Term term) throws IOException {
244a404
>   
246c406
<   public TermPositions termPositions() throws IOException {
---
>   public final TermPositions termPositions() throws IOException {
297d456
<   
300,305c459
<     return new LegacyFields(this);
<   }
< 
<   @Override
<   public Terms terms(String field) throws IOException {
<     return new LegacyTerms(this, field);
---
>     return MultiFields.getFields(in);
