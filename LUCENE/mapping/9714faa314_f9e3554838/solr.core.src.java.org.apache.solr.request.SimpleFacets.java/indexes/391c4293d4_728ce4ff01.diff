118c118
<   protected final SolrParams orig;
---
>   protected final SolrParams global;
127,134c127,156
<   protected SolrParams localParams; 
<   protected SolrParams params;      
<   protected SolrParams required;    
<   protected String facetValue;      
<   protected DocSet docs;            
<   protected String key;             
<   protected int threads;
< 
---
>   protected final static class ParsedParams {
>     final public SolrParams localParams; 
>     final public SolrParams params;      
>     final public SolrParams required;    
>     final public String facetValue;      
>     final public DocSet docs;            
>     final public String key;             
>     final public int threads;
>     
>     public ParsedParams(final SolrParams localParams, 
>                         final SolrParams params,      
>                         final SolrParams required,    
>                         final String facetValue,      
>                         final DocSet docs,            
>                         final String key,             
>                         final int threads) {
>       this.localParams = localParams;
>       this.params = params;
>       this.required = required;
>       this.facetValue = facetValue;
>       this.docs = docs;
>       this.key = key;
>       this.threads = threads;
>     }
>     
>     public ParsedParams withDocs(final DocSet docs) {
>       return new ParsedParams(localParams, params, required, facetValue, docs, key, threads);
>     }
>   }
>   
147,149c169,170
<     this.docs = this.docsOrig = docs;
<     this.params = orig = params;
<     this.required = new RequiredSolrParams(params);
---
>     this.docsOrig = docs;
>     this.global = params;
173,178c194,199
<   protected void parseParams(String type, String param) throws SyntaxError, IOException {
<     localParams = QueryParsing.getLocalParams(param, req.getParams());
<     docs = docsOrig;
<     facetValue = param;
<     key = param;
<     threads = -1;
---
>   protected ParsedParams parseParams(String type, String param) throws SyntaxError, IOException {
>     SolrParams localParams = QueryParsing.getLocalParams(param, req.getParams());
>     DocSet docs = docsOrig;
>     String facetValue = param;
>     String key = param;
>     int threads = -1;
181,183c202,204
<       params = orig;
<       required = new RequiredSolrParams(params);
<       return;
---
>       SolrParams params = global;
>       SolrParams required = new RequiredSolrParams(params);
>       return new ParsedParams(localParams, params, required, facetValue, docs, key, threads);
185,186c206,208
<     params = SolrParams.wrapDefaults(localParams, orig);
<     required = new RequiredSolrParams(params);
---
>     
>     SolrParams params = SolrParams.wrapDefaults(localParams, global);
>     SolrParams required = new RequiredSolrParams(params);
206c228
<     if (excludeStr == null) return;
---
>     if (excludeStr == null) return new ParsedParams(localParams, params, required, facetValue, docs, key, threads);
223c245
<       if (excludeSet.size() == 0) return;
---
>       if (excludeSet.size() == 0) return new ParsedParams(localParams, params, required, facetValue, docs, key, threads);
251,252c273,274
<           this.docs = base;
<           return;
---
>           docs = base;
>           return new ParsedParams(localParams, params, required, facetValue, docs, key, threads);
256c278
<         this.docs = new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));
---
>         docs = new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));
258c280
<         this.docs = base;
---
>         docs = base;
261a284
>     return new ParsedParams(localParams, params, required, facetValue, docs, key, threads);
280c303
<     if (!params.getBool(FacetParams.FACET,true))
---
>     if (!global.getBool(FacetParams.FACET,true))
316c339
<     String[] facetQs = params.getParams(FacetParams.FACET_QUERY);
---
>     String[] facetQs = global.getParams(FacetParams.FACET_QUERY);
320c343
<         parseParams(FacetParams.FACET_QUERY, q);
---
>         final ParsedParams parsed = parseParams(FacetParams.FACET_QUERY, q);
326,328c349,351
<           res.add(key, 0);
<         } else if (params.getBool(GroupParams.GROUP_FACET, false)) {
<           res.add(key, getGroupedFacetQueryCount(qobj));
---
>           res.add(parsed.key, 0);
>         } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {
>           res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed));
330c353
<           res.add(key, searcher.numDocs(qobj, docs));
---
>           res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));
343,344c366,367
<   public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {
<     String groupField = params.get(GroupParams.GROUP_FIELD);
---
>   public int getGroupedFacetQueryCount(Query facetQuery, ParsedParams parsed) throws IOException {
>     String groupField = parsed.params.get(GroupParams.GROUP_FIELD);
353c376
<     Filter mainQueryFilter = docs.getTopFilter(); 
---
>     Filter mainQueryFilter = parsed.docs.getTopFilter(); 
370,372c393,395
<   public NamedList<Integer> getTermCountsForPivots(String field, DocSet docs) throws IOException {
<     Integer mincount = params.getFieldInt(field, FacetParams.FACET_PIVOT_MINCOUNT, 1);
<     return getTermCounts(field, mincount, docs);
---
>   public NamedList<Integer> getTermCountsForPivots(String field, ParsedParams parsed) throws IOException {
>     Integer mincount = parsed.params.getFieldInt(field, FacetParams.FACET_PIVOT_MINCOUNT, 1);
>     return getTermCounts(field, mincount, parsed);
380,381c403,405
<   public NamedList<Integer> getTermCounts(String field) throws IOException {
<     return getTermCounts(field, this.docs);
---
>   public NamedList<Integer> getTermCounts(String field, ParsedParams parsed) throws IOException {
>     Integer mincount = parsed.params.getFieldInt(field, FacetParams.FACET_MINCOUNT);
>     return getTermCounts(field, mincount, parsed);
389,397d412
<   public NamedList<Integer> getTermCounts(String field, DocSet base) throws IOException {
<     Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);
<     return getTermCounts(field, mincount, base);
<   }
< 
<   
< 
< 
< 
400,401c415,418
< 
<   private NamedList<Integer> getTermCounts(String field, Integer mincount, DocSet base) throws IOException {
---
>   private NamedList<Integer> getTermCounts(String field, Integer mincount, ParsedParams parsed) throws IOException {
>     final SolrParams params = parsed.params;
>     final DocSet docs = parsed.docs;
>     final int threads = parsed.threads;
468c485
<       counts = getGroupedCounts(searcher, base, field, multiToken, offset,limit, mincount, missing, sort, prefix, contains, ignoreCase);
---
>       counts = getGroupedCounts(searcher, docs, field, multiToken, offset,limit, mincount, missing, sort, prefix, contains, ignoreCase);
474c491
<           counts = getFacetTermEnumCounts(searcher, base, field, offset, limit, mincount, missing, sort, prefix, contains, ignoreCase);
---
>           counts = getFacetTermEnumCounts(searcher, docs, field, offset, limit, mincount, missing, sort, prefix, contains, ignoreCase);
486c503
<             counts = NumericFacets.getCounts(searcher, base, field, offset, limit, mincount, missing, sort);
---
>             counts = NumericFacets.getCounts(searcher, docs, field, offset, limit, mincount, missing, sort);
488c505
<             PerSegmentSingleValuedFaceting ps = new PerSegmentSingleValuedFaceting(searcher, base, field, offset,limit, mincount, missing, sort, prefix, contains, ignoreCase);
---
>             PerSegmentSingleValuedFaceting ps = new PerSegmentSingleValuedFaceting(searcher, docs, field, offset, limit, mincount, missing, sort, prefix, contains, ignoreCase);
495c512
<           counts = DocValuesFacets.getCounts(searcher, base, field, offset,limit, mincount, missing, sort, prefix, contains, ignoreCase);
---
>           counts = DocValuesFacets.getCounts(searcher, docs, field, offset,limit, mincount, missing, sort, prefix, contains, ignoreCase);
601c618
<     String[] facetFs = params.getParams(FacetParams.FACET_FIELD);
---
>     String[] facetFs = global.getParams(FacetParams.FACET_FIELD);
617c634,635
<         parseParams(FacetParams.FACET_FIELD, f);
---
>         final ParsedParams parsed = parseParams(FacetParams.FACET_FIELD, f);
>         final SolrParams localParams = parsed.localParams;
619,621c637,638
<         final String workerKey = key;
<         final String workerFacetValue = facetValue;
<         final DocSet workerBase = this.docs;
---
>         final String key = parsed.key;
>         final String facetValue = parsed.facetValue;
629c646
<                 result.add(workerKey, getListedTermCounts(workerFacetValue, workerBase, terms));
---
>                 result.add(key, getListedTermCounts(facetValue, parsed, terms));
631c648
<                 result.add(workerKey, getTermCounts(workerFacetValue, workerBase));
---
>                 result.add(key, getTermCounts(facetValue, parsed));
638c655
<                                       "Exception during facet.field: " + workerFacetValue, e);
---
>                                       "Exception during facet.field: " + facetValue, e);
671,682d687
< 
<   
< 
< 
< 
< 
< 
<   private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {
<     List<String> terms = StrUtils.splitSmart(termList, ",", true);
<     return getListedTermCounts(field, this.docs, terms);
<   }
< 
689c694
<   protected NamedList<Integer> getListedTermCounts(String field, DocSet base, List<String> terms) throws IOException {
---
>   protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms) throws IOException {
694c699
<       int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);
---
>       int count = searcher.numDocs(new TermQuery(new Term(field, internal)), parsed.docs);
734c739
<     int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);
---
>     int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);
896c901
<     final String[] fields = params.getParams(FacetParams.FACET_DATE);
---
>     final String[] fields = global.getParams(FacetParams.FACET_DATE);
916,918c921,925
<     parseParams(FacetParams.FACET_DATE, dateFacet);
<     String f = facetValue;
< 
---
>     final ParsedParams parsed = parseParams(FacetParams.FACET_DATE, dateFacet);
>     final SolrParams params = parsed.params;
>     final SolrParams required = parsed.required;
>     final String key = parsed.key;
>     final String f = parsed.facetValue;
1003c1010
<         final int count = rangeCount(sf,low,high,includeLower,includeUpper);
---
>         final int count = rangeCount(parsed,sf,low,high,includeLower,includeUpper);
1039c1046
<               rangeCount(sf,null,start,
---
>               rangeCount(parsed,sf,null,start,
1048c1055
<               rangeCount(sf,end,null,
---
>               rangeCount(parsed,sf,end,null,
1056c1063
<               rangeCount(sf,start,end,
---
>               rangeCount(parsed,sf,start,end,
1077c1084
<     final String[] fields = params.getParams(FacetParams.FACET_RANGE);
---
>     final String[] fields = global.getParams(FacetParams.FACET_RANGE);
1093,1095c1100,1103
<     parseParams(FacetParams.FACET_RANGE, facetRange);
<     String f = facetValue;
<     String methodStr = params.get(FacetParams.FACET_RANGE_METHOD);
---
>     final ParsedParams parsed = parseParams(FacetParams.FACET_RANGE, facetRange);
>     final String key = parsed.key;
>     final String f = parsed.facetValue;
>     String methodStr = parsed.params.get(FacetParams.FACET_RANGE_METHOD);
1097c1105
<     boolean groupFacet = params.getBool(GroupParams.GROUP_FACET, false);
---
>     boolean groupFacet = parsed.params.getBool(GroupParams.GROUP_FACET, false);
1149c1157
<       resOuter.add(key, getFacetRangeCountsDocValues(sf, calc));
---
>       resOuter.add(key, getFacetRangeCountsDocValues(sf, calc, parsed));
1151c1159
<       resOuter.add(key, getFacetRangeCounts(sf, calc));
---
>       resOuter.add(key, getFacetRangeCounts(sf, calc, parsed));
1157c1165,1166
<      final RangeEndpointCalculator<T> calc) throws IOException {
---
>      final RangeEndpointCalculator<T> calc,
>      final ParsedParams parsed) throws IOException {
1159a1169,1170
>     final SolrParams params = parsed.params;
>     final SolrParams required = parsed.required;
1217c1228
<       final int count = rangeCount(sf, lowS, highS,
---
>       final int count = rangeCount(parsed, sf, lowS, highS,
1252c1263
<                   rangeCount(sf,null,startS,
---
>                   rangeCount(parsed,sf,null,startS,
1262c1273
<                   rangeCount(sf,endS,null,
---
>                   rangeCount(parsed,sf,endS,null,
1270c1281
<                  rangeCount(sf,startS,endS,
---
>                  rangeCount(parsed,sf,startS,endS,
1283c1294
<    final RangeEndpointCalculator<T> calc) throws IOException {
---
>    final RangeEndpointCalculator<T> calc, ParsedParams parsed) throws IOException {
1290,1291c1301,1302
<   String globalStartS = required.getFieldParam(f,FacetParams.FACET_RANGE_START);
<   String globalEndS = required.getFieldParam(f,FacetParams.FACET_RANGE_END);
---
>   String globalStartS = parsed.required.getFieldParam(f,FacetParams.FACET_RANGE_START);
>   String globalEndS = parsed.required.getFieldParam(f,FacetParams.FACET_RANGE_END);
1302c1313
<   final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);
---
>   final String gap = parsed.required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);
1307c1318
<   final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);
---
>   final int minCount = parsed.params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);
1310c1321
<     (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));
---
>     (parsed.params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));
1314c1325
<       params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);
---
>       parsed.params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);
1356c1367
<       if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {
---
>       if (parsed.params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {
1421c1432
<   new IntervalFacets(sf, searcher, docs, intervalsArray);
---
>   new IntervalFacets(sf, searcher, parsed.docs, intervalsArray);
1464c1475
<   protected int rangeCount(SchemaField sf, String low, String high,
---
>   protected int rangeCount(ParsedParams parsed, SchemaField sf, String low, String high,
1467,1468c1478,1479
<     if (params.getBool(GroupParams.GROUP_FACET, false)) {
<       return getGroupedFacetQueryCount(rangeQ);
---
>     if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {
>       return getGroupedFacetQueryCount(rangeQ, parsed);
1470c1481
<       return searcher.numDocs(rangeQ , docs);
---
>       return searcher.numDocs(rangeQ , parsed.docs);
1478c1489
<   protected int rangeCount(SchemaField sf, Date low, Date high,
---
>   protected int rangeCount(ParsedParams parsed, SchemaField sf, Date low, Date high,
1481c1492
<     return searcher.numDocs(rangeQ, docs);
---
>     return searcher.numDocs(rangeQ, parsed.docs);
1734c1745
<     String[] fields = params.getParams(FacetParams.FACET_INTERVAL);
---
>     String[] fields = global.getParams(FacetParams.FACET_INTERVAL);
1738,1741c1749,1752
<       parseParams(FacetParams.FACET_INTERVAL, field);
<       String[] intervalStrs = required.getFieldParams(facetValue, FacetParams.FACET_INTERVAL_SET);
<       SchemaField schemaField = searcher.getCore().getLatestSchema().getField(facetValue);
<       if (params.getBool(GroupParams.GROUP_FACET, false)) {
---
>       final ParsedParams parsed = parseParams(FacetParams.FACET_INTERVAL, field);
>       String[] intervalStrs = parsed.required.getFieldParams(parsed.facetValue, FacetParams.FACET_INTERVAL_SET);
>       SchemaField schemaField = searcher.getCore().getLatestSchema().getField(parsed.facetValue);
>       if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {
1746,1747c1757,1758
<       res.add(key, fieldResults);
<       IntervalFacets intervalFacets = new IntervalFacets(schemaField, searcher, docs, intervalStrs, params);
---
>       res.add(parsed.key, fieldResults);
>       IntervalFacets intervalFacets = new IntervalFacets(schemaField, searcher, parsed.docs, intervalStrs, parsed.params);
1762c1773
<     if (params.getBool(GroupParams.GROUP_FACET, false)) {
---
>     if (global.getBool(GroupParams.GROUP_FACET, false)) {
1767c1778
<       parseParams(FacetParams.FACET_HEATMAP, unparsedField); 
---
>       final ParsedParams parsed = parseParams(FacetParams.FACET_HEATMAP, unparsedField); 
1769c1780
<       resOuter.add(key, SpatialHeatmapFacets.getHeatmapForField(key, facetValue, rb, params, docs));
---
>       resOuter.add(parsed.key, SpatialHeatmapFacets.getHeatmapForField(parsed.key, parsed.facetValue, rb, parsed.params, parsed.docs));
