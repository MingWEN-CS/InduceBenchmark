35d34
< import org.apache.lucene.search.MatchAllDocsQuery;
38d36
< import org.apache.lucene.search.TermRangeQuery;
49,51d46
< import org.apache.solr.common.params.FacetParams.FacetRangeInclude;
< import org.apache.solr.common.params.FacetParams.FacetRangeMethod;
< import org.apache.solr.common.params.FacetParams.FacetRangeOther;
58a54
> import org.apache.solr.handler.component.FacetComponent;
63d58
< import org.apache.solr.schema.DateRangeField;
67d61
< import org.apache.solr.schema.TrieDateField;
81d74
< import org.apache.solr.util.DateMathParser;
89,90c82
< import java.util.Date;
< import java.util.EnumSet;
---
> import java.util.Collections;
94d85
< import java.util.Set;
124,125d114
<   protected SimpleOrderedMap<Object> facetResponse;
< 
133a123
>     final public List<String> tags;      
141a132
>                         final List<String> tags,
148a140
>       this.tags = tags;
153c145
<       return new ParsedParams(localParams, params, required, facetValue, docs, key, threads);
---
>       return new ParsedParams(localParams, params, required, facetValue, docs, key, tags, threads);
156c148
<   
---
> 
198a191
>     List<String> tags = Collections.emptyList();
204c197
<       return new ParsedParams(localParams, params, required, facetValue, docs, key, threads);
---
>       return new ParsedParams(localParams, params, required, facetValue, docs, key, tags, threads);
220a214,216
>     String tagStr = localParams.get(CommonParams.TAG);
>     tags = tagStr == null ? Collections.<String>emptyList() : StrUtils.splitSmart(tagStr,',');
> 
228c224
<     if (excludeStr == null) return new ParsedParams(localParams, params, required, facetValue, docs, key, threads);
---
>     if (excludeStr == null) return new ParsedParams(localParams, params, required, facetValue, docs, key, tags, threads);
229a226,231
>     List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');
>     docs = computeDocSet(docs, excludeTagList);
>     return new ParsedParams(localParams, params, required, facetValue, docs, key, tags, threads);
>   }
> 
>   protected DocSet computeDocSet(DocSet baseDocSet, List<String> excludeTagList) throws SyntaxError, IOException {
231,232c233,236
<     if (tagMap != null && rb != null) {
<       List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');
---
>     
>     if (tagMap == null || rb == null) {
>       return baseDocSet;
>     }
234,243c238,246
<       IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<>();
<       for (String excludeTag : excludeTagList) {
<         Object olst = tagMap.get(excludeTag);
<         
<         if (!(olst instanceof Collection)) continue;
<         for (Object o : (Collection<?>)olst) {
<           if (!(o instanceof QParser)) continue;
<           QParser qp = (QParser)o;
<           excludeSet.put(qp.getQuery(), Boolean.TRUE);
<         }
---
>     IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<>();
>     for (String excludeTag : excludeTagList) {
>       Object olst = tagMap.get(excludeTag);
>       
>       if (!(olst instanceof Collection)) continue;
>       for (Object o : (Collection<?>)olst) {
>         if (!(o instanceof QParser)) continue;
>         QParser qp = (QParser)o;
>         excludeSet.put(qp.getQuery(), Boolean.TRUE);
245c248,249
<       if (excludeSet.size() == 0) return new ParsedParams(localParams, params, required, facetValue, docs, key, threads);
---
>     }
>     if (excludeSet.size() == 0) return baseDocSet;
247c251
<       List<Query> qlist = new ArrayList<>();
---
>     List<Query> qlist = new ArrayList<>();
249,252c253,256
<       
<       if (!excludeSet.containsKey(rb.getQuery())) {
<         qlist.add(rb.getQuery());
<       }
---
>     
>     if (!excludeSet.containsKey(rb.getQuery())) {
>       qlist.add(rb.getQuery());
>     }
254,259c258,262
<       
<       if (rb.getFilters() != null) {
<         for (Query q : rb.getFilters()) {
<           if (!excludeSet.containsKey(q)) {
<             qlist.add(q);
<           }
---
>     
>     if (rb.getFilters() != null) {
>       for (Query q : rb.getFilters()) {
>         if (!excludeSet.containsKey(q)) {
>           qlist.add(q);
261a265
>     }
263,278c267,275
<       
<       DocSet base = searcher.getDocSet(qlist);
<       if (rb.grouping() && rb.getGroupingSpec().isTruncateGroups()) {
<         Grouping grouping = new Grouping(searcher, null, rb.getQueryCommand(), false, 0, false);
<         grouping.setGroupSort(rb.getGroupingSpec().getSortWithinGroup());
<         if (rb.getGroupingSpec().getFields().length > 0) {
<           grouping.addFieldCommand(rb.getGroupingSpec().getFields()[0], req);
<         } else if (rb.getGroupingSpec().getFunctions().length > 0) {
<           grouping.addFunctionCommand(rb.getGroupingSpec().getFunctions()[0], req);
<         } else {
<           docs = base;
<           return new ParsedParams(localParams, params, required, facetValue, docs, key, threads);
<         }
<         AbstractAllGroupHeadsCollector allGroupHeadsCollector = grouping.getCommands().get(0).createAllGroupCollector();
<         searcher.search(base.getTopFilter(), allGroupHeadsCollector);
<         docs = new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));
---
>     
>     DocSet base = searcher.getDocSet(qlist);
>     if (rb.grouping() && rb.getGroupingSpec().isTruncateGroups()) {
>       Grouping grouping = new Grouping(searcher, null, rb.getQueryCommand(), false, 0, false);
>       grouping.setGroupSort(rb.getGroupingSpec().getSortWithinGroup());
>       if (rb.getGroupingSpec().getFields().length > 0) {
>         grouping.addFieldCommand(rb.getGroupingSpec().getFields()[0], req);
>       } else if (rb.getGroupingSpec().getFunctions().length > 0) {
>         grouping.addFunctionCommand(rb.getGroupingSpec().getFunctions()[0], req);
280c277
<         docs = base;
---
>         return base;
281a279,283
>       AbstractAllGroupHeadsCollector allGroupHeadsCollector = grouping.getCommands().get(0).createAllGroupCollector();
>       searcher.search(base.getTopFilter(), allGroupHeadsCollector);
>       return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));
>     } else {
>       return base;
283,284d284
< 
<     return new ParsedParams(localParams, params, required, facetValue, docs, key, threads);
287d286
< 
295,299c294
< 
< 
< 
< 
< 
---
>   @Deprecated
301,319c296
< 
<     
<     if (!global.getBool(FacetParams.FACET,true))
<       return null;
< 
<     facetResponse = new SimpleOrderedMap<>();
<     try {
<       facetResponse.add("facet_queries", getFacetQueryCounts());
<       facetResponse.add("facet_fields", getFacetFieldCounts());
<       facetResponse.add("facet_dates", getFacetDateCounts());
<       facetResponse.add("facet_ranges", getFacetRangeCounts());
<       facetResponse.add("facet_intervals", getFacetIntervalCounts());
<       facetResponse.add(SpatialHeatmapFacets.RESPONSE_KEY, getHeatmapCounts());
<     } catch (IOException e) {
<       throw new SolrException(ErrorCode.SERVER_ERROR, e);
<     } catch (SyntaxError e) {
<       throw new SolrException(ErrorCode.BAD_REQUEST, e);
<     }
<     return facetResponse;
---
>     return FacetComponent.getFacetCounts(this);
344,354c321
< 
<         
<         Query qobj = QParser.getParser(q, null, req).getQuery();
< 
<         if (qobj == null) {
<           res.add(parsed.key, 0);
<         } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {
<           res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed));
<         } else {
<           res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));
<         }
---
>         getFacetQueryCount(parsed, res);
360c327,341
<   
---
> 
>   public void getFacetQueryCount(ParsedParams parsed, NamedList<Integer> res) throws SyntaxError, IOException {
>     
>     
>     Query qobj = QParser.getParser(parsed.facetValue, null, req).getQuery();
> 
>     if (qobj == null) {
>       res.add(parsed.key, 0);
>     } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {
>       res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed.docs));
>     } else {
>       res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));
>     }
>   }
> 
366,367c347,349
<   public int getGroupedFacetQueryCount(Query facetQuery, ParsedParams parsed) throws IOException {
<     String groupField = parsed.params.get(GroupParams.GROUP_FIELD);
---
>   public int getGroupedFacetQueryCount(Query facetQuery, DocSet docSet) throws IOException {
>     
>     String groupField = global.get(GroupParams.GROUP_FIELD);
374c356
<     
---
> 
376c358
<     Filter mainQueryFilter = parsed.docs.getTopFilter(); 
---
>     Filter mainQueryFilter = docSet.getTopFilter(); 
491c473
<           counts = getFacetTermEnumCounts(searcher, docs, field, offset, limit, mincount, missing, sort, prefix, contains, ignoreCase);
---
>           counts = getFacetTermEnumCounts(searcher, docs, field, offset, limit, mincount,missing,sort,prefix, contains, ignoreCase, params);
730c712
<   public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase)
---
>   public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase, SolrParams params)
893,1499d874
< 
< 
< 
<   @Deprecated
<   public NamedList<Object> getFacetDateCounts()
<     throws IOException, SyntaxError {
< 
<     final NamedList<Object> resOuter = new SimpleOrderedMap<>();
<     final String[] fields = global.getParams(FacetParams.FACET_DATE);
< 
<     if (null == fields || 0 == fields.length) return resOuter;
< 
<     for (String f : fields) {
<       getFacetDateCounts(f, resOuter);
<     }
< 
<     return resOuter;
<   }
< 
<   
< 
< 
<   @Deprecated
<   public void getFacetDateCounts(String dateFacet, NamedList<Object> resOuter)
<       throws IOException, SyntaxError {
< 
<     final IndexSchema schema = searcher.getSchema();
< 
<     final ParsedParams parsed = parseParams(FacetParams.FACET_DATE, dateFacet);
<     final SolrParams params = parsed.params;
<     final SolrParams required = parsed.required;
<     final String key = parsed.key;
<     final String f = parsed.facetValue;
< 
<     final NamedList<Object> resInner = new SimpleOrderedMap<>();
<     resOuter.add(key, resInner);
<     final SchemaField sf = schema.getField(f);
<     if (! (sf.getType() instanceof TrieDateField)) {
<       throw new SolrException
<           (SolrException.ErrorCode.BAD_REQUEST,
<               "Can not date facet on a field which is not a TrieDateField: " + f);
<     }
<     final TrieDateField ft = (TrieDateField) sf.getType();
<     final String startS
<         = required.getFieldParam(f,FacetParams.FACET_DATE_START);
<     final Date start;
<     try {
<       start = ft.parseMath(null, startS);
<     } catch (SolrException e) {
<       throw new SolrException
<           (SolrException.ErrorCode.BAD_REQUEST,
<               "date facet 'start' is not a valid Date string: " + startS, e);
<     }
<     final String endS
<         = required.getFieldParam(f,FacetParams.FACET_DATE_END);
<     Date end; 
<     try {
<       end = ft.parseMath(null, endS);
<     } catch (SolrException e) {
<       throw new SolrException
<           (SolrException.ErrorCode.BAD_REQUEST,
<               "date facet 'end' is not a valid Date string: " + endS, e);
<     }
< 
<     if (end.before(start)) {
<       throw new SolrException
<           (SolrException.ErrorCode.BAD_REQUEST,
<               "date facet 'end' comes before 'start': "+endS+" < "+startS);
<     }
< 
<     final String gap = required.getFieldParam(f,FacetParams.FACET_DATE_GAP);
<     final DateMathParser dmp = new DateMathParser();
< 
<     final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);
< 
<     String[] iStrs = params.getFieldParams(f,FacetParams.FACET_DATE_INCLUDE);
<     
<     
<     
<     final EnumSet<FacetRangeInclude> include = 
<       (null == iStrs || 0 == iStrs.length ) ?
<       EnumSet.of(FacetRangeInclude.LOWER, 
<                  FacetRangeInclude.UPPER, 
<                  FacetRangeInclude.EDGE)
<       : FacetRangeInclude.parseParam(iStrs);
< 
<     try {
<       Date low = start;
<       while (low.before(end)) {
<         dmp.setNow(low);
<         String label = ft.toExternal(low);
< 
<         Date high = dmp.parseMath(gap);
<         if (end.before(high)) {
<           if (params.getFieldBool(f,FacetParams.FACET_DATE_HARD_END,false)) {
<             high = end;
<           } else {
<             end = high;
<           }
<         }
<         if (high.before(low)) {
<           throw new SolrException
<               (SolrException.ErrorCode.BAD_REQUEST,
<                   "date facet infinite loop (is gap negative?)");
<         }
<         if (high.equals(low)) {
<           throw new SolrException
<             (SolrException.ErrorCode.BAD_REQUEST,
<              "date facet infinite loop: gap is effectively zero");
<         }
<         final boolean includeLower =
<             (include.contains(FacetRangeInclude.LOWER) ||
<                 (include.contains(FacetRangeInclude.EDGE) && low.equals(start)));
<         final boolean includeUpper =
<             (include.contains(FacetRangeInclude.UPPER) ||
<                 (include.contains(FacetRangeInclude.EDGE) && high.equals(end)));
< 
<         final int count = rangeCount(parsed,sf,low,high,includeLower,includeUpper);
<         if (count >= minCount) {
<           resInner.add(label, count);
<         }
<         low = high;
<       }
<     } catch (java.text.ParseException e) {
<       throw new SolrException
<           (SolrException.ErrorCode.BAD_REQUEST,
<               "date facet 'gap' is not a valid Date Math string: " + gap, e);
<     }
< 
<     
<     
<     
<     resInner.add("gap", gap);
<     resInner.add("start", start);
<     resInner.add("end", end);
< 
<     final String[] othersP =
<         params.getFieldParams(f,FacetParams.FACET_DATE_OTHER);
<     if (null != othersP && 0 < othersP.length ) {
<       final Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);
< 
<       for (final String o : othersP) {
<         others.add(FacetRangeOther.get(o));
<       }
< 
<       
<       
<       if (! others.contains(FacetRangeOther.NONE) ) {
<         boolean all = others.contains(FacetRangeOther.ALL);
< 
<         if (all || others.contains(FacetRangeOther.BEFORE)) {
<           
<           resInner.add(FacetRangeOther.BEFORE.toString(),
<               rangeCount(parsed,sf,null,start,
<                   false,
<                   (include.contains(FacetRangeInclude.OUTER) ||
<                       (! (include.contains(FacetRangeInclude.LOWER) ||
<                           include.contains(FacetRangeInclude.EDGE))))));
<         }
<         if (all || others.contains(FacetRangeOther.AFTER)) {
<           
<           resInner.add(FacetRangeOther.AFTER.toString(),
<               rangeCount(parsed,sf,end,null,
<                   (include.contains(FacetRangeInclude.OUTER) ||
<                       (! (include.contains(FacetRangeInclude.UPPER) ||
<                           include.contains(FacetRangeInclude.EDGE)))),
<                   false));
<         }
<         if (all || others.contains(FacetRangeOther.BETWEEN)) {
<           resInner.add(FacetRangeOther.BETWEEN.toString(),
<               rangeCount(parsed,sf,start,end,
<                   (include.contains(FacetRangeInclude.LOWER) ||
<                       include.contains(FacetRangeInclude.EDGE)),
<                   (include.contains(FacetRangeInclude.UPPER) ||
<                       include.contains(FacetRangeInclude.EDGE))));
<         }
<       }
<     }
<   }
< 
<   
<   
< 
< 
< 
< 
< 
< 
< 
<   public NamedList<Object> getFacetRangeCounts() throws IOException, SyntaxError {
<     final NamedList<Object> resOuter = new SimpleOrderedMap<>();
<     final String[] fields = global.getParams(FacetParams.FACET_RANGE);
< 
<     if (null == fields || 0 == fields.length) return resOuter;
< 
<     for (String f : fields) {
<       getFacetRangeCounts(f, resOuter);
<     }
< 
<     return resOuter;
<   }
< 
<   void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)
<       throws IOException, SyntaxError {
< 
<     final IndexSchema schema = searcher.getSchema();
< 
<     final ParsedParams parsed = parseParams(FacetParams.FACET_RANGE, facetRange);
<     final String key = parsed.key;
<     final String f = parsed.facetValue;
<     String methodStr = parsed.params.get(FacetParams.FACET_RANGE_METHOD);
<     FacetRangeMethod method = (methodStr==null?FacetRangeMethod.getDefault():FacetRangeMethod.get(methodStr));
<     boolean groupFacet = parsed.params.getBool(GroupParams.GROUP_FACET, false);
<     if (groupFacet && method.equals(FacetRangeMethod.DV)) {
<       
<       log.warn("Range facet method '" + FacetRangeMethod.DV + "' is not supported together with '" + 
<               GroupParams.GROUP_FACET + "'. Will use method '" + FacetRangeMethod.FILTER + "' instead");
<       method = FacetRangeMethod.FILTER;
<     }
< 
<     final SchemaField sf = schema.getField(f);
<     final FieldType ft = sf.getType();
< 
<     RangeEndpointCalculator<?> calc = null;
< 
<     if (ft instanceof TrieField) {
<       final TrieField trie = (TrieField)ft;
< 
<       switch (trie.getType()) {
<         case FLOAT:
<           calc = new FloatRangeEndpointCalculator(sf);
<           break;
<         case DOUBLE:
<           calc = new DoubleRangeEndpointCalculator(sf);
<           break;
<         case INTEGER:
<           calc = new IntegerRangeEndpointCalculator(sf);
<           break;
<         case LONG:
<           calc = new LongRangeEndpointCalculator(sf);
<           break;
<         case DATE:
<           calc = new DateRangeEndpointCalculator(sf, null);
<           break;
<         default:
<           throw new SolrException
<               (SolrException.ErrorCode.BAD_REQUEST,
<                   "Unable to range facet on tried field of unexpected type:" + f);
<       }
<     } else if (ft instanceof DateRangeField) {
<       calc = new DateRangeFieldEndpointCalculator(sf, null);
<       if (method.equals(FacetRangeMethod.DV)) {
<         
<         log.warn("Range facet method '" + FacetRangeMethod.DV + "' is not supported together with field type '" + 
<             DateRangeField.class + "'. Will use method '" + FacetRangeMethod.FILTER + "' instead");
<         method = FacetRangeMethod.FILTER;
<       }
<     } else {
<       throw new SolrException
<           (SolrException.ErrorCode.BAD_REQUEST,
<               "Unable to range facet on field:" + sf);
<     }
<     if (method.equals(FacetRangeMethod.DV)) {
<       assert ft instanceof TrieField;
<       resOuter.add(key, getFacetRangeCountsDocValues(sf, calc, parsed));
<     } else {
<       resOuter.add(key, getFacetRangeCounts(sf, calc, parsed));
<     }
<   }
< 
<   private <T extends Comparable<T>> NamedList<Object> getFacetRangeCounts
<     (final SchemaField sf,
<      final RangeEndpointCalculator<T> calc,
<      final ParsedParams parsed) throws IOException {
<     
<     final String f = sf.getName();
<     final SolrParams params = parsed.params;
<     final SolrParams required = parsed.required;
<     final NamedList<Object> res = new SimpleOrderedMap<>();
<     final NamedList<Integer> counts = new NamedList<>();
<     res.add("counts", counts);
< 
<     final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));
<     
<     T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));
<     if (end.compareTo(start) < 0) {
<       throw new SolrException
<         (SolrException.ErrorCode.BAD_REQUEST,
<          "range facet 'end' comes before 'start': "+end+" < "+start);
<     }
<     
<     final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);
<     
<     
<     res.add("gap", calc.getGap(gap));
<     
<     final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);
<     
<     final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam
<       (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));
<     
<     T low = start;
<     
<     while (low.compareTo(end) < 0) {
<       T high = calc.addGap(low, gap);
<       if (end.compareTo(high) < 0) {
<         if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {
<           high = end;
<         } else {
<           end = high;
<         }
<       }
<       if (high.compareTo(low) < 0) {
<         throw new SolrException
<           (SolrException.ErrorCode.BAD_REQUEST,
<            "range facet infinite loop (is gap negative? did the math overflow?)");
<       }
<       if (high.compareTo(low) == 0) {
<         throw new SolrException
<           (SolrException.ErrorCode.BAD_REQUEST,
<            "range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: " + low + " + " + gap + " = " + high );
<       }
<       
<       final boolean includeLower = 
<         (include.contains(FacetRangeInclude.LOWER) ||
<          (include.contains(FacetRangeInclude.EDGE) && 
<           0 == low.compareTo(start)));
<       final boolean includeUpper = 
<         (include.contains(FacetRangeInclude.UPPER) ||
<          (include.contains(FacetRangeInclude.EDGE) && 
<           0 == high.compareTo(end)));
<       
<       final String lowS = calc.formatValue(low);
<       final String highS = calc.formatValue(high);
< 
<       final int count = rangeCount(parsed, sf, lowS, highS,
<                                    includeLower,includeUpper);
<       if (count >= minCount) {
<         counts.add(lowS, count);
<       }
<       
<       low = high;
<     }
<     
<     
<     
<     
<     res.add("start", start);
<     res.add("end", end);
<     
<     final String[] othersP =
<       params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);
<     if (null != othersP && 0 < othersP.length ) {
<       Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);
<       
<       for (final String o : othersP) {
<         others.add(FacetRangeOther.get(o));
<       }
<       
<       
<       
<       if (! others.contains(FacetRangeOther.NONE) ) {
<         
<         boolean all = others.contains(FacetRangeOther.ALL);
<         final String startS = calc.formatValue(start);
<         final String endS = calc.formatValue(end);
< 
<         if (all || others.contains(FacetRangeOther.BEFORE)) {
<           
<           res.add(FacetRangeOther.BEFORE.toString(),
<                   rangeCount(parsed,sf,null,startS,
<                              false,
<                              (include.contains(FacetRangeInclude.OUTER) ||
<                               (! (include.contains(FacetRangeInclude.LOWER) ||
<                                   include.contains(FacetRangeInclude.EDGE))))));
<           
<         }
<         if (all || others.contains(FacetRangeOther.AFTER)) {
<           
<           res.add(FacetRangeOther.AFTER.toString(),
<                   rangeCount(parsed,sf,endS,null,
<                              (include.contains(FacetRangeInclude.OUTER) ||
<                               (! (include.contains(FacetRangeInclude.UPPER) ||
<                                   include.contains(FacetRangeInclude.EDGE)))),  
<                              false));
<         }
<         if (all || others.contains(FacetRangeOther.BETWEEN)) {
<          res.add(FacetRangeOther.BETWEEN.toString(),
<                  rangeCount(parsed,sf,startS,endS,
<                             (include.contains(FacetRangeInclude.LOWER) ||
<                              include.contains(FacetRangeInclude.EDGE)),
<                             (include.contains(FacetRangeInclude.UPPER) ||
<                              include.contains(FacetRangeInclude.EDGE))));
<          
<         }
<       }
<     }
<     return res;
<   }  
<   
<   private <T extends Comparable<T>> NamedList<Object> getFacetRangeCountsDocValues(final SchemaField sf,
<    final RangeEndpointCalculator<T> calc, ParsedParams parsed) throws IOException {
<   
<   final String f = sf.getName();
<   final NamedList<Object> res = new SimpleOrderedMap<>();
<   final NamedList<Integer> counts = new NamedList<>();
<   res.add("counts", counts);
<   
<   String globalStartS = parsed.required.getFieldParam(f,FacetParams.FACET_RANGE_START);
<   String globalEndS = parsed.required.getFieldParam(f,FacetParams.FACET_RANGE_END);
< 
<   final T start = calc.getValue(globalStartS);
<   
<   T end = calc.getValue(globalEndS);
<   if (end.compareTo(start) < 0) {
<     throw new SolrException
<       (SolrException.ErrorCode.BAD_REQUEST,
<        "range facet 'end' comes before 'start': "+end+" < "+start);
<   }
<   
<   final String gap = parsed.required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);
<   
<   
<   res.add("gap", calc.getGap(gap));
<   
<   final int minCount = parsed.params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);
<   
<   final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam
<     (parsed.params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));
<   ArrayList<IntervalFacets.FacetInterval> intervals = new ArrayList<>();
<   
<   final String[] othersP =
<       parsed.params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);
<   
<   boolean includeBefore = false;
<   boolean includeBetween = false;
<   boolean includeAfter = false;
<   
<   if (othersP != null && othersP.length > 0) {
<     Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);
<     
<     
<     for (final String o : othersP) {
<       others.add(FacetRangeOther.get(o));
<     }
<     
<     
<     if (!others.contains(FacetRangeOther.NONE)) {
<       
<       if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.BEFORE)) {
<         
<         intervals.add(null);
<         includeBefore = true;
<       }
<       
<       if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.BETWEEN)) {
<         
<         intervals.add(null);
<         includeBetween = true;
<       }
<       
<       if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.AFTER)) {
<         includeAfter = true;
<       }
<     }
<     
<   }
<   
<   
<   T low = start;
<   
<   while (low.compareTo(end) < 0) {
<     T high = calc.addGap(low, gap);
<     if (end.compareTo(high) < 0) {
<       if (parsed.params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {
<         high = end;
<       } else {
<         end = high;
<       }
<     }
<     if (high.compareTo(low) < 0) {
<       throw new SolrException
<         (SolrException.ErrorCode.BAD_REQUEST,
<          "range facet infinite loop (is gap negative? did the math overflow?)");
<     }
<     if (high.compareTo(low) == 0) {
<       throw new SolrException
<         (SolrException.ErrorCode.BAD_REQUEST,
<          "range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: " + low + " + " + gap + " = " + high );
<     }
<     
<     final boolean includeLower = 
<       (include.contains(FacetRangeInclude.LOWER) ||
<        (include.contains(FacetRangeInclude.EDGE) && 
<         0 == low.compareTo(start)));
<     final boolean includeUpper = 
<       (include.contains(FacetRangeInclude.UPPER) ||
<        (include.contains(FacetRangeInclude.EDGE) && 
<         0 == high.compareTo(end)));
<     
<     final String lowS = calc.formatValue(low);
<     final String highS = calc.formatValue(high);
<     
<     intervals.add(new IntervalFacets.FacetInterval(sf, lowS, highS, includeLower, includeUpper, lowS));
<     
<     low = high;
<   }
<   
<   if (includeBefore) {
<     
<     intervals.set(0, new IntervalFacets.FacetInterval(sf, "*", globalStartS, true, 
<         include.contains(FacetRangeInclude.OUTER) ||
<           (! (include.contains(FacetRangeInclude.LOWER) ||
<             include.contains(FacetRangeInclude.EDGE))), FacetRangeOther.BEFORE.toString()));
<   }
<   
<   if (includeBetween) {
<     int intervalIndex = (includeBefore?1:0);
<     intervals.set(intervalIndex, new IntervalFacets.FacetInterval(sf, globalStartS, calc.formatValue(end), 
<         include.contains(FacetRangeInclude.LOWER) ||
<         include.contains(FacetRangeInclude.EDGE), 
<         include.contains(FacetRangeInclude.UPPER) ||
<         include.contains(FacetRangeInclude.EDGE), 
<         FacetRangeOther.BETWEEN.toString()));
<    }
<   
<   if (includeAfter) {
<     
<     intervals.add(new IntervalFacets.FacetInterval(sf, calc.formatValue(end), "*", 
<         (include.contains(FacetRangeInclude.OUTER) ||
<         (! (include.contains(FacetRangeInclude.UPPER) ||
<             include.contains(FacetRangeInclude.EDGE)))),  
<        false, FacetRangeOther.AFTER.toString()));
<   }
<   
<   IntervalFacets.FacetInterval[] intervalsArray = intervals.toArray(new IntervalFacets.FacetInterval[intervals.size()]);
<   
<   intervals = null;
<   
<   new IntervalFacets(sf, searcher, parsed.docs, intervalsArray);
<   
<   int intervalIndex = 0;
<   int lastIntervalIndex = intervalsArray.length - 1;
<   
<   
<   if (includeBefore) {
<     res.add(intervalsArray[intervalIndex].getKey(), intervalsArray[intervalIndex].getCount());
<     intervalIndex++;
<   }
<   
<   
<   
<   if (includeBetween) {
<     res.add(intervalsArray[intervalIndex].getKey(), intervalsArray[intervalIndex].getCount());
<     intervalIndex++;
<   }
<   
<   
<   
<   if (includeAfter) {
<     res.add(intervalsArray[lastIntervalIndex].getKey(), intervalsArray[lastIntervalIndex].getCount());
<     lastIntervalIndex--;
<   }
<   
<   while (intervalIndex <= lastIntervalIndex) {
<     FacetInterval interval = intervalsArray[intervalIndex];
<     if (interval.getCount() >= minCount) {
<       counts.add(interval.getKey(), interval.getCount());
<     }
<     intervalIndex++;
<   }
<   
<   res.add("start", start);
<   res.add("end", end);
<   return res;
< }  
<   
<   
< 
< 
< 
< 
<   protected int rangeCount(ParsedParams parsed, SchemaField sf, String low, String high,
<                            boolean iLow, boolean iHigh) throws IOException {
<     Query rangeQ = sf.getType().getRangeQuery(null, sf, low, high, iLow, iHigh);
<     if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {
<       return getGroupedFacetQueryCount(rangeQ, parsed);
<     } else {
<       return searcher.numDocs(rangeQ , parsed.docs);
<     }
<   }
< 
<   
< 
< 
<   @Deprecated
<   protected int rangeCount(ParsedParams parsed, SchemaField sf, Date low, Date high,
<                            boolean iLow, boolean iHigh) throws IOException {
<     Query rangeQ = ((TrieDateField)(sf.getType())).getRangeQuery(null, sf, low, high, iLow, iHigh);
<     return searcher.numDocs(rangeQ, parsed.docs);
<   }
<   
<   
< 
< 
< 
< 
1533,1741d907
<   private static abstract class RangeEndpointCalculator<T extends Comparable<T>> {
<     protected final SchemaField field;
<     public RangeEndpointCalculator(final SchemaField field) {
<       this.field = field;
<     }
< 
<     
< 
< 
< 
<     public String formatValue(final T val) {
<       return val.toString();
<     }
<     
< 
< 
< 
<     public final T getValue(final String rawval) {
<       try {
<         return parseVal(rawval);
<       } catch (Exception e) {
<         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
<                                 "Can't parse value "+rawval+" for field: " + 
<                                 field.getName(), e);
<       }
<     }
<     
< 
< 
< 
<     protected abstract T parseVal(final String rawval) 
<       throws java.text.ParseException;
< 
<     
< 
< 
< 
< 
< 
< 
< 
<     public final Object getGap(final String gap) {
<       try {
<         return parseGap(gap);
<       } catch (Exception e) {
<         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
<                                 "Can't parse gap "+gap+" for field: " + 
<                                 field.getName(), e);
<       }
<     }
< 
<     
< 
< 
< 
< 
< 
< 
<     protected Object parseGap(final String rawval) 
<       throws java.text.ParseException {
<       return parseVal(rawval);
<     }
< 
<     
< 
< 
< 
< 
<     public final T addGap(T value, String gap) {
<       try {
<         return parseAndAddGap(value, gap);
<       } catch (Exception e) {
<         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
<                                 "Can't add gap "+gap+" to value " + value +
<                                 " for field: " + field.getName(), e);
<       }
<     }
<     
< 
< 
< 
< 
<     protected abstract T parseAndAddGap(T value, String gap) 
<       throws java.text.ParseException;
< 
<   }
< 
<   private static class FloatRangeEndpointCalculator 
<     extends RangeEndpointCalculator<Float> {
< 
<     public FloatRangeEndpointCalculator(final SchemaField f) { super(f); }
<     @Override
<     protected Float parseVal(String rawval) {
<       return Float.valueOf(rawval);
<     }
<     @Override
<     public Float parseAndAddGap(Float value, String gap) {
<       return new Float(value.floatValue() + Float.valueOf(gap).floatValue());
<     }
<   }
<   private static class DoubleRangeEndpointCalculator 
<     extends RangeEndpointCalculator<Double> {
< 
<     public DoubleRangeEndpointCalculator(final SchemaField f) { super(f); }
<     @Override
<     protected Double parseVal(String rawval) {
<       return Double.valueOf(rawval);
<     }
<     @Override
<     public Double parseAndAddGap(Double value, String gap) {
<       return new Double(value.doubleValue() + Double.valueOf(gap).doubleValue());
<     }
<   }
<   private static class IntegerRangeEndpointCalculator 
<     extends RangeEndpointCalculator<Integer> {
< 
<     public IntegerRangeEndpointCalculator(final SchemaField f) { super(f); }
<     @Override
<     protected Integer parseVal(String rawval) {
<       return Integer.valueOf(rawval);
<     }
<     @Override
<     public Integer parseAndAddGap(Integer value, String gap) {
<       return new Integer(value.intValue() + Integer.valueOf(gap).intValue());
<     }
<   }
<   private static class LongRangeEndpointCalculator 
<     extends RangeEndpointCalculator<Long> {
< 
<     public LongRangeEndpointCalculator(final SchemaField f) { super(f); }
<     @Override
<     protected Long parseVal(String rawval) {
<       return Long.valueOf(rawval);
<     }
<     @Override
<     public Long parseAndAddGap(Long value, String gap) {
<       return new Long(value.longValue() + Long.valueOf(gap).longValue());
<     }
<   }
<   private static class DateRangeEndpointCalculator 
<     extends RangeEndpointCalculator<Date> {
<     private static final String TYPE_ERR_MSG = "SchemaField must use field type extending TrieDateField or DateRangeField";
<     private final Date now;
<     public DateRangeEndpointCalculator(final SchemaField f, 
<                                        final Date now) { 
<       super(f); 
<       this.now = now;
<       if (! (field.getType() instanceof TrieDateField) ) {
<         throw new IllegalArgumentException
<           (TYPE_ERR_MSG);
<       }
<     }
<     @Override
<     public String formatValue(Date val) {
<       return ((TrieDateField)field.getType()).toExternal(val);
<     }
<     @Override
<     protected Date parseVal(String rawval) {
<       return ((TrieDateField)field.getType()).parseMath(now, rawval);
<     }
<     @Override
<     protected Object parseGap(final String rawval) {
<       return rawval;
<     }
<     @Override
<     public Date parseAndAddGap(Date value, String gap) throws java.text.ParseException {
<       final DateMathParser dmp = new DateMathParser();
<       dmp.setNow(value);
<       return dmp.parseMath(gap);
<     }
<   }
<   private static class DateRangeFieldEndpointCalculator
<       extends RangeEndpointCalculator<Date> {
<     private final Date now;
<     public DateRangeFieldEndpointCalculator(final SchemaField f,
<                                        final Date now) {
<       super(f);
<       this.now = now;
<       if (! (field.getType() instanceof DateRangeField) ) {
<         throw new IllegalArgumentException(DateRangeEndpointCalculator.TYPE_ERR_MSG);
<       }
<     }
<     @Override
<     public String formatValue(Date val) {
<       return TrieDateField.formatExternal(val);
<     }
<     @Override
<     protected Date parseVal(String rawval) {
<       return ((DateRangeField)field.getType()).parseMath(now, rawval);
<     }
<     @Override
<     protected Object parseGap(final String rawval) {
<       return rawval;
<     }
<     @Override
<     public Date parseAndAddGap(Date value, String gap) throws java.text.ParseException {
<       final DateMathParser dmp = new DateMathParser();
<       dmp.setNow(value);
<       return dmp.parseMath(gap);
<     }
<   }
< 
<   
< 
< 
< 
< 
< 
< 
1767c933
<   private NamedList getHeatmapCounts() throws IOException, SyntaxError {
---
>   public NamedList getHeatmapCounts() throws IOException, SyntaxError {
1783a950,965
> 
>   public SolrParams getGlobalParams() {
>     return global;
>   }
> 
>   public DocSet getDocsOrig() {
>     return docsOrig;
>   }
> 
>   public SolrQueryRequest getRequest() {
>     return req;
>   }
> 
>   public ResponseBuilder getResponseBuilder() {
>     return rb;
>   }
