19c19,29
< import org.apache.lucene.index.IndexReader;
---
> import java.io.BufferedReader;
> import java.io.IOException;
> import java.io.InputStream;
> import java.io.InputStreamReader;
> import java.util.ArrayList;
> import java.util.Arrays;
> import java.util.HashMap;
> import java.util.List;
> import java.util.Map;
> import java.util.WeakHashMap;
> 
20a31,33
> import org.apache.lucene.index.IndexReader;
> import org.apache.lucene.index.MultiFields;
> import org.apache.lucene.index.TermsEnum;
23,24c36
< import org.apache.lucene.index.TermsEnum;
< import org.apache.lucene.index.MultiFields;
---
> import org.apache.lucene.util.BytesRef;
27d38
< import org.apache.lucene.util.BytesRef;
29c40,43
< import org.apache.solr.schema.SchemaField;
---
> import org.apache.solr.handler.RequestHandlerBase;
> import org.apache.solr.handler.RequestHandlerUtils;
> import org.apache.solr.request.SolrQueryRequest;
> import org.apache.solr.response.SolrQueryResponse;
30a45
> import org.apache.solr.schema.SchemaField;
31a47
> import org.apache.solr.update.processor.UpdateRequestProcessor;
33,35c49,50
< 
< import java.io.*;
< import java.util.*;
---
> import org.slf4j.Logger;
> import org.slf4j.LoggerFactory;
101a117,120
>   
>   public static void resetCache(){
>     floatCache.resetCache();
>   }
152a172,179
>     
>     public void resetCache(){
>       synchronized(readerCache){
>         
>         
>         readerCache.clear();
>       }
>     }
274a302,325
>   public static class ReloadCacheRequestHandler extends RequestHandlerBase {
>     
>     static final Logger log = LoggerFactory.getLogger(ReloadCacheRequestHandler.class);
> 
>     @Override
>     public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)
>         throws Exception {
>       FileFloatSource.resetCache();
>       log.debug("readerCache has been reset.");
> 
>       UpdateRequestProcessor processor =
>         req.getCore().getUpdateProcessingChain(null).createProcessor(req, rsp);
>       try{
>         RequestHandlerUtils.handleCommit(req, processor, req.getParams(), true);
>       }
>       finally{
>         processor.finish();
>       }
>     }
> 
>     @Override
>     public String getDescription() {
>       return "Reload readerCache request handler";
>     }
275a327,341
>     @Override
>     public String getSource() {
>       return "$URL$";
>     }
> 
>     @Override
>     public String getSourceId() {
>       return "$Id$";
>     }
> 
>     @Override
>     public String getVersion() {
>       return "$Revision$";
>     }    
>   }
