20,21c20,25
< import org.apache.solr.BaseDistributedSearchTestCase;
< import org.apache.solr.client.solrj.SolrServerException;
---
> import java.nio.ByteBuffer;
> import java.util.HashSet;
> import java.util.List;
> import java.util.Map;
> import java.util.Set;
> 
23c27,28
< import org.apache.solr.common.params.ModifiableSolrParams;
---
> import org.apache.solr.cloud.AbstractFullDistribZkTestBase;
> import org.apache.solr.common.params.CommonParams;
26c31
< import org.junit.BeforeClass;
---
> import org.apache.solr.common.util.StrUtils;
29,31d33
< import java.nio.ByteBuffer;
< import java.util.Map;
< 
40c42
< public class DistributedQueryComponentOptimizationTest extends BaseDistributedSearchTestCase {
---
> public class DistributedQueryComponentOptimizationTest extends AbstractFullDistribZkTestBase {
43a46
>     schemaString = "schema-custom-field.xml";
46,48c49,51
<   @BeforeClass
<   public static void setUpBeforeClass() throws Exception {
<     initCore("solrconfig.xml", "schema-custom-field.xml");
---
>   @Override
>   protected String getSolrXml() {
>     return "solr-trackingshardhandler.xml";
53a57
>     waitForThingsToLevelOut(30);
56,70c60,74
<     index(id, "1", "text", "a", "test_sS", "21", "payload", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     
<           
<           "asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf", "value");
<     index(id, "2", "text", "b", "test_sS", "22", "payload", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    
<     index(id, "3", "text", "a", "test_sS", "23", "payload", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    
<     index(id, "4", "text", "b", "test_sS", "24", "payload", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    
<     index(id, "5", "text", "a", "test_sS", "25", "payload", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              
<     index(id, "6", "text", "c", "test_sS", "26", "payload", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  
<     index(id, "7", "text", "c", "test_sS", "27", "payload", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    
<     index(id, "8", "text", "c", "test_sS", "28", "payload", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    
<     index(id, "9", "text", "a", "test_sS", "29", "payload", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    
<     index(id, "10", "text", "b", "test_sS", "30", "payload", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   
<     index(id, "11", "text", "d", "test_sS", "31", "payload", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); 
<     index(id, "12", "text", "d", "test_sS", "32", "payload", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             
<     index(id, "13", "text", "d", "test_sS", "33", "payload", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             
---
>     index(id, "1", "text", "a", "test_sS", "21", "payload", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15}),                     
>         
>         "asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf", "value");
>     index(id, "2", "text", "b", "test_sS", "22", "payload", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16}));                    
>     index(id, "3", "text", "a", "test_sS", "23", "payload", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58}));                    
>     index(id, "4", "text", "b", "test_sS", "24", "payload", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15}));                    
>     index(id, "5", "text", "a", "test_sS", "25", "payload", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00}));              
>     index(id, "6", "text", "c", "test_sS", "26", "payload", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03}));  
>     index(id, "7", "text", "c", "test_sS", "27", "payload", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73}));                    
>     index(id, "8", "text", "c", "test_sS", "28", "payload", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d}));                    
>     index(id, "9", "text", "a", "test_sS", "29", "payload", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a}));                    
>     index(id, "10", "text", "b", "test_sS", "30", "payload", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c}));                   
>     index(id, "11", "text", "d", "test_sS", "31", "payload", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c})); 
>     index(id, "12", "text", "d", "test_sS", "32", "payload", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d}));             
>     index(id, "13", "text", "d", "test_sS", "33", "payload", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33}));             
98,100c102,104
<     verifySinglePass("q", "*:*", "fl", "id", "sort", "payload desc", "rows", "20"); 
<     verifySinglePass("q", "*:*", "fl", "id,score", "sort", "payload desc", "rows", "20"); 
<     verifySinglePass("q", "*:*", "fl", "score", "sort", "payload asc", "rows", "20", "distrib.singlePass", "true");
---
>     queryWithAsserts("q", "*:*", "fl", "id", "sort", "payload desc", "rows", "20"); 
>     queryWithAsserts("q", "*:*", "fl", "id,score", "sort", "payload desc", "rows", "20"); 
>     queryWithAsserts("q", "*:*", "fl", "score", "sort", "payload asc", "rows", "20", "distrib.singlePass", "true");
103c107
<     index(id, "19", "text", "d", "cat_a_sS", "1" ,"dynamic", "2", "payload", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));
---
>     index(id, "19", "text", "d", "cat_a_sS", "1", "dynamic", "2", "payload", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34}));
106,107c110,111
<     nonDistribRsp = query("q", "id:19", "fl", "id,*a_sS", "sort", "payload asc");
<     rsp = query("q", "id:19", "fl", "id,*a_sS", "sort", "payload asc", "distrib.singlePass", "true");
---
>     nonDistribRsp = queryWithAsserts("q", "id:19", "fl", "id,*a_sS", "sort", "payload asc");
>     rsp = queryWithAsserts("q", "id:19", "fl", "id,*a_sS", "sort", "payload asc", "distrib.singlePass", "true");
112,113c116,117
<     nonDistribRsp = query("q", "id:19", "fl", "id,dynamic,cat*", "sort", "payload asc");
<     rsp = query("q", "id:19", "fl", "id,dynamic,cat*", "sort", "payload asc", "distrib.singlePass", "true");
---
>     nonDistribRsp = queryWithAsserts("q", "id:19", "fl", "id,dynamic,cat*", "sort", "payload asc");
>     rsp = queryWithAsserts("q", "id:19", "fl", "id,dynamic,cat*", "sort", "payload asc", "distrib.singlePass", "true");
117,118c121,122
<     verifySinglePass("q", "id:19", "fl", "id,*a_sS", "sort", "payload asc", "distrib.singlePass", "true");
<     verifySinglePass("q", "id:19", "fl", "id,dynamic,cat*", "sort", "payload asc", "distrib.singlePass", "true");
---
>     queryWithAsserts("q", "id:19", "fl", "id,*a_sS", "sort", "payload asc", "distrib.singlePass", "true");
>     queryWithAsserts("q", "id:19", "fl", "id,dynamic,cat*", "sort", "payload asc", "distrib.singlePass", "true");
125a130
>     
129c134
<     query("q","*:*", "fl", "id", "fl","dynamic","sort","payload desc", ShardParams.DISTRIB_SINGLE_PASS, "true");
---
>     queryWithAsserts("q", "*:*", "fl", "id", "fl", "dynamic", "sort", "payload desc", ShardParams.DISTRIB_SINGLE_PASS, "true");
132,133c137,177
<   private void verifySinglePass(String... q) throws SolrServerException {
<     QueryResponse rsp;ModifiableSolrParams params = new ModifiableSolrParams();
---
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   private QueryResponse queryWithAsserts(Object... q) throws Exception {
>     TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();
>     
>     TrackingShardHandlerFactory.setTrackingQueue(jettys, trackingQueue);
> 
>     
>     Object[] qq = new Object[q.length + 2];
>     System.arraycopy(q, 0, qq, 0, q.length);
>     qq[qq.length - 2] = "debug";
>     qq[qq.length - 1] = "track";
>     handle.put("debug", SKIPVAL);
>     QueryResponse response = query(qq);
> 
>     Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> requests = trackingQueue.getAllRequests();
>     int numRequests = getNumRequests(requests);
> 
>     boolean distribSinglePass = false;
> 
>     Set<String> fls = new HashSet<>();
>     Set<String> sortFields = new HashSet<>();
135c179,269
<       params.add(q[i].toString(), q[i + 1].toString());
---
>       if (ShardParams.DISTRIB_SINGLE_PASS.equals(q[i].toString()) && Boolean.parseBoolean(q[i + 1].toString())) {
>         assertTrue("distrib.singlePass=true made more requests than number of shards",
>             numRequests == sliceCount);
>         distribSinglePass = true;
>       }
>       if (CommonParams.FL.equals(q[i].toString())) {
>         fls.addAll(StrUtils.splitSmart(q[i + 1].toString(), ','));
>       }
>       if (CommonParams.SORT.equals(q[i].toString())) {
>         String val = q[i + 1].toString().trim();
>         
>         sortFields.addAll(StrUtils.splitSmart(StrUtils.splitSmart(val, ' ').get(0), ','));
>       }
>     }
> 
>     Set<String> idScoreFields = new HashSet<>(2);
>     idScoreFields.add("id"); 
>     
>     if (fls.contains("score") || sortFields.contains("score")) idScoreFields.add("score");
> 
>     if (idScoreFields.containsAll(fls)) {
>       
>       distribSinglePass = true;
>     }
> 
>     if (distribSinglePass) {
>       Map<String, Object> debugMap = response.getDebugMap();
>       SimpleOrderedMap<Object> track = (SimpleOrderedMap<Object>) debugMap.get("track");
>       assertNotNull(track);
>       assertNotNull(track.get("EXECUTE_QUERY"));
>       assertNull("A single pass request should not have a GET_FIELDS phase", track.get("GET_FIELDS"));
> 
>       
>       
>       Set<String> reqAndIdScoreFields = new HashSet<>(fls);
>       reqAndIdScoreFields.addAll(idScoreFields);
>       assertParamsEquals(trackingQueue, DEFAULT_COLLECTION, SHARD1,
>           CommonParams.FL, ShardRequest.PURPOSE_GET_TOP_IDS, reqAndIdScoreFields.toArray(new String[reqAndIdScoreFields.size()]));
>       assertParamsEquals(trackingQueue, DEFAULT_COLLECTION, SHARD2,
>           CommonParams.FL, ShardRequest.PURPOSE_GET_TOP_IDS, reqAndIdScoreFields.toArray(new String[reqAndIdScoreFields.size()]));
>     } else {
>       
>       assertTrue("distrib.singlePass=false made more requests than 2 * number of shards." +
>               " Actual: " + numRequests + " but expected <= " + sliceCount * 2,
>           numRequests <= sliceCount * 2);
> 
>       
>       assertParamsEquals(trackingQueue, DEFAULT_COLLECTION, SHARD1,
>           CommonParams.FL, ShardRequest.PURPOSE_GET_TOP_IDS, idScoreFields.toArray(new String[idScoreFields.size()]));
>       assertParamsEquals(trackingQueue, DEFAULT_COLLECTION, SHARD2,
>           CommonParams.FL, ShardRequest.PURPOSE_GET_TOP_IDS, idScoreFields.toArray(new String[idScoreFields.size()]));
> 
>       
>       assertParamsEquals(trackingQueue, DEFAULT_COLLECTION, SHARD1,
>           CommonParams.FL, ShardRequest.PURPOSE_GET_FIELDS, fls.toArray(new String[fls.size()]));
>       assertParamsEquals(trackingQueue, DEFAULT_COLLECTION, SHARD2,
>           CommonParams.FL, ShardRequest.PURPOSE_GET_FIELDS, fls.toArray(new String[fls.size()]));
>     }
> 
>     return response;
>   }
> 
>   private int getNumRequests(Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> requests) {
>     int beforeNumRequests = 0;
>     for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : requests.entrySet()) {
>       beforeNumRequests += entry.getValue().size();
>     }
>     return beforeNumRequests;
>   }
> 
>   private void assertParamsEquals(TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue, String collection, String shard, String paramName, int purpose, String... values) {
>     TrackingShardHandlerFactory.ShardRequestAndParams getByIdRequest = trackingQueue.getShardRequestByPurpose(cloudClient.getZkStateReader(), collection, shard, purpose);
>     assertParamsEquals(getByIdRequest, paramName, values);
>   }
> 
>   private void assertParamsEquals(TrackingShardHandlerFactory.ShardRequestAndParams requestAndParams, String paramName, String... values) {
>     if (requestAndParams == null) return;
>     int expectedCount = values.length;
>     String[] params = requestAndParams.params.getParams(paramName);
>     if (expectedCount > 0 && (params == null || params.length == 0)) {
>       fail("Expected non-zero number of '" + paramName + "' parameters in request");
>     }
>     Set<String> requestedFields = new HashSet<>();
>     for (String p : params) {
>       requestedFields.addAll(StrUtils.splitSmart(p, ','));
>     }
>     assertEquals("Number of requested fields do not match with expectations", expectedCount, requestedFields.size());
>     for (String field : values) {
>       if (!requestedFields.contains(field)) {
>         fail("Field " + field + " not found in param: " + paramName + " request had " + paramName + "=" + requestedFields);
>       }
137,144d270
<     params.add("shards", getShardsString());
<     params.add("debug", "track");
<     rsp = queryServer(new ModifiableSolrParams(params));
<     Map<String, Object> debugMap = rsp.getDebugMap();
<     SimpleOrderedMap<Object> track = (SimpleOrderedMap<Object>) debugMap.get("track");
<     assertNotNull(track);
<     assertNotNull(track.get("EXECUTE_QUERY"));
<     assertNull("A single pass request should not have a GET_FIELDS phase", track.get("GET_FIELDS"));
