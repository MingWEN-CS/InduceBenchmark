package org.apache.lucene.index.sorter;


















import java.io.IOException;

import org.apache.lucene.index.AtomicReaderContext;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.search.LeafCollector;
import org.apache.lucene.search.CollectionTerminatedException;
import org.apache.lucene.search.Collector;
import org.apache.lucene.search.FilterLeafCollector;
import org.apache.lucene.search.FilterCollector;
import org.apache.lucene.search.Sort;
import org.apache.lucene.search.TopDocsCollector;
import org.apache.lucene.search.TotalHitCountCollector;


































public class EarlyTerminatingSortingCollector extends FilterCollector {

  
  protected final Sort sort;
  
  protected final int numDocsToCollect;

  











  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect) {
    super(in);
    if (numDocsToCollect <= 0) {
      throw new IllegalStateException("numDocsToCollect must always be > 0, got " + numDocsToCollect);
    }
    this.sort = sort;
    this.numDocsToCollect = numDocsToCollect;
  }

  @Override
  public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {
    if (SortingMergePolicy.isSorted(context.reader(), sort)) {
      
      return new FilterLeafCollector(super.getLeafCollector(context)) {
        private int numCollected;

        @Override
        public void collect(int doc) throws IOException {
          super.collect(doc);
          if (++numCollected >= numDocsToCollect) {
            throw new CollectionTerminatedException();
          }
        }

        @Override
        public boolean acceptsDocsOutOfOrder() {
          return false;
        }

      };
    } else {
      return super.getLeafCollector(context);
    }
  }

}
