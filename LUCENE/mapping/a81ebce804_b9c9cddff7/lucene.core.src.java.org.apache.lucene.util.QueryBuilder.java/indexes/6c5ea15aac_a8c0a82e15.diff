27a28
> import org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute;
31a33
> import org.apache.lucene.search.GraphQuery;
36a39
> import org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings;
138,142c141,153
<       BooleanQuery bq = (BooleanQuery) query;
<       BooleanQuery.Builder builder = new BooleanQuery.Builder();
<       builder.setMinimumNumberShouldMatch((int) (fraction * bq.clauses().size()));
<       for (BooleanClause clause : bq) {
<         builder.add(clause);
---
>       query = addMinShouldMatchToBoolean((BooleanQuery) query, fraction);
>     } else if (query instanceof GraphQuery && ((GraphQuery) query).hasBoolean()) {
>       
>       
>       List<Query> oldQueries = ((GraphQuery) query).getQueries();
>       Query[] queries = new Query[oldQueries.size()];
>       for (int i = 0; i < queries.length; i++) {
>         Query oldQuery = oldQueries.get(i);
>         if (oldQuery instanceof BooleanQuery) {
>           queries[i] = addMinShouldMatchToBoolean((BooleanQuery) oldQuery, fraction);
>         } else {
>           queries[i] = oldQuery;
>         }
144c155,156
<       query = builder.build();
---
> 
>       query = new GraphQuery(queries);
147a160
> 
148a162,173
> 
> 
>   private BooleanQuery addMinShouldMatchToBoolean(BooleanQuery query, float fraction) {
>     BooleanQuery.Builder builder = new BooleanQuery.Builder();
>     builder.setMinimumNumberShouldMatch((int) (fraction * query.clauses().size()));
>     for (BooleanClause clause : query) {
>       builder.add(clause);
>     }
> 
>     return builder.build();
>   }
> 
185a211
> 
203a230
> 
205a233,251
>     try (TokenStream source = analyzer.tokenStream(field, queryText)) {
>       return createFieldQuery(source, operator, field, quoted, phraseSlop);
>     } catch (IOException e) {
>       throw new RuntimeException("Error analyzing query text", e);
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   protected Query createFieldQuery(TokenStream source, BooleanClause.Occur operator, String field, boolean quoted, int phraseSlop) {
>     assert operator == BooleanClause.Occur.SHOULD || operator == BooleanClause.Occur.MUST;
> 
207,209c253
<     
<     try (TokenStream source = analyzer.tokenStream(field, queryText);
<          CachingTokenFilter stream = new CachingTokenFilter(source)) {
---
>     try (CachingTokenFilter stream = new CachingTokenFilter(source)) {
213c257,258
<       
---
>       PositionLengthAttribute posLenAtt = stream.addAttribute(PositionLengthAttribute.class);
> 
223a269
>       boolean isGraph = false;
233a280,284
> 
>         int positionLength = posLenAtt.getPositionLength();
>         if (!isGraph && positionLength > 1) {
>           isGraph = true;
>         }
243a295,297
>       } else if (isGraph) {
>         
>         return analyzeGraph(stream, operator, field, quoted, phraseSlop);
390a445
> 
391a447,468
> 
> 
>   protected Query analyzeGraph(TokenStream source, BooleanClause.Occur operator, String field, boolean quoted, int phraseSlop)
>       throws IOException {
>     source.reset();
>     List<TokenStream> tokenStreams = GraphTokenStreamFiniteStrings.getTokenStreams(source);
> 
>     if (tokenStreams.isEmpty()) {
>       return null;
>     }
> 
>     List<Query> queries = new ArrayList<>(tokenStreams.size());
>     for (TokenStream ts : tokenStreams) {
>       Query query = createFieldQuery(ts, operator, field, quoted, phraseSlop);
>       if (query != null) {
>         queries.add(query);
>       }
>     }
> 
>     return new GraphQuery(queries.toArray(new Query[0]));
>   }
> 
