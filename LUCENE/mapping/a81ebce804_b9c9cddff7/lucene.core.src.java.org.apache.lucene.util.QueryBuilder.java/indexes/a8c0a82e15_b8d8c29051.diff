21a22
> import java.util.Iterator;
58a60
>   protected boolean autoGenerateMultiTermSynonymsPhraseQuery = false;
142,156d143
<     } else if (query instanceof GraphQuery && ((GraphQuery) query).hasBoolean()) {
<       
<       
<       List<Query> oldQueries = ((GraphQuery) query).getQueries();
<       Query[] queries = new Query[oldQueries.size()];
<       for (int i = 0; i < queries.length; i++) {
<         Query oldQuery = oldQueries.get(i);
<         if (oldQuery instanceof BooleanQuery) {
<           queries[i] = addMinShouldMatchToBoolean((BooleanQuery) oldQuery, fraction);
<         } else {
<           queries[i] = oldQuery;
<         }
<       }
< 
<       query = new GraphQuery(queries);
210a198,213
>   
> 
> 
> 
>   public boolean getAutoGenerateMultiTermSynonymsPhraseQuery() {
>     return autoGenerateMultiTermSynonymsPhraseQuery;
>   }
> 
>   
> 
> 
> 
> 
>   public void setAutoGenerateMultiTermSynonymsPhraseQuery(boolean enable) {
>     this.autoGenerateMultiTermSynonymsPhraseQuery = enable;
>   }
297c300,304
<         return analyzeGraph(stream, operator, field, quoted, phraseSlop);
---
>         if (quoted) {
>           return analyzeGraphPhrase(stream, operator, field, phraseSlop);
>         } else {
>           return analyzeGraphBoolean(field, stream, operator);
>         }
449,452d455
<   protected Query analyzeGraph(TokenStream source, BooleanClause.Occur operator, String field, boolean quoted, int phraseSlop)
<       throws IOException {
<     source.reset();
<     List<TokenStream> tokenStreams = GraphTokenStreamFiniteStrings.getTokenStreams(source);
454,455c457,502
<     if (tokenStreams.isEmpty()) {
<       return null;
---
>   protected Query analyzeGraphBoolean(String field, TokenStream source, BooleanClause.Occur operator) throws IOException {
>     source.reset();
>     GraphTokenStreamFiniteStrings graph = new GraphTokenStreamFiniteStrings(source);
>     BooleanQuery.Builder builder = new BooleanQuery.Builder();
>     int[] articulationPoints = graph.articulationPoints();
>     int lastState = 0;
>     for (int i = 0; i <= articulationPoints.length; i++) {
>       int start = lastState;
>       int end = -1;
>       if (i < articulationPoints.length) {
>         end = articulationPoints[i];
>       }
>       lastState = end;
>       final Query queryPos;
>       if (graph.hasSidePath(start)) {
>         List<Query> queries = new ArrayList<> ();
>         Iterator<TokenStream> it = graph.getFiniteStrings(start, end);
>         while (it.hasNext()) {
>           TokenStream ts = it.next();
>           
>           Query q = createFieldQuery(ts, BooleanClause.Occur.MUST, field, getAutoGenerateMultiTermSynonymsPhraseQuery(), 0);
>           if (q != null) {
>             queries.add(q);
>           }
>         }
>         if (queries.size() > 0) {
>           queryPos = newGraphSynonymQuery(queries.toArray(new Query[queries.size()]));
>         } else {
>           queryPos = null;
>         }
>       } else {
>         Term[] terms = graph.getTerms(field, start);
>         assert terms.length > 0;
>         if (terms.length == 1) {
>           queryPos = newTermQuery(terms[0]);
>         } else {
>           queryPos = newSynonymQuery(terms);
>         }
>       }
>       if (queryPos != null) {
>         builder.add(queryPos, operator);
>       }
>     }
>     BooleanQuery bq =  builder.build();
>     if (bq.clauses().size() == 1) {
>       return bq.clauses().get(0).getQuery();
456a504,507
>     return bq;
>   }
> 
>   
458,460c509,517
<     List<Query> queries = new ArrayList<>(tokenStreams.size());
<     for (TokenStream ts : tokenStreams) {
<       Query query = createFieldQuery(ts, operator, field, quoted, phraseSlop);
---
> 
>   protected Query analyzeGraphPhrase(TokenStream source, BooleanClause.Occur operator, String field, int phraseSlop)
>       throws IOException {
>     source.reset();
>     GraphTokenStreamFiniteStrings visitor = new GraphTokenStreamFiniteStrings(source);
>     Iterator<TokenStream> it = visitor.getFiniteStrings();
>     List<Query> queries = new ArrayList<>();
>     while (it.hasNext()) {
>       Query query = createFieldQuery(it.next(), operator, field, true, phraseSlop);
465d521
< 
487a544,553
> 
>   
> 
> 
> 
> 
> 
>   protected Query newGraphSynonymQuery(Query queries[]) {
>     return new GraphQuery(queries);
>   }
