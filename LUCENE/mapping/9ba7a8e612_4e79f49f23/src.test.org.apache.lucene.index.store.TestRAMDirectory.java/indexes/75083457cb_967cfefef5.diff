67d66
<     writer.optimize();
79a79,81
>     assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());
>     
>     
101a104,106
>     assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());
>     
>     
123a129,131
>     assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());
>     
>     
139a148,189
>   
>   private final int numThreads = 50;
>   private final int docsPerThread = 40;
>   
>   public void testRAMDirectorySize() throws IOException, InterruptedException {
>       
>     final RAMDirectory ramDir = new RAMDirectory(indexDir.getCanonicalPath());
>     final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false);
>     writer.optimize();
>     
>     assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());
>     
>     Thread[] threads = new Thread[numThreads];
>     for (int i=0; i<numThreads; i++) {
>       final int num = i;
>       threads[i] = new Thread(){
>         public void run() {
>           for (int j=1; j<docsPerThread; j++) {
>             Document doc = new Document();
>             doc.add(new Field("sizeContent", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.UN_TOKENIZED));
>             try {
>               writer.addDocument(doc);
>             } catch (IOException e) {
>               throw new RuntimeException(e);
>             }
>             synchronized (ramDir) {
>               assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());
>             }
>           }
>         }
>       };
>     }
>     for (int i=0; i<numThreads; i++)
>       threads[i].start();
>     for (int i=0; i<numThreads; i++)
>       threads[i].join();
> 
>     writer.optimize();
>     assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());
>     
>     writer.close();
>   }
