381c381
<     if (method == null && ft.getNumericType() != null && !sf.multiValued()) {
---
>     if (ft.getNumericType() != null && !sf.multiValued()) {
388,392d387
<     if (ft.getNumericType() != null && sf.hasDocValues()) {
<       
<       method = FacetMethod.FCS;
<     }
< 
433,440c428
<           if (sf.hasDocValues()) {
<             counts = DocValuesFacets.getCounts(searcher, base, field, offset,limit, mincount, missing, sort, prefix);
<           } else if (multiToken || TrieField.getMainValuePrefix(ft) != null) {
<             UnInvertedField uif = UnInvertedField.getUnInvertedField(field, searcher);
<             counts = uif.getCounts(searcher, base, offset, limit, mincount,missing,sort,prefix);
<           } else {
<             counts = getFieldCacheCounts(searcher, base, field, offset,limit, mincount, missing, sort, prefix);
<           }
---
>           counts = DocValuesFacets.getCounts(searcher, base, field, offset,limit, mincount, missing, sort, prefix);
625,770d612
< 
<   
< 
< 
< 
<   public static NamedList<Integer> getFieldCacheCounts(SolrIndexSearcher searcher, DocSet docs, String fieldName, int offset, int limit, int mincount, boolean missing, String sort, String prefix) throws IOException {
<     
<     
<     
<     
<     
<     
<     
<     
< 
<     
<     
<     
< 
<     FieldType ft = searcher.getSchema().getFieldType(fieldName);
<     NamedList<Integer> res = new NamedList<>();
< 
<     SortedDocValues si = DocValues.getSorted(searcher.getAtomicReader(), fieldName);
< 
<     final BytesRef br = new BytesRef();
< 
<     final BytesRef prefixRef;
<     if (prefix == null) {
<       prefixRef = null;
<     } else if (prefix.length()==0) {
<       prefix = null;
<       prefixRef = null;
<     } else {
<       prefixRef = new BytesRef(prefix);
<     }
< 
<     int startTermIndex, endTermIndex;
<     if (prefix!=null) {
<       startTermIndex = si.lookupTerm(prefixRef);
<       if (startTermIndex<0) startTermIndex=-startTermIndex-1;
<       prefixRef.append(UnicodeUtil.BIG_TERM);
<       endTermIndex = si.lookupTerm(prefixRef);
<       assert endTermIndex < 0;
<       endTermIndex = -endTermIndex-1;
<     } else {
<       startTermIndex=-1;
<       endTermIndex=si.getValueCount();
<     }
< 
<     final int nTerms=endTermIndex-startTermIndex;
<     int missingCount = -1; 
<     final CharsRef charsRef = new CharsRef(10);
<     if (nTerms>0 && docs.size() >= mincount) {
< 
<       
<       
<       final int[] counts = new int[nTerms];
< 
<       DocIterator iter = docs.iterator();
< 
<       while (iter.hasNext()) {
<         int term = si.getOrd(iter.nextDoc());
<         int arrIdx = term-startTermIndex;
<         if (arrIdx>=0 && arrIdx<nTerms) counts[arrIdx]++;
<       }
< 
<       if (startTermIndex == -1) {
<         missingCount = counts[0];
<       }
< 
<       
<       
< 
<       int off=offset;
<       int lim=limit>=0 ? limit : Integer.MAX_VALUE;
< 
<       if (sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {
<         int maxsize = limit>0 ? offset+limit : Integer.MAX_VALUE-1;
<         maxsize = Math.min(maxsize, nTerms);
<         LongPriorityQueue queue = new LongPriorityQueue(Math.min(maxsize,1000), maxsize, Long.MIN_VALUE);
< 
<         int min=mincount-1;  
<         for (int i=(startTermIndex==-1)?1:0; i<nTerms; i++) {
<           int c = counts[i];
<           if (c>min) {
<             
<             
<             
< 
<             
<             long pair = (((long)c)<<32) + (Integer.MAX_VALUE - i);
<             boolean displaced = queue.insert(pair);
<             if (displaced) min=(int)(queue.top() >>> 32);
<           }
<         }
< 
<         
<         int collectCount = Math.max(0, queue.size() - off);
<         assert collectCount <= lim;
< 
<         
<         int sortedIdxStart = queue.size() - (collectCount - 1);
<         int sortedIdxEnd = queue.size() + 1;
<         final long[] sorted = queue.sort(collectCount);
< 
<         for (int i=sortedIdxStart; i<sortedIdxEnd; i++) {
<           long pair = sorted[i];
<           int c = (int)(pair >>> 32);
<           int tnum = Integer.MAX_VALUE - (int)pair;
<           si.lookupOrd(startTermIndex+tnum, br);
<           ft.indexedToReadable(br, charsRef);
<           res.add(charsRef.toString(), c);
<         }
<       
<       } else {
<         
<         int i=(startTermIndex==-1)?1:0;
<         if (mincount<=0) {
<           
<           
<           i+=off;
<           off=0;
<         }
< 
<         for (; i<nTerms; i++) {          
<           int c = counts[i];
<           if (c<mincount || --off>=0) continue;
<           if (--lim<0) break;
<           si.lookupOrd(startTermIndex+i, br);
<           ft.indexedToReadable(br, charsRef);
<           res.add(charsRef.toString(), c);
<         }
<       }
<     }
< 
<     if (missing) {
<       if (missingCount < 0) {
<         missingCount = getFieldMissingCount(searcher,docs,fieldName);
<       }
<       res.add(null, missingCount);
<     }
<     
<     return res;
<   }
< 
< 
