19c19,20
< import java.io.File;
---
> import java.net.URI;
> import java.text.ParseException;
22a24
> import java.util.Optional;
25a28,29
> import com.google.common.base.Preconditions;
> 
27,41c31,45
<   File dir;
<   Date timestamp;
<   private  final Pattern dirNamePattern = Pattern.compile("^snapshot[.](.*)$");
< 
<   OldBackupDirectory(File dir) {
<     if(dir.isDirectory()) {
<       Matcher m = dirNamePattern.matcher(dir.getName());
<       if(m.find()) {
<         try {
<           this.dir = dir;
<           this.timestamp = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT).parse(m.group(1));
<         } catch(Exception e) {
<           this.dir = null;
<           this.timestamp = null;
<         }
---
>   private static final Pattern dirNamePattern = Pattern.compile("^snapshot[.](.*)$");
> 
>   private URI basePath;
>   private String dirName;
>   private Optional<Date> timestamp;
> 
>   public OldBackupDirectory(URI basePath, String dirName) {
>     this.dirName = Preconditions.checkNotNull(dirName);
>     this.basePath = Preconditions.checkNotNull(basePath);
>     Matcher m = dirNamePattern.matcher(dirName);
>     if (m.find()) {
>       try {
>         this.timestamp = Optional.of(new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT).parse(m.group(1)));
>       } catch (ParseException e) {
>         this.timestamp = Optional.empty();
44a49,61
> 
>   public URI getPath() {
>     return this.basePath.resolve(dirName);
>   }
> 
>   public String getDirName() {
>     return dirName;
>   }
> 
>   public Optional<Date> getTimestamp() {
>     return timestamp;
>   }
> 
47c64,68
<     return that.timestamp.compareTo(this.timestamp);
---
>     if(this.timestamp.isPresent() && that.timestamp.isPresent()) {
>       return that.timestamp.get().compareTo(this.timestamp.get());
>     }
>     
>     return that.getPath().compareTo(this.getPath());
