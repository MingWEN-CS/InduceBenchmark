101d100
<   private final Set<String> watchedCollections = new HashSet<String>();
104,109d102
<   
< 
< 
<   private Map<String , DocCollection> watchedCollectionStates = new ConcurrentHashMap<String, DocCollection>();
<   private Set<String> allCollections = Collections.emptySet();
< 
113a107
>   
171,172c165
<       } else  {
<         throw new ZooKeeperException(ErrorCode.INVALID_STATE, "No config data found at path: " + path);
---
> 
261,275c254,269
<   public Boolean checkValid(String coll, int version){
<     DocCollection collection = clusterState.getCollectionOrNull(coll);
<     if(collection ==null) return null;
<     if(collection.getZNodeVersion() < version){
<       log.info("server older than client {}<{}",collection.getZNodeVersion(),version);
<       DocCollection nu = getCollectionLive(this, coll);
<       if(nu.getZNodeVersion()> collection.getZNodeVersion()){
<         updateWatchedCollection(nu);
<         collection = nu;
<       }
<     }
<     if(collection.getZNodeVersion() == version) return Boolean.TRUE;
<     log.debug("wrong version from client {}!={} ",version, collection.getZNodeVersion());
<     return Boolean.FALSE;
<   }
---
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
308c302
<               ClusterState clusterState = ClusterState.load(stat.getVersion(), data, ln,ZkStateReader.this, null);
---
>               ClusterState clusterState = ClusterState.load(stat.getVersion(), data, ln);
312d305
<               updateCollectionNames();
387d379
<       updateCollectionNames();
433,466d424
<     
<     synchronized (this) {
<       for (String watchedCollection : watchedCollections) {
<         addZkWatch(watchedCollection);
<       }
<     }
<   }
< 
<   public void updateCollectionNames() throws KeeperException, InterruptedException {
<     Set<String> colls = getExternColls();
<     colls.addAll(clusterState.getCollectionStates().keySet());
<     allCollections = Collections.unmodifiableSet(colls);
<   }
< 
<   private Set<String> getExternColls() throws KeeperException, InterruptedException {
<     List<String> children = null;
<     try {
<       children = zkClient.getChildren(COLLECTIONS_ZKNODE, null, true);
<     } catch (KeeperException.NoNodeException e) {
<       log.warn("Error fetching collection names");
< 
<       return new HashSet<>();
<     }
<     if (children == null || children.isEmpty()) return new HashSet<>();
<     HashSet<String> result = new HashSet<>(children.size());
< 
<     for (String c : children) {
<       try {
<         if (zkClient.exists(getCollectionPath(c), true)) result.add(c);
<       } catch (Exception e) {
<         log.warn("Error reading collections nodes", e);
<       }
<     }
<     return result;
485c443
<           log.debug("Updating cloud state from ZooKeeper... ");
---
>           log.info("Updating cloud state from ZooKeeper... ");
494d451
<         updateCollectionNames();
553,558d509
<     synchronized (this) {
<       for (String watchedCollection : watchedCollections) {
<         watchedCollectionStates.put(watchedCollection, getCollectionLive(this, watchedCollection));
<       }
<     }
<   }
559a511,512
>   }
>    
682,684d634
<   public Set<String> getAllCollections(){
<     return allCollections;
<   }
731,893d680
<   public void updateWatchedCollection(DocCollection c) {
<     if(watchedCollections.contains(c.getName())){
<       watchedCollectionStates.put(c.getName(), c);
<       log.info("Updated DocCollection "+c.getName()+" to: ");
<     }
<   }
< 
<   
< 
< 
< 
< 
< 
< 
< 
< 
<   public DocCollection getCollection(String coll, boolean cachedCopyOnly) {
<     if(clusterState.getCollectionStates().get(coll) != null) {
<       
<       return clusterState.getCollectionStates().get(coll);
<     }
<     if (watchedCollections.contains(coll) || cachedCopyOnly) {
<       DocCollection c = watchedCollectionStates.get(coll);
<       if (c != null || cachedCopyOnly) return c;
<     }
<     return getCollectionLive(this, coll);
<   }
< 
<   private Map ephemeralCollectionData;
< 
<   
< 
< 
< 
< 
< 
<   public void setEphemeralCollectionData(Map map){
<     ephemeralCollectionData = map;
<   }
< 
<   public static DocCollection getCollectionLive(ZkStateReader zkStateReader, String coll) {
<     String collectionPath = getCollectionPath(coll);
<     if(zkStateReader.ephemeralCollectionData !=null ){
<       ClusterState cs = (ClusterState) zkStateReader.ephemeralCollectionData.get(collectionPath);
<       if(cs !=null) {
<         return  cs.getCollectionStates().get(coll);
<       }
<     }
<     try {
<       if (!zkStateReader.getZkClient().exists(collectionPath, true)) return null;
<       Stat stat = new Stat();
<       byte[] data = zkStateReader.getZkClient().getData(collectionPath, null, stat, true);
<       ClusterState state = ClusterState.load(stat.getVersion(), data, Collections.<String>emptySet(), zkStateReader, collectionPath);
<       return state.getCollectionStates().get(coll);
<     } catch (KeeperException.NoNodeException e) {
<       log.warn("No node available : " + collectionPath, e);
<       return null;
<     } catch (KeeperException e) {
<       throw new SolrException(ErrorCode.BAD_REQUEST, "Could not load collection from ZK:" + coll, e);
<     } catch (InterruptedException e) {
<       Thread.currentThread().interrupt();
<       throw new SolrException(ErrorCode.BAD_REQUEST, "Could not load collection from ZK:" + coll, e);
<     }
<   }
< 
<   public DocCollection getCollection(String coll) {
<     return getCollection(coll, false);
<   }
< 
<   public static String getCollectionPath(String coll) {
<     return COLLECTIONS_ZKNODE+"/"+coll + "/state.json";
<   }
< 
<   public void addCollectionWatch(String coll) throws KeeperException, InterruptedException {
<     synchronized (this){
<       if(watchedCollections.contains(coll)) return;
<       else {
<         watchedCollections.add(coll);
<       }
<       addZkWatch(coll);
<     }
< 
<   }
< 
<   private void addZkWatch(final String coll) throws KeeperException, InterruptedException {
<     log.info("addZkWatch {}", coll);
<     final String fullpath = getCollectionPath(coll);
<     synchronized (getUpdateLock()){
< 
<       cmdExecutor.ensureExists(fullpath, zkClient);
<       log.info("Updating collection state at {} from ZooKeeper... ",fullpath);
< 
<       Watcher watcher = new Watcher() {
< 
<         @Override
<         public void process(WatchedEvent event) {
<           
<           
<           if (EventType.None.equals(event.getType())) {
<             return;
<           }
<           log.info("A cluster state change: {}, has occurred - updating... ", (event), ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size());
<           try {
< 
<             
<             
<             synchronized (ZkStateReader.this.getUpdateLock()) {
<               if(!watchedCollections.contains(coll)) {
<                 log.info("Unwatched collection {}",coll);
<                 return;
<               }
<               
<               final Watcher thisWatch = this;
<               Stat stat = new Stat();
<               byte[] data = zkClient.getData(fullpath, thisWatch, stat, true);
< 
<               if(data == null || data.length ==0){
<                 log.warn("No value set for collection state : {}", coll);
<                 return;
< 
<               }
<               ClusterState clusterState = ClusterState.load(stat.getVersion(), data, Collections.<String>emptySet(),ZkStateReader.this,fullpath);
<               
< 
<               DocCollection newState = clusterState.getCollectionStates().get(coll);
<               watchedCollectionStates.put(coll, newState);
<               log.info("Updating data for {} to ver {} ", coll , newState.getZNodeVersion());
< 
<             }
<           } catch (KeeperException e) {
<             if (e.code() == KeeperException.Code.SESSIONEXPIRED
<                 || e.code() == KeeperException.Code.CONNECTIONLOSS) {
<               log.warn("ZooKeeper watch triggered, but Solr cannot talk to ZK");
<               return;
<             }
<             log.error("Unwatched collection :"+coll , e);
<             throw new ZooKeeperException(ErrorCode.SERVER_ERROR,
<                 "", e);
< 
<           } catch (InterruptedException e) {
<             Thread.currentThread().interrupt();
<             log.error("Unwatched collection :"+coll , e);
<             return;
<           }
<         }
< 
<       };
<       zkClient.exists(fullpath, watcher, true);
<     }
< 
<     watchedCollectionStates.put(coll, getCollectionLive(this, coll));
<   }
< 
<   
<   public void removeZKWatch(final String coll){
<     synchronized (this){
<       watchedCollections.remove(coll);
<     }
<   }
< 
< 
< 
< 
