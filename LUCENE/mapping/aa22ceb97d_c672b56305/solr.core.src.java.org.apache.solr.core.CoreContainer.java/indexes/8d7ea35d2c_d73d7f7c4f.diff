23d22
< import java.io.IOException;
24a24
> import java.io.IOException;
28d27
< import java.util.Arrays;
34d32
< import java.util.Iterator;
41d38
< import java.util.TreeSet;
52a50,56
> import javax.xml.transform.Transformer;
> import javax.xml.transform.TransformerException;
> import javax.xml.transform.TransformerFactory;
> import javax.xml.transform.dom.DOMResult;
> import javax.xml.transform.dom.DOMSource;
> import javax.xml.xpath.XPathExpressionException;
> 
54,55d57
< import org.apache.commons.lang.StringUtils;
< import org.apache.solr.cloud.CloudDescriptor;
65d66
< 
79a81,82
> import org.apache.solr.util.SystemIdResolver;
> import org.apache.solr.util.plugin.PluginInfoInitialized;
83a87,89
> import org.w3c.dom.Document;
> import org.w3c.dom.Node;
> import org.xml.sax.InputSource;
140a147,148
>   protected volatile ConfigSolr cfg;
>   private Config origCfg;
175a184,203
>   
>   public SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,
>       SolrResourceLoader resourceLoader) {
>     SolrConfig cfg = null;
>     try {
>       byte[] config = zkController.getConfigFileData(zkConfigName,
>           solrConfigFileName);
>       InputSource is = new InputSource(new ByteArrayInputStream(config));
>       is.setSystemId(SystemIdResolver
>           .createSystemIdFromResourceName(solrConfigFileName));
>       cfg = solrConfigFileName == null ? new SolrConfig(resourceLoader,
>           SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(resourceLoader,
>           solrConfigFileName, is);
>     } catch (Exception e) {
>       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
>           "getSolrConfigFromZK failed for " + zkConfigName + " "
>               + solrConfigFileName, e);
>     }
>     return cfg;
>   }
328a357
>         
331c360
<           cores.load(solrHome, new ByteArrayInputStream(ConfigSolrXml.DEF_SOLR_XML.getBytes("UTF-8")), null);
---
>           cores.load(solrHome, new ByteArrayInputStream(ConfigSolrXmlOld.DEF_SOLR_XML.getBytes("UTF-8")), null);
384c413
<     ConfigSolr cfg;
---
>     
388,389c417,425
<       cfg = new ConfigSolrXml(loader, null, is, null, false, this);
<       this.cfg = new ConfigSolrXml(loader, (ConfigSolrXml) cfg, this);
---
>       Config config = new Config(loader, null, new InputSource(is), null, false);
>       this.origCfg = new Config(loader, null, copyDoc(config.getDocument()));
>       boolean oldStyle = (config.getNode("solr/cores", false) != null);
>       
>       if (oldStyle) {
>         this.cfg = new ConfigSolrXmlOld(config, this);
>       } else {
>         this.cfg = new ConfigSolrXml(config, this);
>       }
406c442
<     shardHandlerFactory = cfg.initShardHandler();
---
>     shardHandlerFactory = initShardHandler(cfg);
456c492
<     if (! cfg.is50OrLater()) { 
---
>     if (cfg instanceof ConfigSolrXmlOld) { 
653a690,714
>   
>   private ShardHandlerFactory initShardHandler(ConfigSolr configSolr) {
>     PluginInfo info = null;
>     Node shfn = configSolr.getConfig().getNode("solr/cores/shardHandlerFactory", false);
> 
>     if (shfn != null) {
>       info = new PluginInfo(shfn, "shardHandlerFactory", false, true);
>     } else {
>       Map m = new HashMap();
>       m.put("class", HttpShardHandlerFactory.class.getName());
>       info = new PluginInfo("shardHandlerFactory", m, null, Collections.<PluginInfo>emptyList());
>     }
> 
>     ShardHandlerFactory fac;
>     try {
>        fac = configSolr.getConfig().getResourceLoader().findClass(info.className, ShardHandlerFactory.class).newInstance();
>     } catch (Exception e) {
>       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
>                               "Error instantiating shardHandlerFactory class " + info.className);
>     }
>     if (fac instanceof PluginInfoInitialized) {
>       ((PluginInfoInitialized) fac).init(info);
>     }
>     return fac;
>   }
658c719
<       cfg.initShardHandler();
---
>       initShardHandler(cfg);
667,668d727
< 
<   volatile ConfigSolr cfg;
965,1012d1023
< 
< 
< 
<   public void replaceSchema(SolrCore initiatingCore, IndexSchema oldSchema, IndexSchema newSchema) {
<     if (null != indexSchemaCache) { 
<       
<       for (Iterator<Map.Entry<String,IndexSchema>> iter = indexSchemaCache.entrySet().iterator() ; iter.hasNext() ; ) {
<         Map.Entry<String,IndexSchema> entry = iter.next();
<         if (oldSchema == entry.getValue()) {
<           iter.remove();
<         }
<       }
< 
<       
<       final String newSchemaResourceName
<           = IndexSchemaFactory.getResourceNameToBeUsed(newSchema.getResourceName(), initiatingCore.getSolrConfig());
<       File schemaFile = new File(newSchemaResourceName);
<       if ( ! schemaFile.isAbsolute()) {
<         schemaFile = new File(initiatingCore.getResourceLoader().getConfigDir(), schemaFile.getPath());
<       }
<       if (schemaFile.exists()) {
<         String key = schemaFile.getAbsolutePath()
<             + ":"
<             + new SimpleDateFormat("yyyyMMddHHmmss", Locale.ROOT).format(new Date(
<             schemaFile.lastModified()));
<         indexSchemaCache.put(key, newSchema);
<       }
< 
<       
<       for (String coreName : coreMaps.getAllCoreNames()) {
<         SolrCore activeCore = coreMaps.getCoreFromAnyList(coreName);
<         if (null != activeCore) {
<           if (initiatingCore != activeCore) {
<             if (oldSchema == activeCore.getLatestSchema()) {
<               activeCore.setLatestSchema(newSchema);
<             }
<           }
<         }
<       }
<     }
<   }
< 
<  
< 
< 
< 
< 
< 
1316a1328
>   @Deprecated
1381c1393
<     persistFile(null);
---
>     persistFile(configFile);
1398c1410,1412
<     if (cfg != null && cfg.is50OrLater()) return;
---
>     assert file != null;
>     
>     if (cfg != null && !(cfg instanceof ConfigSolrXmlOld)) return;
1437c1451,1455
<     coreMaps.persistCores(cfg, containerProperties, rootSolrAttribs, coresAttribs, file, configFile, loader);
---
>     try {
>       coreMaps.persistCores(origCfg, containerProperties, rootSolrAttribs, coresAttribs, file, configFile, loader);
>     } catch (XPathExpressionException e) {
>       throw new SolrException(ErrorCode.SERVER_ERROR, null, e);
>     }
1455c1473
< 
---
>       
1487,1491d1504
<   private SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,
<       SolrResourceLoader resourceLoader)
<   {
<     return cfg.getSolrConfigFromZk(zkController, zkConfigName, solrConfigFileName, resourceLoader);
<   }
1500a1514
>   
1508,1540d1521
< 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< class CoreMaps {
< 
<   private static Object locker = new Object(); 
<   private final Map<String, SolrCore> cores = new LinkedHashMap<String, SolrCore>(); 
< 
<   
<   private Map<String, SolrCore> transientCores = new LinkedHashMap<String, SolrCore>(); 
< 
<   private final Map<String, CoreDescriptor> dynamicDescriptors = new LinkedHashMap<String, CoreDescriptor>();
< 
<   private final Map<String, SolrCore> createdCores = new LinkedHashMap<String, SolrCore>();
< 
<   private Map<SolrCore, String> coreToOrigName = new ConcurrentHashMap<SolrCore, String>();
< 
<   private final CoreContainer container;
< 
<   
<   
<   private static final Set<String> pendingCoreOps = new HashSet<String>();
< 
<   
1542,1670c1523,1529
<   private static final List<SolrCore> pendingCloses = new ArrayList<SolrCore>();
< 
<   CoreMaps(CoreContainer container) {
<     this.container = container;
<   }
< 
<   
<   
<   protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {
<     final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);
<     if (transientCacheSize != Integer.MAX_VALUE) {
<       CoreContainer.log.info("Allocating transient cache for {} transient cores", transientCacheSize);
<       transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {
<         @Override
<         protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {
<           if (size() > transientCacheSize) {
<             synchronized (locker) {
<               pendingCloses.add(eldest.getValue()); 
<               locker.notifyAll(); 
<             }
<             return true;
<           }
<           return false;
<         }
<       };
<     }
<   }
< 
<   protected void putDynamicDescriptor(String rawName, CoreDescriptor p) {
<     synchronized (locker) {
<       dynamicDescriptors.put(rawName, p);
<     }
<   }
< 
<   
<   
<   protected void clearMaps(ConfigSolr cfg) {
<     List<String> coreNames;
<     List<String> transientNames;
<     List<SolrCore> pendingToClose;
< 
<     
<     
<     
< 
<     while (true) {
<       synchronized (locker) {
<         coreNames = new ArrayList(cores.keySet());
<         transientNames = new ArrayList(transientCores.keySet());
<         pendingToClose = new ArrayList(pendingCloses);
<       }
< 
<       if (coreNames.size() == 0 && transientNames.size() == 0 && pendingToClose.size() == 0) break;
< 
<       for (String coreName : coreNames) {
<         SolrCore core = cores.get(coreName);
<         if (core == null) {
<           CoreContainer.log.info("Core " + coreName + " moved from core container list before closing.");
<         } else {
<           try {
<             addPersistOneCore(cfg, container.loader, core.getCoreDescriptor(), getCoreToOrigName(core));
< 
<             core.close();
<           } catch (Throwable t) {
<             SolrException.log(CoreContainer.log, "Error shutting down core", t);
<           } finally {
<             synchronized (locker) {
<               cores.remove(coreName);
<             }
<           }
<         }
<       }
< 
<       for (String coreName : transientNames) {
<         SolrCore core = transientCores.get(coreName);
<         if (core == null) {
<           CoreContainer.log.info("Core " + coreName + " moved from transient core container list before closing.");
<         } else {
<           try {
<             core.close();
<           } catch (Throwable t) {
<             SolrException.log(CoreContainer.log, "Error shutting down core", t);
<           } finally {
<             synchronized (locker) {
<               transientCores.remove(coreName);
<             }
<           }
<         }
<       }
< 
<       
<       for (SolrCore core : pendingToClose) {
<         try {
<           core.close();
<         } catch (Throwable t) {
<           SolrException.log(CoreContainer.log, "Error shutting down core", t);
<         } finally {
<           synchronized (locker) {
<             pendingCloses.remove(core);
<           }
<         }
<       }
<     }
<   }
< 
<   protected void addCoresToList(ArrayList<SolrCoreState> coreStates) {
<     List<SolrCore> addCores;
<     synchronized (locker) {
<       addCores = new ArrayList<SolrCore>(cores.values());
<     }
<     for (SolrCore core : addCores) {
<       coreStates.add(core.getUpdateHandler().getSolrCoreState());
<     }
<   }
< 
<   
<   protected SolrCore putTransientCore(ConfigSolr cfg, String name, SolrCore core, SolrResourceLoader loader) {
<     SolrCore retCore;
<     CoreContainer.log.info("Opening transient core {}", name);
<     synchronized (locker) {
<       retCore = transientCores.put(name, core);
<     }
<     return retCore;
<   }
< 
<   protected SolrCore putCore(String name, SolrCore core) {
<     synchronized (locker) {
<       return cores.put(name, core);
<     }
---
>   private Document copyDoc(Document document) throws TransformerException {
>     TransformerFactory tfactory = TransformerFactory.newInstance();
>     Transformer tx   = tfactory.newTransformer();
>     DOMSource source = new DOMSource(document);
>     DOMResult result = new DOMResult();
>     tx.transform(source,result);
>     return (Document)result.getNode();
1673,2074c1532
<   List<SolrCore> getCores() {
<     List<SolrCore> lst = new ArrayList<SolrCore>();
< 
<     synchronized (locker) {
<       lst.addAll(cores.values());
<       return lst;
<     }
<   }
< 
<   Set<String> getCoreNames() {
<     Set<String> set = new TreeSet<String>();
< 
<     synchronized (locker) {
<       set.addAll(cores.keySet());
<       set.addAll(transientCores.keySet());
<     }
<     return set;
<   }
< 
<   List<String> getCoreNames(SolrCore core) {
<     List<String> lst = new ArrayList<String>();
< 
<     synchronized (locker) {
<       for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {
<         if (core == entry.getValue()) {
<           lst.add(entry.getKey());
<         }
<       }
<       for (Map.Entry<String, SolrCore> entry : transientCores.entrySet()) {
<         if (core == entry.getValue()) {
<           lst.add(entry.getKey());
<         }
<       }
<     }
<     return lst;
<   }
< 
<   
< 
< 
< 
< 
<   public Collection<String> getAllCoreNames() {
<     Set<String> set = new TreeSet<String>();
<     synchronized (locker) {
<       set.addAll(cores.keySet());
<       set.addAll(transientCores.keySet());
<       set.addAll(dynamicDescriptors.keySet());
<       set.addAll(createdCores.keySet());
<     }
<     return set;
<   }
< 
<   SolrCore getCore(String name) {
< 
<     synchronized (locker) {
<       return cores.get(name);
<     }
<   }
< 
<   protected void swap(String n0, String n1) {
< 
<     synchronized (locker) {
<       SolrCore c0 = cores.get(n0);
<       SolrCore c1 = cores.get(n1);
<       if (c0 == null)
<         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "No such core: " + n0);
<       if (c1 == null)
<         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "No such core: " + n1);
<       cores.put(n0, c1);
<       cores.put(n1, c0);
< 
<       c0.setName(n1);
<       c0.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, n1);
<       c1.setName(n0);
<       c1.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, n0);
<     }
< 
<   }
< 
<   protected SolrCore remove(String name, boolean removeOrig) {
< 
<     synchronized (locker) {
<       SolrCore tmp = cores.remove(name);
<       SolrCore ret = null;
<       if (removeOrig && tmp != null) {
<         coreToOrigName.remove(tmp);
<       }
<       ret = (ret == null) ? tmp : ret;
<       
<       
<       tmp = transientCores.remove(name);
<       ret = (ret == null) ? tmp : ret;
<       tmp = createdCores.remove(name);
<       ret = (ret == null) ? tmp : ret;
<       dynamicDescriptors.remove(name);
<       return ret;
<     }
<   }
< 
<   protected void putCoreToOrigName(SolrCore c, String name) {
< 
<     synchronized (locker) {
<       coreToOrigName.put(c, name);
<     }
< 
<   }
< 
<   protected void removeCoreToOrigName(SolrCore newCore, SolrCore core) {
< 
<     synchronized (locker) {
<       String origName = coreToOrigName.remove(core);
<       if (origName != null) {
<         coreToOrigName.put(newCore, origName);
<       }
<     }
<   }
< 
<   public SolrCore getCoreFromAnyList(String name) {
<     SolrCore core;
< 
<     synchronized (locker) {
<       core = cores.get(name);
<       if (core != null) {
<         return core;
<       }
< 
<       if (dynamicDescriptors.size() == 0) {
<         return null; 
<       }
<       
<       return transientCores.get(name);
<     }
<   }
< 
<   protected CoreDescriptor getDynamicDescriptor(String name) {
<     synchronized (locker) {
<       return dynamicDescriptors.get(name);
<     }
<   }
< 
<   protected boolean isLoaded(String name) {
<     synchronized (locker) {
<       if (cores.containsKey(name)) {
<         return true;
<       }
<       if (transientCores.containsKey(name)) {
<         return true;
<       }
<     }
<     return false;
< 
<   }
< 
<   protected CoreDescriptor getUnloadedCoreDescriptor(String cname) {
<     synchronized (locker) {
<       CoreDescriptor desc = dynamicDescriptors.get(cname);
<       if (desc == null) {
<         return null;
<       }
<       return new CoreDescriptor(desc);
<     }
< 
<   }
< 
<   protected String getCoreToOrigName(SolrCore solrCore) {
<     synchronized (locker) {
<       return coreToOrigName.get(solrCore);
<     }
<   }
< 
<   protected void publishCoresAsDown(ZkController zkController) {
<     synchronized (locker) {
<       for (SolrCore core : cores.values()) {
<         try {
<           zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);
<         } catch (KeeperException e) {
<           CoreContainer.log.error("", e);
<         } catch (InterruptedException e) {
<           CoreContainer.log.error("", e);
<         }
<       }
<       for (SolrCore core : transientCores.values()) {
<         try {
<           zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);
<         } catch (KeeperException e) {
<           CoreContainer.log.error("", e);
<         } catch (InterruptedException e) {
<           CoreContainer.log.error("", e);
<         }
<       }
<     }
<   }
< 
<   
<   
<   
<   
<   public void persistCores(ConfigSolr cfg, Properties containerProperties, Map<String, String> rootSolrAttribs,
<                            Map<String, String> coresAttribs, File file, File configFile, SolrResourceLoader loader) {
<     
<     
<     
<     
<     
<     synchronized (locker) {
<       if (cfg == null) {
<         ConfigSolrXml.initPersistStatic();
<         persistCores(cfg, cores, loader);
<         persistCores(cfg, transientCores, loader);
<         
<         for (Map.Entry<String, CoreDescriptor> ent : dynamicDescriptors.entrySet()) {
<           if (! cores.containsKey(ent.getKey()) && ! transientCores.containsKey(ent.getKey())) {
<             addPersistOneCore(cfg, loader, ent.getValue(), null);
<           }
<         }
<         for (Map.Entry<String, SolrCore> ent : createdCores.entrySet()) {
<           if (! cores.containsKey(ent.getKey()) && ! transientCores.containsKey(ent.getKey())
<               && ! dynamicDescriptors.containsKey(ent.getKey())) {
<             addPersistOneCore(cfg, loader, ent.getValue().getCoreDescriptor(), null);
<           }
<         }
<         ConfigSolrXml.addPersistAllCoresStatic(containerProperties, rootSolrAttribs, coresAttribs,
<             (file == null ? configFile : file));
<       } else {
<         cfg.initPersist();
<         persistCores(cfg, cores, loader);
<         persistCores(cfg, transientCores, loader);
<         
<         for (Map.Entry<String, CoreDescriptor> ent : dynamicDescriptors.entrySet()) {
<           if (! cores.containsKey(ent.getKey()) && ! transientCores.containsKey(ent.getKey())) {
<             addPersistOneCore(cfg, loader, ent.getValue(), null);
<           }
<         }
<         for (Map.Entry<String, SolrCore> ent : createdCores.entrySet()) {
<           if (! cores.containsKey(ent.getKey()) && ! transientCores.containsKey(ent.getKey())
<               && ! dynamicDescriptors.containsKey(ent.getKey())) {
<             addPersistOneCore(cfg, loader, ent.getValue().getCoreDescriptor(), null);
<           }
<         }
<         cfg.addPersistAllCores(containerProperties, rootSolrAttribs, coresAttribs, (file == null ? configFile : file));
<       }
<     }
<   }
<   
<   protected SolrCore waitAddPendingCoreOps(String name) {
< 
<     
<     synchronized (locker) {
<       boolean pending;
<       do { 
<         pending = pendingCoreOps.contains(name); 
<         if (! pending) { 
<           for (SolrCore core : pendingCloses) {
<             if (core.getName().equals(name)) {
<               pending = true;
<               break;
<             }
<           }
<         }
<         if (container.isShutDown()) return null; 
< 
<         if (pending) {
<           try {
<             locker.wait();
<           } catch (InterruptedException e) {
<             return null; 
<           }
<         }
<       } while (pending);
<       
<       if (! container.isShutDown()) {
<         if (! pendingCoreOps.add(name)) {
<           CoreContainer.log.warn("Replaced an entry in pendingCoreOps {}, we should not be doing this", name);
<         }
<         return getCoreFromAnyList(name); 
<       }
<     }
<     return null;
<   }
< 
<   
<   
<   protected void removeFromPendingOps(String name) {
<     synchronized (locker) {
<       if (! pendingCoreOps.remove(name)) {
<         CoreContainer.log.warn("Tried to remove core {} from pendingCoreOps and it wasn't there. ", name);
<       }
<       locker.notifyAll();
<     }
<   }
< 
< 
<   protected void persistCores(ConfigSolr cfg, Map<String, SolrCore> whichCores, SolrResourceLoader loader) {
<     for (SolrCore solrCore : whichCores.values()) {
<       addPersistOneCore(cfg, loader, solrCore.getCoreDescriptor(), getCoreToOrigName(solrCore));
<     }
<   }
< 
<   private void addIfNotNull(Map<String, String> coreAttribs, String key, String value) {
<     if (value == null) return;
<     coreAttribs.put(key, value);
<   }
< 
<   protected void addPersistOneCore(ConfigSolr cfg, SolrResourceLoader loader, CoreDescriptor dcore, String origCoreName) {
< 
<     String coreName = dcore.getProperty(CoreDescriptor.CORE_NAME);
< 
<     Map<String, String> coreAttribs = new HashMap<String, String>();
<     Properties persistProps = new Properties();
<     CloudDescriptor cd = dcore.getCloudDescriptor();
<     String collection = null;
<     if (cd != null) collection = cd.getCollectionName();
<     String instDir = dcore.getRawInstanceDir();
< 
<     if (cfg == null) {
<       addIfNotNull(coreAttribs, CoreDescriptor.CORE_NAME, coreName);
<       addIfNotNull(coreAttribs, CoreDescriptor.CORE_CONFIG, dcore.getDefaultConfigName());
<       addIfNotNull(coreAttribs, CoreDescriptor.CORE_SCHEMA, dcore.getDefaultSchemaName());
<       addIfNotNull(coreAttribs, CoreDescriptor.CORE_DATADIR, dcore.getProperty(CoreDescriptor.CORE_DATADIR));
<       addIfNotNull(coreAttribs, CoreDescriptor.CORE_ULOGDIR, dcore.getProperty(CoreDescriptor.CORE_ULOGDIR));
<       addIfNotNull(coreAttribs, CoreDescriptor.CORE_TRANSIENT, dcore.getProperty(CoreDescriptor.CORE_TRANSIENT));
<       addIfNotNull(coreAttribs, CoreDescriptor.CORE_LOADONSTARTUP, dcore.getProperty(CoreDescriptor.CORE_LOADONSTARTUP));
<       
< 
<       addIfNotNull(coreAttribs, CoreDescriptor.CORE_PROPERTIES, dcore.getPropertiesName());
<       
<       Set<String> std = new TreeSet<String>();
< 
<       Properties allProps = dcore.getCoreProperties();
< 
<       std.addAll(Arrays.asList(CoreDescriptor.standardPropNames));
< 
<       for (String prop : allProps.stringPropertyNames()) {
<         if (! std.contains(prop)) {
<           persistProps.put(prop, dcore.getProperty(prop));
<         }
<       }
<       if (StringUtils.isNotBlank(collection) && !collection.equals(coreName)) {
<         coreAttribs.put(CoreDescriptor.CORE_COLLECTION, collection);
<       }
< 
<     } else {
<       if (origCoreName == null) {
<         origCoreName = coreName;
<       }
<       String tmp = cfg.getCoreNameFromOrig(origCoreName, loader, coreName);
<       if (tmp != null) coreName = tmp;
< 
<       coreAttribs = cfg.readCoreAttributes(origCoreName);
<       persistProps = cfg.readCoreProperties(origCoreName);
<       
<       coreAttribs.put(CoreDescriptor.CORE_NAME, coreName);
<       if (coreAttribs.containsKey(CoreDescriptor.CORE_COLLECTION)) collection = coreAttribs
<           .get(CoreDescriptor.CORE_COLLECTION);
<       if (coreAttribs.containsKey(CoreDescriptor.CORE_INSTDIR)) instDir = coreAttribs
<           .get(CoreDescriptor.CORE_INSTDIR);
<       
<       addIfNotNull(coreAttribs, CoreDescriptor.CORE_INSTDIR,
<           dcore.getRawInstanceDir());
<       coreAttribs.put(CoreDescriptor.CORE_COLLECTION,
<           StringUtils.isNotBlank(collection) ? collection : dcore.getName());
< 
<     }
< 
<     
<     addIfNotNull(coreAttribs, CoreDescriptor.CORE_INSTDIR, instDir);
< 
<     
<     if (cd != null) {
<       addIfNotNull(coreAttribs, CoreDescriptor.CORE_SHARD, cd.getShardId());
<       addIfNotNull(coreAttribs, CoreDescriptor.CORE_ROLES, cd.getRoles());
<     }
<     coreAttribs.put(CoreDescriptor.CORE_LOADONSTARTUP, Boolean.toString(dcore.isLoadOnStartup()));
<     coreAttribs.put(CoreDescriptor.CORE_TRANSIENT, Boolean.toString(dcore.isTransient()));
< 
<     if (cfg != null) {
<       cfg.addPersistCore(coreName, persistProps, coreAttribs);
<     } else {
<       
<       ConfigSolrXml.addPersistCore(persistProps, coreAttribs);
<     }
<   }
< 
<   protected Object getLocker() { return locker; }
< 
<   
<   
<   
<   
<   protected SolrCore getCoreToClose() {
<     synchronized (locker) {
<       for (SolrCore core : pendingCloses) {
<         if (! pendingCoreOps.contains(core.getName())) {
<           pendingCoreOps.add(core.getName());
<           pendingCloses.remove(core);
<           return core;
<         }
<       }
<     }
<     return null;
<   }
---
> }
2076,2080d1533
<   protected void addCreated(SolrCore core) {
<     synchronized (locker) {
<       createdCores.put(core.getName(), core);
<     }
<   }
2082,2101d1534
<   protected String checkUniqueDataDir(String targetPath) {
<     
<     
<     
<     
<     synchronized (locker) {
<       for (SolrCore core : cores.values()) {
<         if (targetPath.equals(core.getDataDir())) return core.getName();
<       }
<       for (SolrCore core : transientCores.values()) {
<         if (targetPath.equals(core.getDataDir())) return core.getName();
<       }
<       for (CoreDescriptor desc : dynamicDescriptors.values()) {
<         if (targetPath.equals(desc.getDataDir())) return desc.getName();
<       }
<     }
< 
<     return null;
<   }
< }
2134,2135c1567,1569
<           coreMaps.addPersistOneCore(cfg, container.loader, removeMe.getCoreDescriptor(),
<               container.getCoreToOrigName(removeMe));
---
>          
>          
>          
2142a1577
>   
