35a36
> import java.util.concurrent.ConcurrentHashMap;
106a108,109
>     private final Map<String, Object> updateNodes = new ConcurrentHashMap<>();
>     private boolean isClusterStateModified = false;
119a123
>       reader.setEphemeralCollectionData(Collections.unmodifiableMap(updateNodes));
259a264
>                 if(!updateNodes.isEmpty()) break;
299,300c304,325
<         zkClient.setData(ZkStateReader.CLUSTER_STATE, ZkStateReader.toJSON(clusterState), true);
<         lastUpdatedTime = System.nanoTime();
---
>         if(!updateNodes.isEmpty()) {
>           for (Entry<String, Object> e : updateNodes.entrySet()) {
>             if (e.getValue() == null) {
>               if (zkClient.exists(e.getKey(), true)) zkClient.delete(e.getKey(), 0, true);
>             } else {
>               if (zkClient.exists(e.getKey(), true)) {
>                 log.info("going to update_collection {}", e.getKey());
>                 zkClient.setData(e.getKey(), ZkStateReader.toJSON(e.getValue()), true);
>               } else {
>                 log.info("going to create_collection {}", e.getValue());
>                 zkClient.create(e.getKey(), ZkStateReader.toJSON(e.getValue()), CreateMode.PERSISTENT, true);
>               }
>             }
>           }
>           updateNodes.clear();
>         }
> 
>         if(isClusterStateModified) {
>           lastUpdatedTime = System.nanoTime();
>           zkClient.setData(ZkStateReader.CLUSTER_STATE, ZkStateReader.toJSON(clusterState), true);
>           isClusterStateModified = false;
>         }
702c727
<         
---
> 
720c745
<           
---
> 
868,870c893,901
<         if(message.getStr("fromApi") == null) collectionProps.put("autoCreated","true");
<         DocCollection newCollection = new DocCollection(collectionName, newSlices, collectionProps, router);
<         return newState(state, singletonMap(newCollection.getName(), newCollection));
---
>       if(message.getStr("fromApi") == null) collectionProps.put("autoCreated","true");
>       String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null : ZkStateReader.getCollectionPath(collectionName);
>       DocCollection newCollection = new DocCollection(collectionName, newSlices, collectionProps, router , -1,znode);
>       isClusterStateModified = true;
>       log.info("state version {} {}", collectionName, newCollection.getStateFormat());
>       if (newCollection.getStateFormat() > 1) {
>         updateNodes.put(ZkStateReader.getCollectionPath(collectionName),
>             new ClusterState(-1, Collections.<String>emptySet(), singletonMap(newCollection.getName(), newCollection), state.getStateReader()));
>         return state;
871a903,904
>       return newState(state, singletonMap(newCollection.getName(), newCollection));
>     }
908c941
<       
---
> 
912c945
< 
---
>         DocCollection newCollection = null;
915,917d947
<         Map<String,Object> props;
<         DocRouter router;
< 
921,922c951,953
<           slices = new HashMap<>(1);
<           props = new HashMap<>(1);
---
>           slices = new LinkedHashMap<>(1);
>           slices.put(slice.getName(), slice);
>           Map<String,Object> props = new HashMap<>(1);
924c955
<           router = new ImplicitDocRouter();
---
>           newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());
926,927d956
<           props = coll.getProperties();
<           router = coll.getRouter();
928a958,959
>           slices.put(slice.getName(), slice);
>           newCollection = coll.copyWith(slices);
930,931c961
<         slices.put(slice.getName(), slice);
<         DocCollection newCollection = new DocCollection(collectionName, slices, props, router);
---
> 
990c1020
<         DocCollection newCollection = new DocCollection(coll.getName(), slices, coll.getProperties(), coll.getRouter());
---
>         DocCollection newCollection = coll.copyWith(slices);
994,995c1024,1039
<       private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {
<         return state.copyWith(colls);
---
>     private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {
>       for (Entry<String, DocCollection> e : colls.entrySet()) {
>         DocCollection c = e.getValue();
>         if (c == null) {
>           isClusterStateModified = true;
>           state = state.copyWith(singletonMap(e.getKey(), (DocCollection) null));
>           continue;
>         }
> 
>         if (c.getStateFormat() >1) {
>           state.getStateReader().updateWatchedCollection(c);
>           updateNodes.put(ZkStateReader.getCollectionPath(c.getName()), new ClusterState(-1, Collections.<String>emptySet(), singletonMap(c.getName(), c), state.getStateReader()));
>         } else {
>           isClusterStateModified = true;
>           state = state.copyWith(singletonMap(e.getKey(), c));
>         }
996a1041,1042
>       return state;
>     }
998c1044
<       
---
>     
1001,1005c1047,1062
<       private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {
<         final String collection = message.getStr("name");
<         if (!checkKeyExistence(message, "name")) return clusterState;
<         DocCollection coll = clusterState.getCollectionOrNull(collection);
<         if(coll !=null) {
---
>     private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {
>       final String collection = message.getStr("name");
>       if (!checkKeyExistence(message, "name")) return clusterState;
>       DocCollection coll = clusterState.getCollectionOrNull(collection);
>       if(coll !=null) {
>         isClusterStateModified = true;
>         if(coll.getStateFormat()>1){
>           try {
>             log.info("Deleting state for collection : {}", collection);
>             zkClient.delete(ZkStateReader.getCollectionPath(collection),-1,true);
>           } catch (Exception e) {
>             throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to remove collection state :"+collection);
> 
>           }
>           return clusterState;
>         } else{
1008d1064
<         return clusterState;
1010c1066,1067
< 
---
>       return clusterState;
>     }
1026c1083
<       DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());
---
>       DocCollection newCollection = coll.copyWith(newSlices);
1038,1039d1094
< 
< 
1077c1132
<         
---
> 
1094c1149
<             zkClient.clean("/collections/" + collection);
---
>             zkClient.delete("/collections/" + collection,-1,true);
1104,1105c1159,1160
<           DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());
<            return newState(clusterState,singletonMap(collection,newCollection));
---
>           DocCollection newCollection = coll.copyWith(newSlices);
>           return newState(clusterState,singletonMap(collection,newCollection));
