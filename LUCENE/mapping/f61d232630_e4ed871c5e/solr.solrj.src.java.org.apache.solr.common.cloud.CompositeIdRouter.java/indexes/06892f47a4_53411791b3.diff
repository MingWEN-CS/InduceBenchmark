33a34,35
> 
> 
37c39
<   public static final int separator = '!';
---
>   public static final String SEPARATOR = "!";
42,60d43
<   private int mask1 = 0xffff0000;
<   private int mask2 = 0x0000ffff;
< 
<   protected void setBits(int firstBits) {
<     this.bits = firstBits;
<     
<     mask1 = firstBits==0 ? 0 : (-1 << (32-firstBits));
<     mask2 = firstBits==32 ? 0 : (-1 >>> firstBits);
<   }
< 
<   protected int getBits(String firstPart, int commaIdx) {
<     int v = 0;
<     for (int idx = commaIdx + 1; idx<firstPart.length(); idx++) {
<       char ch = firstPart.charAt(idx);
<       if (ch < '0' || ch > '9') return -1;
<       v = v * 10 + (ch - '0');
<     }
<     return v > 32 ? -1 : v;
<   }
71,72c54
<     int idx = id.indexOf(separator);
<     if (idx < 0) {
---
>     if (id.indexOf(SEPARATOR) < 0) {
75,78d56
<     String part1 = id.substring(0, idx);
<     int commaIdx = part1.indexOf(bitsSeparator);
<     int m1 = mask1;
<     int m2 = mask2;
80,87c58,63
<     if (commaIdx > 0) {
<       int firstBits = getBits(part1, commaIdx);
<       if (firstBits >= 0) {
<         m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));
<         m2 = firstBits==32 ? 0 : (-1 >>> firstBits);
<         part1 = part1.substring(0, commaIdx);
<       }
<     }
---
>     return new KeyParser(id).getHash();
>   }
> 
> 
>   
> 
89d64
<     String part2 = id.substring(idx+1);
91,94d65
<     int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);
<     int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);
<     return (hash1 & m1) | (hash2 & m2);
<   }
97,98c68
<     int idx = routeKey.indexOf(separator);
<     if (idx < 0) {
---
>     if (routeKey.indexOf(SEPARATOR) < 0) {
102,114d71
<     String part1 = routeKey.substring(0, idx);
<     int commaIdx = part1.indexOf(bitsSeparator);
<     int m1 = mask1;
<     int m2 = mask2;
< 
<     if (commaIdx > 0) {
<       int firstBits = getBits(part1, commaIdx);
<       if (firstBits >= 0) {
<         m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));
<         m2 = firstBits==32 ? 0 : (-1 >>> firstBits);
<         part1 = part1.substring(0, commaIdx);
<       }
<     }
116,119c73
<     int hash = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);
<     int min = hash & m1;
<     int max = min | m2;
<     return new Range(min, max);
---
>     return new KeyParser(routeKey).getRange();
131,132c85
<     int idx = shardKey.indexOf(separator);
<     if (idx < 0) {
---
>     if (shardKey.indexOf(SEPARATOR) < 0) {
137,165c90
<     int m1 = mask1;
<     int m2 = mask2;
< 
<     String part1 = id.substring(0,idx);
<     int bitsSepIdx = part1.indexOf(bitsSeparator);
<     if (bitsSepIdx > 0) {
<       int firstBits = getBits(part1, bitsSepIdx);
<       if (firstBits >= 0) {
<         m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));
<         m2 = firstBits==32 ? 0 : (-1 >>> firstBits);
<         part1 = part1.substring(0, bitsSepIdx);
<       }
<     }
< 
<     
<     
< 
<     int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);
<     int upperBits = hash1 & m1;
<     int lowerBound = upperBits;
<     int upperBound = upperBits | m2;
< 
<     if (m1 == 0) {
<       
<       lowerBound = Integer.MIN_VALUE;
<       upperBound = Integer.MAX_VALUE;
<     }
< 
<     Range completeRange = new Range(lowerBound, upperBound);
---
>     Range completeRange = new KeyParser(id).getRange();
221a147
>     int mask = 0x0000ffff;
228c154
<       if (round && ((end & mask2) != mask2)) {
---
>       if (round && ((end & mask) != mask)) {
231,232c157,158
<         long roundDown = (end | mask2) - increment ;
<         long roundUp = (end | mask2) + increment;
---
>         long roundDown = (end | mask) - increment ;
>         long roundUp = (end | mask) + increment;
251a178,294
>   
> 
> 
>   static class KeyParser {
>     String key;
>     int[] numBits;
>     int[] hashes;
>     int[] masks;
>     boolean triLevel;
>     int pieces;
> 
>     public KeyParser(String key) {
>       String[] parts = key.split(SEPARATOR);
>       this.key = key;
>       pieces = parts.length;
>       hashes = new int[pieces];
>       numBits = new int[2];
>       if(key.endsWith("!"))
>         pieces++;
>       if(pieces == 3) {
>         numBits[0] = 8;
>         numBits[1] = 8;
>         triLevel = true;
>       } else {
>         numBits[0] = 16;
>         triLevel = false;
> 
>       }
> 
>       for(int i=0;i<parts.length;i++) {
>         int commaIdx = parts[i].indexOf(bitsSeparator);
> 
>         if(commaIdx > 0) {
>           numBits[i] = getNumBits(parts[i], commaIdx);
>           parts[i] = parts[i].substring(0, commaIdx);
>         }
>         hashes[i] = Hash.murmurhash3_x86_32(parts[i], 0, parts[i].length(), 0);
>       }
>       masks = getMasks();
>     }
> 
>     Range getRange() {
>       int lowerBound;
>       int upperBound;
> 
>       if(triLevel) {
>         lowerBound = hashes[0] & masks[0] | hashes[1] & masks[1];
>         upperBound = lowerBound | masks[2];
>       } else {
>         lowerBound = hashes[0] & masks[0];
>         upperBound = lowerBound | masks[1];
>       }
>       
>       
> 
>       if ((masks[0] == 0 && !triLevel) || (masks[0] == 0 && masks[1] == 0 && triLevel)) {
>         
>         
>         lowerBound = Integer.MIN_VALUE;
>         upperBound = Integer.MAX_VALUE;
>       }
>       Range r = new Range(lowerBound, upperBound);
>       return r;
>     }
> 
>     
> 
> 
> 
>     private int[] getMasks() {
>       int[] masks;
>       if(triLevel)
>         masks = getBitMasks(numBits[0], numBits[1]);
>       else
>         masks = getBitMasks(numBits[0]);
> 
>       return masks;
>     }
> 
>     private int[] getBitMasks(int firstBits, int secondBits) {
>       
>       int[] masks = new int[3];
>       masks[0] = firstBits==0 ? 0 : (-1 << (32-firstBits));
>       masks[1] = (firstBits + secondBits)==0 ? 0 : (-1 << (32 - firstBits - secondBits));
>       masks[1] = masks[0] ^ masks[1];
>       masks[2] = (firstBits + secondBits) == 32 ? 0 : ~(masks[0] | masks[1]);
>       return masks;
>     }
> 
>     private int getNumBits(String firstPart, int commaIdx) {
>       int v = 0;
>       for (int idx = commaIdx + 1; idx<firstPart.length(); idx++) {
>         char ch = firstPart.charAt(idx);
>         if (ch < '0' || ch > '9') return -1;
>         v = v * 10 + (ch - '0');
>       }
>       return v > 32 ? -1 : v;
>     }
> 
>     private int[] getBitMasks(int firstBits) {
>       
>       int[] masks;
>       masks = new int[2];
>       masks[0] = firstBits==0 ? 0 : (-1 << (32-firstBits));
>       masks[1] = firstBits==32 ? 0 : (-1 >>> firstBits);
>       return masks;
>     }
> 
>     int getHash() {
>       int result = hashes[0] & masks[0];
> 
>       for(int i=1;i<pieces;i++)
>         result = result | (hashes[i] & masks[i]);
>       return result;
>     }
> 
>   }
