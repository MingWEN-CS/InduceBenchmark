261c261,262
<     addField(fieldName, stream, 1.0f, analyzer.getPositionIncrementGap(fieldName), analyzer.getOffsetGap(fieldName), DocValuesType.NONE, null);
---
>     addField(fieldName, stream, 1.0f, analyzer.getPositionIncrementGap(fieldName), analyzer.getOffsetGap(fieldName),
>         DocValuesType.NONE, null, 0, 0, null);
380,383d380
<     if (field.fieldType().pointDimensionCount() != 0) {
<       throw new IllegalArgumentException("MemoryIndex does not support Points");
<     }
< 
415c412,417
<     addField(field.name(), tokenStream, boost, positionIncrementGap, offsetGap, docValuesType, docValuesValue);
---
>     BytesRef pointValue = null;
>     if (field.fieldType().pointDimensionCount() > 0) {
>       pointValue = field.binaryValue();
>     }
>     addField(field.name(), tokenStream, boost, positionIncrementGap, offsetGap, docValuesType, docValuesValue,
>         field.fieldType().pointDimensionCount(), field.fieldType().pointNumBytes(), pointValue);
484c486
<     addField(fieldName, tokenStream, boost, positionIncrementGap, offsetGap, DocValuesType.NONE, null);
---
>     addField(fieldName, tokenStream, boost, positionIncrementGap, offsetGap, DocValuesType.NONE, null, 0, 0, null);
488c490,491
<                         DocValuesType docValuesType, Object docValuesValue) {
---
>                         DocValuesType docValuesType, Object docValuesValue, int pointDimensionCount, int pointNumBytes,
>                         BytesRef pointValue) {
506c509,511
< 
---
>     if (pointDimensionCount > 0) {
>       storePointValues(info, pointDimensionCount, pointNumBytes, pointValue);
>     }
514a520,528
>   private void storePointValues(Info info, int pointDimensionCount, int pointNumBytes, BytesRef pointValue) {
>     info.fieldInfo.setPointDimensions(pointDimensionCount, pointNumBytes);
>     if (info.pointValues == null) {
>       info.pointValues = new BytesRef[4];
>     }
>     info.pointValues = ArrayUtil.grow(info.pointValues, info.pointValuesCount + 1);
>     info.pointValues[info.pointValuesCount++] = BytesRef.deepCopyOf(pointValue);
>   }
> 
832c846,854
<     private boolean preparedDocValues;
---
>     private boolean preparedDocValuesAndPointValues;
> 
>     private BytesRef[] pointValues;
> 
>     private byte[] minPackedValue;
> 
>     private byte[] maxPackedValue;
> 
>     private int pointValuesCount;
844c866
<       prepareDocValues();
---
>       prepareDocValuesAndPointValues();
862,863c884,885
<     void prepareDocValues() {
<       if (preparedDocValues == false) {
---
>     void prepareDocValuesAndPointValues() {
>       if (preparedDocValuesAndPointValues == false) {
871c893,916
<         preparedDocValues = true;
---
>         if (pointValues != null) {
>           assert pointValues[0].bytes.length == pointValues[0].length : "BytesRef should wrap a precise byte[], BytesRef.deepCopyOf() should take care of this";
> 
>           final int numDimensions = fieldInfo.getPointDimensionCount();
>           final int numBytesPerDimension = fieldInfo.getPointNumBytes();
>           minPackedValue = pointValues[0].bytes.clone();
>           maxPackedValue = pointValues[0].bytes.clone();
> 
>           for (int i = 0; i < pointValuesCount; i++) {
>             BytesRef pointValue = pointValues[i];
>             assert pointValue.bytes.length == pointValue.length : "BytesRef should wrap a precise byte[], BytesRef.deepCopyOf() should take care of this";
> 
>             for (int dim = 0; dim < numDimensions; ++dim) {
>               int offset = dim * numBytesPerDimension;
>               if (StringHelper.compare(numBytesPerDimension, pointValue.bytes, offset, minPackedValue, offset) < 0) {
>                 System.arraycopy(pointValue.bytes, offset, minPackedValue, offset, numBytesPerDimension);
>               }
>               if (StringHelper.compare(numBytesPerDimension, pointValue.bytes, offset, maxPackedValue, offset) > 0) {
>                 System.arraycopy(pointValue.bytes, offset, maxPackedValue, offset, numBytesPerDimension);
>               }
>             }
>           }
>         }
>         preparedDocValuesAndPointValues = true;
980c1025,1027
<     
---
> 
>     private final PointValues pointValues;
> 
982a1030
>       boolean hasPointValues = false;
984c1032,1040
<         info.prepareDocValues();
---
>         info.prepareDocValuesAndPointValues();
>         if (info.pointValues != null) {
>           hasPointValues = true;
>         }
>       }
>       if (hasPointValues) {
>         pointValues = new MemoryIndexPointValues();
>       } else {
>         pointValues = null;
1114c1170
<       return null;
---
>       return pointValues;
1414a1471,1565
> 
>     private class MemoryIndexPointValues extends PointValues {
> 
>       @Override
>       public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {
>         Info info = fields.get(fieldName);
>         if (info == null) {
>           return;
>         }
>         BytesRef[] values = info.pointValues;
>         if (values == null) {
>           return;
>         }
> 
>         visitor.grow(info.pointValuesCount);
>         for (int i = 0; i < info.pointValuesCount; i++) {
>           visitor.visit(0, values[i].bytes);
>         }
>       }
> 
>       @Override
>       public byte[] getMinPackedValue(String fieldName) throws IOException {
>         Info info = fields.get(fieldName);
>         if (info == null) {
>           return null;
>         }
>         BytesRef[] values = info.pointValues;
>         if (values != null) {
>           return info.minPackedValue;
>         } else {
>           return null;
>         }
>       }
> 
>       @Override
>       public byte[] getMaxPackedValue(String fieldName) throws IOException {
>         Info info = fields.get(fieldName);
>         if (info == null) {
>           return null;
>         }
>         BytesRef[] values = info.pointValues;
>         if (values != null) {
>           return info.maxPackedValue;
>         } else {
>           return null;
>         }
>       }
> 
>       @Override
>       public int getNumDimensions(String fieldName) throws IOException {
>         Info info = fields.get(fieldName);
>         if (info == null){
>           return 0;
>         }
>         return info.fieldInfo.getPointDimensionCount();
>       }
> 
>       @Override
>       public int getBytesPerDimension(String fieldName) throws IOException {
>         Info info = fields.get(fieldName);
>         if (info == null){
>           return 0;
>         }
>         return info.fieldInfo.getPointNumBytes();
>       }
> 
>       @Override
>       public long size(String fieldName) {
>         Info info = fields.get(fieldName);
>         if (info == null) {
>           return 0;
>         }
>         BytesRef[] values = info.pointValues;
>         if (values != null) {
>           return info.pointValuesCount;
>         } else {
>           return 0;
>         }
>       }
> 
>       @Override
>       public int getDocCount(String fieldName) {
>         Info info = fields.get(fieldName);
>         if (info == null) {
>           return 0;
>         }
>         BytesRef[] values = info.pointValues;
>         if (values != null) {
>           return 1;
>         } else {
>           return 0;
>         }
>       }
> 
>     }
