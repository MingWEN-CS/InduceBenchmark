21a22
> import org.apache.solr.core.SolrInfoMBean;
200,201c201,202
<     assertJQ(req("q"," \"\" id:3")
<         ,"/response/numFound==3"
---
>     assertJQ(req("q", " \"\" id:3")
>         , "/response/numFound==3"
217a219,309
>   @Test
>   public void testFilter() throws Exception {
> 
>     
>     for (int i=0; i<10; i++) {
>       assertJQ(req("q","*:* "+ i, "fq","filter(just_to_clear_the_cache) filter(id:10000" + i + ") filter(id:10001" + i + ")")
>           ,"/response/numFound==0"
>       );
>     }
>     assertU(adoc("id","777"));
>     delI("777");
>     assertU(commit());  
> 
> 
>     final SolrInfoMBean filterCacheStats
>         = h.getCore().getInfoRegistry().get("filterCache");
>     assertNotNull(filterCacheStats);
>     final SolrInfoMBean queryCacheStats
>         = h.getCore().getInfoRegistry().get("queryResultCache");
> 
>     assertNotNull(queryCacheStats);
> 
> 
>     long inserts = (Long) filterCacheStats.getStatistics().get("inserts");
>     long hits = (Long) filterCacheStats.getStatistics().get("hits");
> 
>     assertJQ(req("q","doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)")
>         ,"/response/numFound==2"
>     );
> 
>     inserts+=3;
>     assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get("inserts")).longValue() );
>     assertEquals(hits, ((Long) filterCacheStats.getStatistics().get("hits")).longValue() );
> 
>     assertJQ(req("q","doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)")
>         ,"/response/numFound==2"
>     );
> 
>     hits+=3;
>     assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get("inserts")).longValue() );
>     assertEquals(hits, ((Long) filterCacheStats.getStatistics().get("hits")).longValue() );
> 
>     
>     assertJQ(req("q","doesnotexist3", "fq","id:1", "fq", "qqq_s:X", "fq", "abcdefg")
>         ,"/response/numFound==0"
>     );
> 
>     hits+=3;
>     assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get("inserts")).longValue() );
>     assertEquals(hits, ((Long) filterCacheStats.getStatistics().get("hits")).longValue() );
> 
>     
>     assertJQ(req("q","*:* doesnotexist4", "fq","(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )")
>         ,"/response/numFound==2"
>     );
> 
>     inserts+=1;  
>     hits+=3;
>     assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get("inserts")).longValue() );
>     assertEquals(hits, ((Long) filterCacheStats.getStatistics().get("hits")).longValue() );
> 
>     
>     assertJQ(req("q","*:* doesnotexist5", "fq","(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )")
>         ,"/response/numFound==2"
>     );
> 
>     hits+=1;  
>     assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get("inserts")).longValue() );
>     assertEquals(hits, ((Long) filterCacheStats.getStatistics().get("hits")).longValue() );
> 
> 
>     
>     assertJQ(req("q","*:* +filter(id:1 filter(qqq_s:X) abcdefg)")
>         ,"/response/numFound==2"
>     );
> 
>     hits+=1;  
>     inserts+=1; 
>     assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get("inserts")).longValue() );
>     assertEquals(hits, ((Long) filterCacheStats.getStatistics().get("hits")).longValue() );
> 
>     
>     assertJQ(req("q","+filter(*:*) +filter(id:1)", "fl","id,score", "sort","id asc")
>         ,"/response/docs/[0]/score==0.0"
>     );
> 
>     assertJQ(req("q","+filter(*:*)^=10 +filter(id:1)", "fl","id,score", "sort","id asc")
>         ,"/response/docs/[0]/score==1.0"  
>     );
> 
>   }
