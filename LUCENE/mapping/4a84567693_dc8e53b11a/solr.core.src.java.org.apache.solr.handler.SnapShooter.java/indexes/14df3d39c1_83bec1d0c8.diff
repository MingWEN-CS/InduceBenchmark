35a36
> import org.apache.solr.common.SolrException;
55,56c56,61
<   
<   public SnapShooter(SolrCore core, String location) {
---
>   private String snapshotName = null;
>   private String directoryName = null;
>   private File snapShotDir = null;
>   private Lock lock = null;
> 
>   public SnapShooter(SolrCore core, String location, String snapshotName) {
66,69c71,78
<   }
<   
<   void createSnapAsync(final IndexCommit indexCommit, final ReplicationHandler replicationHandler) {
<     createSnapAsync(indexCommit, Integer.MAX_VALUE, replicationHandler);
---
>     this.snapshotName = snapshotName;
> 
>     if(snapshotName != null) {
>       directoryName = "snapshot." + snapshotName;
>     } else {
>       SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);
>       directoryName = "snapshot." + fmt.format(new Date());
>     }
78c87,115
<         createSnapshot(indexCommit, numberToKeep, replicationHandler);
---
>         if(snapshotName != null) {
>           createSnapshot(indexCommit, replicationHandler);
>         } else {
>           deleteOldBackups(numberToKeep);
>           createSnapshot(indexCommit, replicationHandler);
>         }
>       }
>     }.start();
>   }
> 
>   public void validateDeleteSnapshot() {
>     boolean dirFound = false;
>     File[] files = new File(snapDir).listFiles();
>     for(File f : files) {
>       if (f.getName().equals("snapshot." + snapshotName)) {
>         dirFound = true;
>         break;
>       }
>     }
>     if(dirFound == false) {
>       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Snapshot cannot be found in directory: " + snapDir);
>     }
>   }
> 
>   protected void deleteSnapAsync(final ReplicationHandler replicationHandler) {
>     new Thread() {
>       @Override
>       public void run() {
>         deleteNamedSnapshot(replicationHandler);
83c120,138
<   void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {
---
>   void validateCreateSnapshot() throws IOException {
> 
>     Lock lock = lockFactory.makeLock(directoryName + ".lock");
>     if (lock.isLocked()) {
>       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
>           "Unable to acquire lock for snapshot directory: " + snapShotDir.getAbsolutePath());
>     }
>     snapShotDir = new File(snapDir, directoryName);
>     if (snapShotDir.exists()) {
>       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
>           "Snapshot directory already exists: " + snapShotDir.getAbsolutePath());
>     }
>     if (!snapShotDir.mkdirs()) {
>       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
>           "Unable to create snapshot directory: " + snapShotDir.getAbsolutePath());
>     }
>   }
> 
>   void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {
87d141
<     File snapShotDir = null;
89c143
<     Lock lock = null;
---
> 
91,102d144
<       if(numberToKeep<Integer.MAX_VALUE) {
<         deleteOldBackups(numberToKeep);
<       }
<       SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);
<       directoryName = "snapshot." + fmt.format(new Date());
<       lock = lockFactory.makeLock(directoryName + ".lock");
<       if (lock.isLocked()) return;
<       snapShotDir = new File(snapDir, directoryName);
<       if (!snapShotDir.mkdir()) {
<         LOG.warn("Unable to create snapshot directory: " + snapShotDir.getAbsolutePath());
<         return;
<       }
105c147
<       
---
> 
131a174
> 
140a184,187
>     if(numberToKeep > dirs.size()) {
>       return;
>     }
> 
148a196,213
> 
>   protected void deleteNamedSnapshot(ReplicationHandler replicationHandler) {
>     LOG.info("Deleting snapshot: " + snapshotName);
> 
>     NamedList<Object> details = new NamedList<>();
>     boolean isSuccess = false;
>     File f = new File(snapDir, "snapshot." + snapshotName);
>     isSuccess = SnapPuller.delTree(f);
> 
>     if(isSuccess) {
>       details.add("status", "success");
>     } else {
>       details.add("status", "Unable to delete snapshot: " + snapshotName);
>       LOG.warn("Unable to delete snapshot: " + snapshotName);
>     }
>     replicationHandler.snapShootDetails = details;
>   }
> 
