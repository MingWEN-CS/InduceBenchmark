29a30
> import org.apache.solr.common.util.SimpleOrderedMap;
53a55
> import java.util.Comparator;
56a59
> import java.util.Locale;
57a61,65
> import java.util.Set;
> import java.util.SortedMap;
> import java.util.SortedSet;
> import java.util.TreeMap;
> import java.util.TreeSet;
66a75,77
>   public static final String COPY_FIELD = "copyField";
>   public static final String COPY_FIELDS = COPY_FIELD + "s";
>   public static final String DEFAULT_OPERATOR = "defaultOperator";
67a79,87
>   public static final String DEFAULT_SEARCH_FIELD = "defaultSearchField";
>   public static final String DESTINATION = "dest";
>   public static final String DYNAMIC_FIELD = "dynamicField";
>   public static final String DYNAMIC_FIELDS = DYNAMIC_FIELD + "s";
>   public static final String FIELD = "field";
>   public static final String FIELDS = FIELD + "s";
>   public static final String FIELD_TYPE = "fieldType";
>   public static final String FIELD_TYPES = FIELD_TYPE + "s";
>   public static final String INTERNAL_POLY_FIELD_PREFIX = "*" + FieldType.POLY_FIELD_SEPARATOR;
68a89,107
>   public static final String NAME = "name";
>   public static final String REQUIRED = "required";
>   public static final String SCHEMA = "schema";
>   public static final String SIMILARITY = "similarity";
>   public static final String SOLR_QUERY_PARSER = "solrQueryParser";
>   public static final String SOURCE = "source";
>   public static final String TYPES = "types";
>   public static final String UNIQUE_KEY = "uniqueKey";
>   public static final String VERSION = "version";
> 
>   private static final String AT = "@";
>   private static final String DESTINATION_DYNAMIC_BASE = "destDynamicBase";
>   private static final String MAX_CHARS = "maxChars";
>   private static final String SLASH = "/";
>   private static final String SOURCE_DYNAMIC_BASE = "sourceDynamicBase";
>   private static final String SOURCE_EXPLICIT_FIELDS = "sourceExplicitFields";
>   private static final String TEXT_FUNCTION = "text()";
>   private static final String TYPE = "type";
>   private static final String XPATH_OR = " | ";
91a131
>   private boolean isExplicitQueryParserDefaultOperator = false;
153c193
<   float getVersion() {
---
>   public float getVersion() {
209a250,256
>   private SimilarityFactory similarityFactory;
>   private boolean isExplicitSimilarity = false;
> 
> 
>   
>   public SimilarityFactory getSimilarityFactory() { return similarityFactory; }
>   
353c400
<       Config schemaConf = new Config(loader, "schema", is, "/schema/");
---
>       Config schemaConf = new Config(loader, SCHEMA, is, SLASH+SCHEMA+SLASH);
357c404,405
<       Node nd = (Node) xpath.evaluate("/schema/@name", document, XPathConstants.NODE);
---
>       String expression = stepsToPath(SCHEMA, AT + NAME);
>       Node nd = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);
362c410
<         log.info("Schema name=" + name);
---
>         log.info("Schema " + NAME + "=" + name);
365c413,415
<       version = schemaConf.getFloat("/schema/@version", 1.0f);
---
>       
>       expression = stepsToPath(SCHEMA, AT + VERSION);
>       version = schemaConf.getFloat(expression, 1.0f);
373,375c423,426
<       String expression = "/schema/types/fieldtype | /schema/types/fieldType";
<       NodeList nodes = (NodeList) xpath.evaluate(expression, document, 
<                                                  XPathConstants.NODESET);
---
>       
>       expression =     stepsToPath(SCHEMA, TYPES, FIELD_TYPE.toLowerCase(Locale.ROOT)) 
>           + XPATH_OR + stepsToPath(SCHEMA, TYPES, FIELD_TYPE);
>       NodeList nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
383c434,437
<       expression = "/schema/fields/field | /schema/fields/dynamicField";
---
> 
>       
>       expression =     stepsToPath(SCHEMA, FIELDS, FIELD)
>           + XPATH_OR + stepsToPath(SCHEMA, FIELDS, DYNAMIC_FIELD);
391c445
<         String name = DOMUtil.getAttr(attrs,"name","field definition");
---
>         String name = DOMUtil.getAttr(attrs, NAME, "field definition");
393c447
<         String type = DOMUtil.getAttr(attrs,"type","field " + name);
---
>         String type = DOMUtil.getAttr(attrs, TYPE, "field " + name);
397c451,452
<           throw new SolrException(ErrorCode.BAD_REQUEST,"Unknown fieldtype '" + type + "' specified on field " + name);
---
>           throw new SolrException
>               (ErrorCode.BAD_REQUEST, "Unknown " + FIELD_TYPE + " '" + type + "' specified on field " + name);
400,402c455,457
<         Map<String,String> args = DOMUtil.toMapExcept(attrs, "name", "type");
<         if( args.get( "required" ) != null ) {
<           explicitRequiredProp.put( name, Boolean.valueOf( args.get( "required" ) ) );
---
>         Map<String,String> args = DOMUtil.toMapExcept(attrs, NAME, TYPE);
>         if (null != args.get(REQUIRED)) {
>           explicitRequiredProp.put(name, Boolean.valueOf(args.get(REQUIRED)));
407c462
<         if (node.getNodeName().equals("field")) {
---
>         if (node.getNodeName().equals(FIELD)) {
423c478
<         } else if (node.getNodeName().equals("dynamicField")) {
---
>         } else if (node.getNodeName().equals(DYNAMIC_FIELD)) {
438,442c493,496
<     
<     
<     
<     requiredFields.addAll(getFieldsWithDefaultValue());
< 
---
>       
>       
>       
>       requiredFields.addAll(getFieldsWithDefaultValue());
444,447d497
<     
<     
<     
<     Collections.sort(dFields);
449c499,502
<     log.trace("Dynamic Field Ordering:" + dFields);
---
>       
>       
>       
>       Collections.sort(dFields);
451,452c504
<     
<     dynamicFields = dFields.toArray(new DynamicField[dFields.size()]);
---
>       log.trace("Dynamic Field Ordering:" + dFields);
454,461d505
<     Node node = (Node) xpath.evaluate("/schema/similarity", document, XPathConstants.NODE);
<     SimilarityFactory simFactory = readSimilarity(loader, node);
<     if (simFactory == null) {
<       simFactory = new DefaultSimilarityFactory();
<     }
<     if (simFactory instanceof SchemaAware) {
<       ((SchemaAware)simFactory).inform(this);
<     } else {
463,468c507,529
<       
<       for (FieldType ft : fieldTypes.values()) {
<         if (null != ft.getSimilarity()) {
<           String msg = "FieldType '" + ft.getTypeName() + "' is configured with a similarity, but the global similarity does not support it: " + simFactory.getClass();
<           log.error(msg);
<           throw new SolrException(ErrorCode.SERVER_ERROR, msg);
---
>       dynamicFields = dFields.toArray(new DynamicField[dFields.size()]);
> 
>       expression = stepsToPath(SCHEMA, SIMILARITY); 
>       Node node = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);
>       similarityFactory = readSimilarity(loader, node);
>       if (similarityFactory == null) {
>         similarityFactory = new DefaultSimilarityFactory();
>       } else {
>         isExplicitSimilarity = true;
>       }
>       if (similarityFactory instanceof SchemaAware) {
>         ((SchemaAware)similarityFactory).inform(this);
>       } else {
>         
>         
>         for (FieldType ft : fieldTypes.values()) {
>           if (null != ft.getSimilarity()) {
>             String msg = "FieldType '" + ft.getTypeName()
>                 + "' is configured with a similarity, but the global similarity does not support it: " 
>                 + similarityFactory.getClass();
>             log.error(msg);
>             throw new SolrException(ErrorCode.SERVER_ERROR, msg);
>           }
471,472c532
<     }
<     similarity = simFactory.getSimilarity();
---
>       similarity = similarityFactory.getSimilarity();
474,478d533
<     node = (Node) xpath.evaluate("/schema/defaultSearchField/text()", document, XPathConstants.NODE);
<     if (node==null) {
<       log.debug("no default search field specified in schema.");
<     } else {
<       defaultSearchFieldName=node.getNodeValue().trim();
480,484c535,547
<       if (defaultSearchFieldName!=null) {
<         SchemaField defaultSearchField = getFields().get(defaultSearchFieldName);
<         if ((defaultSearchField == null) || !defaultSearchField.indexed()) {
<           String msg =  "default search field '" + defaultSearchFieldName + "' not defined or not indexed" ;
<           throw new SolrException(ErrorCode.SERVER_ERROR, msg);
---
>       expression = stepsToPath(SCHEMA, DEFAULT_SEARCH_FIELD, TEXT_FUNCTION);
>       node = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);
>       if (node==null) {
>         log.debug("no default search field specified in schema.");
>       } else {
>         defaultSearchFieldName=node.getNodeValue().trim();
>         
>         if (defaultSearchFieldName!=null) {
>           SchemaField defaultSearchField = getFields().get(defaultSearchFieldName);
>           if ((defaultSearchField == null) || !defaultSearchField.indexed()) {
>             String msg =  "default search field '" + defaultSearchFieldName + "' not defined or not indexed" ;
>             throw new SolrException(ErrorCode.SERVER_ERROR, msg);
>           }
485a549
>         log.info("default search field in schema is "+defaultSearchFieldName);
487,496d550
<       log.info("default search field in schema is "+defaultSearchFieldName);
<     }
< 
<     node = (Node) xpath.evaluate("/schema/solrQueryParser/@defaultOperator", document, XPathConstants.NODE);
<     if (node==null) {
<       log.debug("using default query parser operator (OR)");
<     } else {
<       queryParserDefaultOperator=node.getNodeValue().trim();
<       log.info("query parser default operator is "+queryParserDefaultOperator);
<     }
498,527c552,560
<     node = (Node) xpath.evaluate("/schema/uniqueKey/text()", document, XPathConstants.NODE);
<     if (node==null) {
<       log.warn("no uniqueKey specified in schema.");
<     } else {
<       uniqueKeyField=getIndexedField(node.getNodeValue().trim());
<       if (null != uniqueKeyField.getDefaultValue()) {
<         String msg = "uniqueKey field ("+uniqueKeyFieldName+
<           ") can not be configured with a default value ("+
<           uniqueKeyField.getDefaultValue()+")";
<         log.error(msg);
<         throw new SolrException(ErrorCode.SERVER_ERROR, msg);
<       }
< 
<       if (!uniqueKeyField.stored()) {
<         log.warn("uniqueKey is not stored - distributed search and MoreLikeThis will not work");
<       }
<       if (uniqueKeyField.multiValued()) {
<         String msg = "uniqueKey field ("+uniqueKeyFieldName+
<           ") can not be configured to be multivalued";
<         log.error(msg);
<         throw new SolrException(ErrorCode.SERVER_ERROR, msg);
<       }
<       uniqueKeyFieldName=uniqueKeyField.getName();
<       uniqueKeyFieldType=uniqueKeyField.getType();
<       log.info("unique key field: "+uniqueKeyFieldName);
<       
<       
<       if( Boolean.FALSE != explicitRequiredProp.get( uniqueKeyFieldName ) ) {
<         uniqueKeyField.required = true;
<         requiredFields.add(uniqueKeyField);
---
>       
>       expression = stepsToPath(SCHEMA, SOLR_QUERY_PARSER, AT + DEFAULT_OPERATOR);
>       node = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);
>       if (node==null) {
>         log.debug("using default query parser operator (OR)");
>       } else {
>         isExplicitQueryParserDefaultOperator = true;
>         queryParserDefaultOperator=node.getNodeValue().trim();
>         log.info("query parser default operator is "+queryParserDefaultOperator);
529d561
<     }
530a563,600
>       
>       expression = stepsToPath(SCHEMA, UNIQUE_KEY, TEXT_FUNCTION);
>       node = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);
>       if (node==null) {
>         log.warn("no " + UNIQUE_KEY + " specified in schema.");
>       } else {
>         uniqueKeyField=getIndexedField(node.getNodeValue().trim());
>         if (null != uniqueKeyField.getDefaultValue()) {
>           String msg = UNIQUE_KEY + " field ("+uniqueKeyFieldName+
>               ") can not be configured with a default value ("+
>               uniqueKeyField.getDefaultValue()+")";
>           log.error(msg);
>           throw new SolrException(ErrorCode.SERVER_ERROR, msg);
>         }
> 
>         if (!uniqueKeyField.stored()) {
>           log.warn(UNIQUE_KEY + " is not stored - distributed search and MoreLikeThis will not work");
>         }
>         if (uniqueKeyField.multiValued()) {
>           String msg = UNIQUE_KEY + " field ("+uniqueKeyFieldName+
>               ") can not be configured to be multivalued";
>           log.error(msg);
>           throw new SolrException(ErrorCode.SERVER_ERROR, msg);
>         }
>         uniqueKeyFieldName=uniqueKeyField.getName();
>         uniqueKeyFieldType=uniqueKeyField.getType();
>         log.info("unique key field: "+uniqueKeyFieldName);
>       
>         
>         if( Boolean.FALSE != explicitRequiredProp.get( uniqueKeyFieldName ) ) {
>           uniqueKeyField.required = true;
>           requiredFields.add(uniqueKeyField);
>         }
>       }                
> 
>       
>       
>       
532,537c602,604
<     
<     
<     
<     dynamicCopyFields = new DynamicCopy[] {};
<     expression = "
<     nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
---
>       dynamicCopyFields = new DynamicCopy[] {};
>       expression = "
>       nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
543,545c610,612
<         String source = DOMUtil.getAttr(attrs,"source","copyField definition");
<         String dest   = DOMUtil.getAttr(attrs,"dest",  "copyField definition");
<         String maxChars = DOMUtil.getAttr(attrs, "maxChars");
---
>         String source = DOMUtil.getAttr(attrs, SOURCE, COPY_FIELD + " definition");
>         String dest   = DOMUtil.getAttr(attrs, DESTINATION,  COPY_FIELD + " definition");
>         String maxChars = DOMUtil.getAttr(attrs, MAX_CHARS);
551c618
<             log.warn("Couldn't parse maxChars attribute for copyField from "
---
>             log.warn("Couldn't parse " + MAX_CHARS + " attribute for " + COPY_FIELD + " from "
557,558c624,625
<           String msg = "uniqueKey field ("+uniqueKeyFieldName+
<             ") can not be the dest of a copyField (src="+source+")";
---
>           String msg = UNIQUE_KEY + " field ("+uniqueKeyFieldName+
>             ") can not be the " + DESTINATION + " of a " + COPY_FIELD + "(" + SOURCE + "=" +source+")";
565c632
<      }
---
>       }
567c634
<       for (Map.Entry<SchemaField, Integer> entry : copyFieldTargetCounts.entrySet())    {
---
>       for (Map.Entry<SchemaField, Integer> entry : copyFieldTargetCounts.entrySet()) {
570,571c637,638
<                       "and destination for multiple copyFields ("+
<                       entry.getValue()+")");
---
>               "and destination for multiple " + COPY_FIELDS + " ("+
>               entry.getValue()+")");
575d641
< 
591a658,668
> 
> 
> 
> 
>   private String stepsToPath(String... steps) {
>     StringBuilder builder = new StringBuilder();
>     for (String step : steps) { builder.append(SLASH).append(step); }
>     return builder.toString();
>   }
> 
>   
654c731,732
<     log.debug("copyField source='" + source + "' dest='" + dest + "' maxChars=" + maxChars);
---
>     log.debug(COPY_FIELD + " " + SOURCE + "='" + source + "' " + DESTINATION + "='" + dest
>               + "' " + MAX_CHARS + "=" + maxChars);
1148a1227,1354
> 
>   
> 
> 
>   public SimpleOrderedMap<Object> getNamedPropertyValues() {
>     SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<Object>();
>     topLevel.add(NAME, getSchemaName());
>     topLevel.add(VERSION, getVersion());
>     if (null != uniqueKeyFieldName) {
>       topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);
>     }
>     if (null != defaultSearchFieldName) {
>       topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);
>     }
>     if (isExplicitQueryParserDefaultOperator) {
>       SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<Object>();
>       solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);
>       topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);
>     }
>     if (isExplicitSimilarity) {
>       topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());
>     }
>     List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<SimpleOrderedMap<Object>>();
>     SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<String,FieldType>(fieldTypes);
>     for (FieldType fieldType : sortedFieldTypes.values()) {
>       fieldTypeProperties.add(fieldType.getNamedPropertyValues(false));
>     }
>     topLevel.add(FIELD_TYPES, fieldTypeProperties);  
>     List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<SimpleOrderedMap<Object>>();
>     SortedSet<String> fieldNames = new TreeSet<String>(fields.keySet());
>     for (String fieldName : fieldNames) {
>       fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(false));
>     }
>     topLevel.add(FIELDS, fieldProperties);
>     List<SimpleOrderedMap<Object>> dynamicFieldProperties = new ArrayList<SimpleOrderedMap<Object>>();
>     for (IndexSchema.DynamicField dynamicField : dynamicFields) {
>       if ( ! dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) { 
>         dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(false));
>       }
>     }
>     topLevel.add(DYNAMIC_FIELDS, dynamicFieldProperties);
>     topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));
>     return topLevel;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   public List<SimpleOrderedMap<Object>> getCopyFieldProperties
>       (boolean showDetails, Set<String> requestedSourceFields, Set<String> requestedDestinationFields) {
>     List<SimpleOrderedMap<Object>> copyFieldProperties = new ArrayList<SimpleOrderedMap<Object>>();
>     SortedMap<String,List<CopyField>> sortedCopyFields = new TreeMap<String,List<CopyField>>(copyFieldsMap);
>     for (List<CopyField> copyFields : sortedCopyFields.values()) {
>       Collections.sort(copyFields, new Comparator<CopyField>() {
>         @Override
>         public int compare(CopyField cf1, CopyField cf2) {
>           
>           return cf1.getDestination().getName().compareTo(cf2.getDestination().getName());
>         }
>       });
>       for (CopyField copyField : copyFields) {
>         final String source = copyField.getSource().getName();
>         final String destination = copyField.getDestination().getName();
>         if (   (null == requestedSourceFields      || requestedSourceFields.contains(source))
>             && (null == requestedDestinationFields || requestedDestinationFields.contains(destination))) {
>           SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();
>           props.add(SOURCE, source);
>           props.add(DESTINATION, destination);
>             if (0 != copyField.getMaxChars()) {
>               props.add(MAX_CHARS, copyField.getMaxChars());
>             }
>           copyFieldProperties.add(props);
>         }
>       }
>     }
>     for (IndexSchema.DynamicCopy dynamicCopy : dynamicCopyFields) {
>       final String source = dynamicCopy.getRegex();
>       final String destination = dynamicCopy.getDestFieldName();
>       if (   (null == requestedSourceFields      || requestedSourceFields.contains(source))
>           && (null == requestedDestinationFields || requestedDestinationFields.contains(destination))) {
>         SimpleOrderedMap<Object> dynamicCopyProps = new SimpleOrderedMap<Object>();
> 
>         dynamicCopyProps.add(SOURCE, dynamicCopy.getRegex());
>         if (showDetails) {
>           IndexSchema.DynamicField sourceDynamicBase = dynamicCopy.getSourceDynamicBase();
>           if (null != sourceDynamicBase) {
>             dynamicCopyProps.add(SOURCE_DYNAMIC_BASE, sourceDynamicBase.getRegex());
>           } else if (source.contains("*")) {
>             List<String> sourceExplicitFields = new ArrayList<String>();
>             Pattern pattern = Pattern.compile(source.replace("*", ".*"));   
>             for (String field : fields.keySet()) {
>               if (pattern.matcher(field).matches()) {
>                 sourceExplicitFields.add(field);
>               }
>             }
>             if (sourceExplicitFields.size() > 0) {
>               Collections.sort(sourceExplicitFields);
>               dynamicCopyProps.add(SOURCE_EXPLICIT_FIELDS, sourceExplicitFields);
>             }
>           }
>         }
>         
>         dynamicCopyProps.add(DESTINATION, dynamicCopy.getDestFieldName());
>         if (showDetails) {
>           IndexSchema.DynamicField destDynamicBase = dynamicCopy.getDestDynamicBase();
>           if (null != destDynamicBase) {
>             dynamicCopyProps.add(DESTINATION_DYNAMIC_BASE, destDynamicBase.getRegex());
>           }
>         }
> 
>         if (0 != dynamicCopy.getMaxChars()) {
>           dynamicCopyProps.add(MAX_CHARS, dynamicCopy.getMaxChars());
>         }
> 
>         copyFieldProperties.add(dynamicCopyProps);
>       }
>     }
>     return copyFieldProperties;
>   }
