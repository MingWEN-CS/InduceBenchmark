27d26
< import org.apache.lucene.analysis.util.ResourceLoader;
28a28
> import org.apache.solr.common.SolrException.ErrorCode;
37c37,43
< import org.w3c.dom.*;
---
> import org.slf4j.Logger;
> import org.slf4j.LoggerFactory;
> import org.w3c.dom.Document;
> import org.w3c.dom.Element;
> import org.w3c.dom.NamedNodeMap;
> import org.w3c.dom.Node;
> import org.w3c.dom.NodeList;
42,43d47
< import org.slf4j.Logger;
< import org.slf4j.LoggerFactory;
79a84
>   public DynamicField[] getDynamicFields() { return dynamicFields; }
88a94,95
>   public Map<String,List<CopyField>> getCopyFieldsMap() { return Collections.unmodifiableMap(copyFieldsMap); }
>   
89a97,98
>   public DynamicCopy[] getDynamicCopyFields() { return dynamicCopyFields; }
> 
94,95c103
<   private Map<SchemaField, Integer> copyFieldTargetCounts
<     = new HashMap<SchemaField, Integer>();
---
>   private Map<SchemaField, Integer> copyFieldTargetCounts = new HashMap<SchemaField, Integer>();
125,126c133
<   public SolrResourceLoader getResourceLoader()
<   {
---
>   public SolrResourceLoader getResourceLoader() {
212,213d218
< 
< 
290,291c295
<   public void refreshAnalyzers()
<   {
---
>   public void refreshAnalyzers() {
392c396
<           throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,"Unknown fieldtype '" + type + "' specified on field " + name);
---
>           throw new SolrException(ErrorCode.BAD_REQUEST,"Unknown fieldtype '" + type + "' specified on field " + name);
407c411
<             throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg );
---
>             throw new SolrException(ErrorCode.SERVER_ERROR, msg );
419,420c423,430
<           
<           addDynamicField(dFields, f);
---
>           if (isValidDynamicFieldName(name)) {
>             
>             addDynamicField(dFields, f);
>           } else {
>             String msg = "Dynamic field name '" + name 
>                 + "' should have either a leading or a trailing asterisk, and no others.";
>             throw new SolrException(ErrorCode.SERVER_ERROR, msg);
>           }
457c467
<           throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);
---
>           throw new SolrException(ErrorCode.SERVER_ERROR, msg);
473c483
<           throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, msg );
---
>           throw new SolrException(ErrorCode.SERVER_ERROR, msg);
497c507
<         throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, msg );
---
>         throw new SolrException(ErrorCode.SERVER_ERROR, msg);
507c517
<         throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, msg );
---
>         throw new SolrException(ErrorCode.SERVER_ERROR, msg);
549c559
<           throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);
---
>           throw new SolrException(ErrorCode.SERVER_ERROR, msg);
573c583
<       throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,"Schema Parsing Failed: " + e.getMessage(), e);
---
>       throw new SolrException(ErrorCode.SERVER_ERROR, "Schema Parsing Failed: " + e.getMessage(), e);
578d587
< 
580a590,599
>   
>   private boolean isValidDynamicFieldName(String name) {
>     if (name.startsWith("*") || name.endsWith("*")) {
>       int count = 0;
>       for (int pos = 0 ; pos < name.length() && -1 != (pos = name.indexOf('*', pos)) ; ++pos) ++count;
>       if (1 == count) return true;
>     }
>     return false;
>   }
>   
582,584c601,603
<     boolean dup = isDuplicateDynField(dFields, f);
<     if( !dup ) {
<       addDynamicFieldNoDupCheck(dFields, f);
---
>     if (isDuplicateDynField(dFields, f)) {
>       String msg = "[schema.xml] Duplicate DynamicField definition for '" + f.getName() + "'";
>       throw new SolrException(ErrorCode.SERVER_ERROR, msg);
586,589c605
<       String msg = "[schema.xml] Duplicate DynamicField definition for '"
<               + f.getName() + "'";
< 
<       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);
---
>       addDynamicFieldNoDupCheck(dFields, f);
597c613
<   public void registerDynamicField(SchemaField ... f) {
---
>   public void registerDynamicFields(SchemaField... fields) {
599,600c615,618
<     for (SchemaField field : f) {
<       if (isDuplicateDynField(dynFields, field) == false) {
---
>     for (SchemaField field : fields) {
>       if (isDuplicateDynField(dynFields, field)) {
>         log.debug("dynamic field already exists: dynamic field: [" + field.getName() + "]");
>       } else {
603,604d620
<       } else {
<         log.debug("dynamic field already exists: dynamic field: [" + field.getName() + "]");
617,618c633,634
<     for( DynamicField df : dFields ) {
<       if( df.regex.equals( f.name ) ) return true;
---
>     for (DynamicField df : dFields) {
>       if (df.getRegex().equals(f.name)) return true;
623,624c639
<   public void registerCopyField( String source, String dest )
<   {
---
>   public void registerCopyField( String source, String dest ) {
637,654c652,672
<   public void registerCopyField( String source, String dest, int maxChars )
<   {
<     boolean sourceIsPattern = isWildCard(source);
<     boolean destIsPattern   = isWildCard(dest);
< 
<     log.debug("copyField source='"+source+"' dest='"+dest+"' maxChars='"+maxChars);
<     SchemaField d = getFieldOrNull(dest);
<     if(d == null){
<       throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, "copyField destination :'"+dest+"' does not exist" );
<     }
< 
<     if(sourceIsPattern) {
<       if( destIsPattern ) {
<         DynamicField df = null;
<         for( DynamicField dd : dynamicFields ) {
<           if( dd.regex.equals( dest ) ) {
<             df = dd;
<             break;
---
>   public void registerCopyField(String source, String dest, int maxChars) {
>     log.debug("copyField source='" + source + "' dest='" + dest + "' maxChars=" + maxChars);
> 
>     DynamicField destDynamicField = null;
>     SchemaField destSchemaField = fields.get(dest);
>     SchemaField sourceSchemaField = fields.get(source);
>     
>     DynamicField sourceDynamicBase = null;
>     DynamicField destDynamicBase = null;
>     
>     boolean sourceIsDynamicFieldReference = false;
>     
>     if (null == destSchemaField || null == sourceSchemaField) {
>       
>       for (DynamicField dynamicField : dynamicFields) {
>         if (null == sourceSchemaField && ! sourceIsDynamicFieldReference) {
>           if (dynamicField.matches(source)) {
>             sourceIsDynamicFieldReference = true;
>             if ( ! source.equals(dynamicField.getRegex())) {
>               sourceDynamicBase = dynamicField;
>             }
657,658c675,683
<         if( df == null ) {
<           throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, "copyField dynamic destination must match a dynamicField." );
---
>         if (null == destSchemaField) {
>           if (dest.equals(dynamicField.getRegex())) {
>             destDynamicField = dynamicField;
>             destSchemaField = dynamicField.prototype;
>           } else if (dynamicField.matches(dest)) {
>             destSchemaField = dynamicField.makeSchemaField(dest);
>             destDynamicField = new DynamicField(destSchemaField);
>             destDynamicBase = dynamicField;
>           }
660c685
<         registerDynamicCopyField(new DynamicDestCopy(source, df, maxChars ));
---
>         if (null != destSchemaField && (null != sourceSchemaField || sourceIsDynamicFieldReference)) break;
662,668d686
<       else {
<         registerDynamicCopyField(new DynamicCopy(source, d, maxChars));
<       }
<     } 
<     else if( destIsPattern ) {
<       String msg =  "copyField only supports a dynamic destination if the source is also dynamic" ;
<       throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, msg );
670,677c688,723
<     else {
<       
<       SchemaField f = getField(source);
< 
<       List<CopyField> copyFieldList = copyFieldsMap.get(source);
<       if (copyFieldList == null) {
<         copyFieldList = new ArrayList<CopyField>();
<         copyFieldsMap.put(source, copyFieldList);
---
>     if (null == sourceSchemaField && ! sourceIsDynamicFieldReference) {
>       String msg = "copyField source :'" + source + "' is not an explicit field and doesn't match a dynamicField.";
>       throw new SolrException(ErrorCode.SERVER_ERROR, msg);
>     }
>     if (null == destSchemaField) {
>       String msg = "copyField dest :'" + dest + "' is not an explicit field and doesn't match a dynamicField.";
>       throw new SolrException(ErrorCode.SERVER_ERROR, msg);
>     }
>     if (sourceIsDynamicFieldReference) {
>       if (null != destDynamicField) { 
>         registerDynamicCopyField(new DynamicCopy(source, destDynamicField, maxChars, sourceDynamicBase, destDynamicBase));
>         incrementCopyFieldTargetCount(destSchemaField);
>       } else {                        
>         destDynamicField = new DynamicField(destSchemaField);
>         registerDynamicCopyField(new DynamicCopy(source, destDynamicField, maxChars, sourceDynamicBase, null));
>         incrementCopyFieldTargetCount(destSchemaField);
>       }
>     } else {                          
>       if (null != destDynamicField) { 
>         if (destDynamicField.pattern instanceof DynamicReplacement.DynamicPattern.NameEquals) {
>           
>           registerDynamicCopyField(new DynamicCopy(source, destDynamicField, maxChars, sourceDynamicBase, destDynamicBase));
>           incrementCopyFieldTargetCount(destSchemaField);
>         } else {
>           String msg = "copyField only supports a dynamic destination with an asterisk "
>                      + "if the source is also dynamic with an asterisk";
>           throw new SolrException(ErrorCode.SERVER_ERROR, msg);
>         }
>       } else {                        
>         List<CopyField> copyFieldList = copyFieldsMap.get(source);
>         if (copyFieldList == null) {
>           copyFieldList = new ArrayList<CopyField>();
>           copyFieldsMap.put(source, copyFieldList);
>         }
>         copyFieldList.add(new CopyField(sourceSchemaField, destSchemaField, maxChars));
>         incrementCopyFieldTargetCount(destSchemaField);
679,681d724
<       copyFieldList.add(new CopyField(f, d, maxChars));
< 
<       copyFieldTargetCounts.put(d, (copyFieldTargetCounts.containsKey(d) ? copyFieldTargetCounts.get(d) + 1 : 1));
685,686c728,732
<   private void registerDynamicCopyField( DynamicCopy dcopy )
<   {
---
>   private void incrementCopyFieldTargetCount(SchemaField dest) {
>     copyFieldTargetCounts.put(dest, copyFieldTargetCounts.containsKey(dest) ? copyFieldTargetCounts.get(dest) + 1 : 1);
>   }
>   
>   private void registerDynamicCopyField( DynamicCopy dcopy ) {
696,703c742
<     log.trace("Dynamic Copy Field:" + dcopy );
<   }
< 
<   private static Object[] append(Object[] orig, Object item) {
<     Object[] newArr = (Object[])java.lang.reflect.Array.newInstance(orig.getClass().getComponentType(), orig.length+1);
<     System.arraycopy(orig, 0, newArr, 0, orig.length);
<     newArr[orig.length] = item;
<     return newArr;
---
>     log.trace("Dynamic Copy Field:" + dcopy);
731,733c770,785
<   static abstract class DynamicReplacement implements Comparable<DynamicReplacement> {
<     final static int STARTS_WITH=1;
<     final static int ENDS_WITH=2;
---
>   public static abstract class DynamicReplacement implements Comparable<DynamicReplacement> {
>     abstract protected static class DynamicPattern {
>       protected final String regex;
>       protected final String fixedStr;
> 
>       protected DynamicPattern(String regex, String fixedStr) { this.regex = regex; this.fixedStr = fixedStr; }
> 
>       static DynamicPattern createPattern(String regex) {
>         if (regex.startsWith("*")) { return new NameEndsWith(regex); }
>         else if (regex.endsWith("*")) { return new NameStartsWith(regex); }
>         else { return new NameEquals(regex);
>         }
>       }
>       
>       
>       abstract boolean matches(String name);
735,736c787,788
<     final String regex;
<     final int type;
---
>       
>       abstract String remainder(String name);
738c790,794
<     final String str;
---
>       
>       abstract String subst(String replacement);
>       
>       
>       public int length() { return regex.length(); }
740,744c796,800
<     protected DynamicReplacement(String regex) {
<       this.regex = regex;
<       if (regex.startsWith("*")) {
<         type=ENDS_WITH;
<         str=regex.substring(1);
---
>       private static class NameStartsWith extends DynamicPattern {
>         NameStartsWith(String regex) { super(regex, regex.substring(0, regex.length() - 1)); }
>         boolean matches(String name) { return name.startsWith(fixedStr); }
>         String remainder(String name) { return name.substring(fixedStr.length()); }
>         String subst(String replacement) { return fixedStr + replacement; }
746,748c802,806
<       else if (regex.endsWith("*")) {
<         type=STARTS_WITH;
<         str=regex.substring(0,regex.length()-1);
---
>       private static class NameEndsWith extends DynamicPattern {
>         NameEndsWith(String regex) { super(regex, regex.substring(1)); }
>         boolean matches(String name) { return name.endsWith(fixedStr); }
>         String remainder(String name) { return name.substring(0, name.length() - fixedStr.length()); }
>         String subst(String replacement) { return replacement + fixedStr; }
750,751c808,812
<       else {
<         throw new RuntimeException("dynamic field name must start or end with *");
---
>       private static class NameEquals extends DynamicPattern {
>         NameEquals(String regex) { super(regex, regex); }
>         boolean matches(String name) { return regex.equals(name); }
>         String remainder(String name) { return ""; }
>         String subst(String replacement) { return fixedStr; }
755,758c816,821
<     public boolean matches(String name) {
<       if (type==STARTS_WITH && name.startsWith(str)) return true;
<       else if (type==ENDS_WITH && name.endsWith(str)) return true;
<       else return false;
---
>     protected DynamicPattern pattern;
> 
>     public boolean matches(String name) { return pattern.matches(name); }
> 
>     protected DynamicReplacement(String regex) {
>       pattern = DynamicPattern.createPattern(regex);
770c833,838
<       return other.regex.length() - regex.length();
---
>       return other.pattern.length() - pattern.length();
>     }
>     
>     
>     public String getRegex() {
>       return pattern.regex;
775,781c843
<   
<   
<   
<   
<   
<   
<   final static class DynamicField extends DynamicReplacement {
---
>   public final static class DynamicField extends DynamicReplacement {
804,806c866,870
<   static class DynamicCopy extends DynamicReplacement {
<     final SchemaField targetField;
<     final int maxChars;
---
>   public static class DynamicCopy extends DynamicReplacement {
>     private final DynamicField destination;
>     
>     private final int maxChars;
>     public int getMaxChars() { return maxChars; }
808,810c872,873
<     DynamicCopy(String regex, SchemaField targetField) {
<       this(regex, targetField, CopyField.UNLIMITED);
<     }
---
>     final DynamicField sourceDynamicBase;
>     public DynamicField getSourceDynamicBase() { return sourceDynamicBase; }
812,814c875,881
<     DynamicCopy(String regex, SchemaField targetField, int maxChars) {
<       super(regex);
<       this.targetField = targetField;
---
>     final DynamicField destDynamicBase;
>     public DynamicField getDestDynamicBase() { return destDynamicBase; }
> 
>     DynamicCopy(String sourceRegex, DynamicField destination, int maxChars, 
>                 DynamicField sourceDynamicBase, DynamicField destDynamicBase) {
>       super(sourceRegex);
>       this.destination = destination;
816,820c883,884
<     }
<     
<     public SchemaField getTargetField( String sourceField )
<     {
<       return targetField;
---
>       this.sourceDynamicBase = sourceDynamicBase;
>       this.destDynamicBase = destDynamicBase;
823,827c887
<     @Override
<     public String toString() {
<       return targetField.toString();
<     }
<   }
---
>     public String getDestFieldName() { return destination.getRegex(); }
829,856d888
<   static class DynamicDestCopy extends DynamicCopy 
<   {
<     final DynamicField dynamic;
<     
<     final int dtype;
<     final String dstr;
<     
<     DynamicDestCopy(String source, DynamicField dynamic) {
<       this(source, dynamic, CopyField.UNLIMITED);
<     }
<       
<     DynamicDestCopy(String source, DynamicField dynamic, int maxChars) {
<       super(source, dynamic.prototype, maxChars);
<       this.dynamic = dynamic;
<       
<       String dest = dynamic.regex;
<       if (dest.startsWith("*")) {
<         dtype=ENDS_WITH;
<         dstr=dest.substring(1);
<       }
<       else if (dest.endsWith("*")) {
<         dtype=STARTS_WITH;
<         dstr=dest.substring(0,dest.length()-1);
<       }
<       else {
<         throw new RuntimeException("dynamic copyField destination name must start or end with *");
<       }
<     }
858,866c890,897
<     @Override
<     public SchemaField getTargetField( String sourceField )
<     {
<       String dyn = ( type==STARTS_WITH ) 
<         ? sourceField.substring( str.length() )
<         : sourceField.substring( 0, sourceField.length()-str.length() );
<       
<       String name = (dtype==STARTS_WITH) ? (dstr+dyn) : (dyn+dstr);
<       return dynamic.makeSchemaField( name );
---
> 
> 
> 
> 
>     public SchemaField getTargetField(String sourceField) {
>       String remainder = pattern.remainder(sourceField);
>       String targetFieldName = destination.pattern.subst(remainder);
>       return destination.makeSchemaField(targetFieldName);
868a900
>     
871c903
<       return targetField.toString();
---
>       return destination.prototype.toString();
875d906
< 
886c917
<      if (df.matches(fieldName)) return df.regex;
---
>      if (df.matches(fieldName)) return df.getRegex();
897d927
< 
899c929
<     if(fields.containsKey(fieldName)) {
---
>     if (fields.containsKey(fieldName)) {
904c934
<       if (df.matches(fieldName)) return true;
---
>       if (fieldName.equals(df.getRegex())) return true;
967c997
<     throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,"undefined field: \""+fieldName+"\"");
---
>     throw new SolrException(ErrorCode.BAD_REQUEST,"undefined field: \""+fieldName+"\"");
1036c1066
<     throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,"undefined field "+fieldName);
---
>     throw new SolrException(ErrorCode.BAD_REQUEST,"undefined field "+fieldName);
1064a1095,1099
>     for (DynamicCopy dynamicCopy : dynamicCopyFields) {
>       if (dynamicCopy.getDestFieldName().equals(destField)) {
>         sf.add(getField(dynamicCopy.getRegex()));
>       }
>     }
1083,1084c1118
<     if (fixedCopyFields != null)
<     {
---
>     if (null != fixedCopyFields) {
1096,1097c1130
<   public boolean isCopyFieldTarget( SchemaField f )
<   {
---
>   public boolean isCopyFieldTarget( SchemaField f ) {
1100,1108d1132
< 
<   
< 
< 
< 
<   private static boolean isWildCard(String name) {
<     return  name.startsWith("*") || name.endsWith("*");
<   }
< 
