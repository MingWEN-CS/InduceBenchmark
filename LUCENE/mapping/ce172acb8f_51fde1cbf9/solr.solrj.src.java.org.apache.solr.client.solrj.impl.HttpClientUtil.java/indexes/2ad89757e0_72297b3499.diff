22,23d21
< import java.lang.reflect.Constructor;
< import java.lang.reflect.InvocationTargetException;
26a25,26
> import java.util.concurrent.TimeUnit;
> import java.util.function.Consumer;
39a40
> import org.apache.http.client.CredentialsProvider;
41,45c42,49
< import org.apache.http.client.params.ClientParamBean;
< import org.apache.http.conn.ClientConnectionManager;
< import org.apache.http.conn.scheme.Scheme;
< import org.apache.http.conn.ssl.SSLSocketFactory;
< import org.apache.http.conn.ssl.X509HostnameVerifier;
---
> import org.apache.http.client.config.RequestConfig;
> import org.apache.http.client.config.RequestConfig.Builder;
> import org.apache.http.client.protocol.HttpClientContext;
> import org.apache.http.config.Registry;
> import org.apache.http.config.RegistryBuilder;
> import org.apache.http.conn.ConnectionKeepAliveStrategy;
> import org.apache.http.conn.socket.ConnectionSocketFactory;
> import org.apache.http.conn.socket.PlainConnectionSocketFactory;
46a51
> import org.apache.http.impl.client.BasicCredentialsProvider;
48d52
< import org.apache.http.impl.client.DefaultHttpClient;
50,53c54,55
< import org.apache.http.impl.client.SystemDefaultHttpClient;
< import org.apache.http.impl.conn.PoolingClientConnectionManager;
< import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager; 
< import org.apache.http.params.HttpConnectionParams;
---
> import org.apache.http.impl.client.HttpClientBuilder;
> import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
58a61
> import org.apache.solr.common.util.ObjectReleaseTracker;
64a68,71
> 
> 
> 
> 
66a74
>   private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
67a76,77
>   private static final int DEFAULT_CONNECT_TIMEOUT = 60000;
>   private static final int DEFAULT_SO_TIMEOUT = 600000;
69,73c79,83
<   public static final String PROP_SO_TIMEOUT = "socketTimeout";
<   
<   
<   
<   public static final String PROP_CONNECTION_TIMEOUT = "connTimeout";
---
>   private static final int VALIDATE_AFTER_INACTIVITY_DEFAULT = 3000;
>   private static final int EVICT_IDLE_CONNECTIONS_DEFAULT = 50000;
>   private static final String VALIDATE_AFTER_INACTIVITY = "validateAfterInactivity";
>   private static final String EVICT_IDLE_CONNECTIONS = "evictIdleConnections";
> 
83,84d92
<   public static final String PROP_FOLLOW_REDIRECTS = "followRedirects";
<   
91c99,113
<   private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
---
>   
>   
>   
>   
>   
>   public static final String PROP_FOLLOW_REDIRECTS = "followRedirects";
>   
>   
>   
>   
>   public static final String PROP_SO_TIMEOUT = "socketTimeout";
>   
>   
>   
>   public static final String PROP_CONNECTION_TIMEOUT = "connTimeout";
96,98c118
<   private static HttpClientConfigurer configurer = new HttpClientConfigurer();
< 
<   private static final List<HttpRequestInterceptor> interceptors = Collections.synchronizedList(new ArrayList<HttpRequestInterceptor>());
---
>   private static volatile SolrHttpClientBuilder httpClientBuilder;
99a120
>   private static SolrHttpClientContextBuilder httpClientRequestContextBuilder = new SolrHttpClientContextBuilder();
101,105c122,123
< 
< 
< 
<   public static void setConfigurer(HttpClientConfigurer newConfigurer) {
<     configurer = newConfigurer;
---
>   static {
>     resetHttpClientBuilder();
108,109c126,127
<   public static HttpClientConfigurer getConfigurer() {
<     return configurer;
---
>   public static abstract class SchemaRegistryProvider {
>     public abstract Registry<ConnectionSocketFactory> getSchemaRegistry();
112,114c130,131
<   
< 
< 
---
>   private static volatile SchemaRegistryProvider schemaRegistryProvider;
>   private static volatile String cookiePolicy;
115a133,135
>   private static final List<HttpRequestInterceptor> interceptors = Collections.synchronizedList(new ArrayList<HttpRequestInterceptor>());
>   
>   private static class DynamicInterceptor implements HttpRequestInterceptor {
116a137,139
>     @Override
>     public void process(HttpRequest request, HttpContext context) throws HttpException, IOException {
>       interceptors.forEach(new Consumer<HttpRequestInterceptor>() {
117a141,149
>         @Override
>         public void accept(HttpRequestInterceptor interceptor) {
>           try {
>             interceptor.process(request, context);
>           } catch (Exception e) {
>             logger.error("", e);
>           }
>         }
>       });
119,122d150
<   public static CloseableHttpClient createClient(final SolrParams params) {
<     final ModifiableSolrParams config = new ModifiableSolrParams(params);
<     if (logger.isDebugEnabled()) {
<       logger.debug("Creating new http client, config:" + config);
124,126d151
<     final DefaultHttpClient httpClient = HttpClientFactory.createHttpClient();
<     configureClient(httpClient, config);
<     return httpClient;
128a154,156
>   public static void setHttpClientBuilder(SolrHttpClientBuilder newHttpClientBuilder) {
>     httpClientBuilder = newHttpClientBuilder;
>   }
130,140c158,159
< 
< 
< 
<   public static CloseableHttpClient createClient(final SolrParams params, ClientConnectionManager cm) {
<     final ModifiableSolrParams config = new ModifiableSolrParams(params);
<     if (logger.isDebugEnabled()) {
<       logger.debug("Creating new http client, config:" + config);
<     }
<     final DefaultHttpClient httpClient = HttpClientFactory.createHttpClient(cm);
<     configureClient(httpClient, config);
<     return httpClient;
---
>   public static void setHttpClientProvider(SolrHttpClientBuilder newHttpClientBuilder) {
>     httpClientBuilder = newHttpClientBuilder;
142a162,164
>   public static void setSchemeRegistryProvider(SchemaRegistryProvider newRegistryProvider) {
>     schemaRegistryProvider = newRegistryProvider;
>   }
144,154c166,167
< 
< 
< 
<   public static void configureClient(final DefaultHttpClient httpClient,
<       SolrParams config) {
<     configurer.configure(httpClient,  config);
<     synchronized(interceptors) {
<       for(HttpRequestInterceptor interceptor: interceptors) {
<         httpClient.addRequestInterceptor(interceptor);
<       }
<     }
---
>   public static SolrHttpClientBuilder getHttpClientBuilder() {
>     return httpClientBuilder;
157,162c170,171
<   public static void close(HttpClient httpClient) { 
<     if (httpClient instanceof CloseableHttpClient) {
<       org.apache.solr.common.util.IOUtils.closeQuietly((CloseableHttpClient) httpClient);
<     } else {
<       httpClient.getConnectionManager().shutdown();
<     }
---
>   public static SchemaRegistryProvider getSchemaRegisteryProvider() {
>     return schemaRegistryProvider;
163a173,175
>   
>   public static void resetHttpClientBuilder() {
>     schemaRegistryProvider = new SchemaRegistryProvider() {
165,167c177,183
<   public static void addRequestInterceptor(HttpRequestInterceptor interceptor) {
<     interceptors.add(interceptor);
<   }
---
>       @Override
>       public Registry<ConnectionSocketFactory> getSchemaRegistry() {
>         return RegistryBuilder.<ConnectionSocketFactory> create()
>             .register("http", PlainConnectionSocketFactory.getSocketFactory()).build();
>       }
>     };
>     httpClientBuilder = SolrHttpClientBuilder.create();
169,170d184
<   public static void removeRequestInterceptor(HttpRequestInterceptor interceptor) {
<     interceptors.remove(interceptor);
172d185
< 
173a187,188
>   
> 
178a194,195
>   public static CloseableHttpClient createClient(SolrParams params) {
>     PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager(schemaRegistryProvider.getSchemaRegistry());
180,189c197,202
<   public static void setAllowCompression(DefaultHttpClient httpClient,
<       boolean allowCompression) {
<     httpClient
<         .removeRequestInterceptorByClass(UseCompressionRequestInterceptor.class);
<     httpClient
<         .removeResponseInterceptorByClass(UseCompressionResponseInterceptor.class);
<     if (allowCompression) {
<       httpClient.addRequestInterceptor(new UseCompressionRequestInterceptor());
<       httpClient
<           .addResponseInterceptor(new UseCompressionResponseInterceptor());
---
>     return createClient(params, cm);
>   }
>   
>   public static CloseableHttpClient createClient(SolrParams params, PoolingHttpClientConnectionManager cm) {
>     if (params == null) {
>       params = new ModifiableSolrParams();
190a204,205
>     
>     return createClient(params, cm, false);
192c207
< 
---
>   
196a212,224
>   public static CloseableHttpClient createClient(final SolrParams params, PoolingHttpClientConnectionManager cm, boolean sharedConnectionManager) {
>     final ModifiableSolrParams config = new ModifiableSolrParams(params);
>     if (logger.isDebugEnabled()) {
>       logger.debug("Creating new http client, config:" + config);
>     }
>  
>     if (params.get(PROP_SO_TIMEOUT) != null || params.get(PROP_CONNECTION_TIMEOUT) != null) {
>       throw new SolrException(ErrorCode.SERVER_ERROR, "The socket connect and read timeout cannot be set here and must be set");
>     }
>     
>     cm.setMaxTotal(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000));
>     cm.setDefaultMaxPerRoute(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000));
>     cm.setValidateAfterInactivity(Integer.getInteger(VALIDATE_AFTER_INACTIVITY, VALIDATE_AFTER_INACTIVITY_DEFAULT));
197a226,227
>     
>     HttpClientBuilder newHttpClientBuilder = HttpClientBuilder.create();
199,203c229,230
<   public static void setBasicAuth(DefaultHttpClient httpClient,
<       String basicAuthUser, String basicAuthPass) {
<     if (basicAuthUser != null && basicAuthPass != null) {
<       httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY,
<           new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));
---
>     if (sharedConnectionManager) {
>       newHttpClientBuilder.setConnectionManagerShared(true);
205c232
<       httpClient.getCredentialsProvider().clear();
---
>       newHttpClientBuilder.setConnectionManagerShared(false);
207,211c234,241
<   }
< 
<   
< 
< 
---
>     
>     ConnectionKeepAliveStrategy keepAliveStrat = new ConnectionKeepAliveStrategy() {
>       @Override
>       public long getKeepAliveDuration(HttpResponse response, HttpContext context) {
>         
>         return -1;
>       }
>     };
212a243,251
>     if (httpClientBuilder.getAuthSchemeRegistryProvider() != null) {
>       newHttpClientBuilder.setDefaultAuthSchemeRegistry(httpClientBuilder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry());
>     }
>     if (httpClientBuilder.getCookieSpecRegistryProvider() != null) {
>       newHttpClientBuilder.setDefaultCookieSpecRegistry(httpClientBuilder.getCookieSpecRegistryProvider().getCookieSpecRegistry());
>     }
>     if (httpClientBuilder.getCredentialsProviderProvider() != null) {
>       newHttpClientBuilder.setDefaultCredentialsProvider(httpClientBuilder.getCredentialsProviderProvider().getCredentialsProvider());
>     }
214,215c253
<   public static void setMaxConnectionsPerHost(HttpClient httpClient,
<       int max) {
---
>     newHttpClientBuilder.addInterceptorLast(new DynamicInterceptor());
217,223c255,263
<     if (httpClient.getConnectionManager() instanceof ThreadSafeClientConnManager) {
<       ThreadSafeClientConnManager mgr = (ThreadSafeClientConnManager)httpClient.getConnectionManager();
<       mgr.setDefaultMaxPerRoute(max);
<     } else if (httpClient.getConnectionManager() instanceof PoolingClientConnectionManager) {
<       PoolingClientConnectionManager mgr = (PoolingClientConnectionManager)httpClient.getConnectionManager();
<       mgr.setDefaultMaxPerRoute(max);
<     }
---
>     newHttpClientBuilder = newHttpClientBuilder.setKeepAliveStrategy(keepAliveStrat)
>         .evictIdleConnections((long) Integer.getInteger(EVICT_IDLE_CONNECTIONS, EVICT_IDLE_CONNECTIONS_DEFAULT), TimeUnit.MILLISECONDS);
>     
>     HttpClientBuilder builder = setupBuilder(newHttpClientBuilder, params == null ? new ModifiableSolrParams() : params);
>     
>     HttpClient httpClient = builder.setConnectionManager(cm).build();
>     
>     assert ObjectReleaseTracker.track(httpClient);
>     return (CloseableHttpClient) httpClient;
225d264
< 
226a266,280
>   private static HttpClientBuilder setupBuilder(HttpClientBuilder builder, SolrParams config) {
>    
>     Builder requestConfigBuilder = RequestConfig.custom()
>         .setRedirectsEnabled(config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS, false)).setDecompressionEnabled(false)
>         .setConnectTimeout(config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT, DEFAULT_CONNECT_TIMEOUT))
>         .setSocketTimeout(config.getInt(HttpClientUtil.PROP_SO_TIMEOUT, DEFAULT_SO_TIMEOUT));
> 
>     String cpolicy = cookiePolicy;
>     if (cpolicy != null) {
>       requestConfigBuilder.setCookieSpec(cpolicy);
>     }
>     
>     RequestConfig requestConfig = requestConfigBuilder.build();
>     
>     HttpClientBuilder retBuilder = builder.setDefaultRequestConfig(requestConfig);
227a282,283
>     if (config.getBool(HttpClientUtil.PROP_USE_RETRY, true)) {
>       retBuilder = retBuilder.setRetryHandler(new SolrHttpRequestRetryHandler(3));
228a285,287
>     } else {
>       retBuilder = retBuilder.setRetryHandler(NO_RETRY);
>     }
230,232c289,290
< 
<   public static void setMaxConnections(final HttpClient httpClient,
<       int max) {
---
>     final String basicAuthUser = config.get(HttpClientUtil.PROP_BASIC_AUTH_USER);
>     final String basicAuthPass = config.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);
234,239c292,295
<     if (httpClient.getConnectionManager() instanceof ThreadSafeClientConnManager) {
<       ThreadSafeClientConnManager mgr = (ThreadSafeClientConnManager)httpClient.getConnectionManager();
<       mgr.setMaxTotal(max);
<     } else if (httpClient.getConnectionManager() instanceof PoolingClientConnectionManager) {
<       PoolingClientConnectionManager mgr = (PoolingClientConnectionManager)httpClient.getConnectionManager();
<       mgr.setMaxTotal(max);
---
>     if (basicAuthUser != null && basicAuthPass != null) {
>       CredentialsProvider credsProvider = new BasicCredentialsProvider();
>       credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));
>       retBuilder.setDefaultCredentialsProvider(credsProvider);
241,262c297,300
<   }
<   
< 
<   
< 
< 
< 
< 
< 
<   public static void setSoTimeout(HttpClient httpClient, int timeout) {
<     HttpConnectionParams.setSoTimeout(httpClient.getParams(),
<         timeout);
<   }
< 
<   
< 
< 
< 
<   public static void setUseRetry(final DefaultHttpClient httpClient,
<       boolean useRetry) {
<     if (!useRetry) {
<       httpClient.setHttpRequestRetryHandler(NO_RETRY);
---
>     
>     if (config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION, false)) {
>       retBuilder.addInterceptorFirst(new UseCompressionRequestInterceptor());
>       retBuilder.addInterceptorFirst(new UseCompressionResponseInterceptor());
264,266c302
<       
<       
<       httpClient.setHttpRequestRetryHandler(new SolrHttpRequestRetryHandler(3));
---
>       retBuilder.disableContentCompression();
268d303
<   }
270,280c305
<   
< 
< 
< 
< 
< 
< 
<   public static void setConnectionTimeout(final HttpClient httpClient,
<       int timeout) {
<       HttpConnectionParams.setConnectionTimeout(httpClient.getParams(),
<           timeout);
---
>     return retBuilder;
283,285c308
<   
< 
< 
---
>   public static void close(HttpClient httpClient) { 
286a310
>     org.apache.solr.common.util.IOUtils.closeQuietly((CloseableHttpClient) httpClient);
288,290c312
<   public static void setFollowRedirects(HttpClient httpClient,
<       boolean followRedirects) {
<     new ClientParamBean(httpClient.getParams()).setHandleRedirects(followRedirects);
---
>     assert ObjectReleaseTracker.release(httpClient);
293,299c315,316
<   public static void setHostNameVerifier(DefaultHttpClient httpClient,
<       X509HostnameVerifier hostNameVerifier) {
<     Scheme httpsScheme = httpClient.getConnectionManager().getSchemeRegistry().get("https");
<     if (httpsScheme != null) {
<       SSLSocketFactory sslSocketFactory = (SSLSocketFactory) httpsScheme.getSchemeSocketFactory();
<       sslSocketFactory.setHostnameVerifier(hostNameVerifier);
<     }
---
>   public static void addRequestInterceptor(HttpRequestInterceptor interceptor) {
>     interceptors.add(interceptor);
301,303c318,320
<   
<   public static void setStaleCheckingEnabled(final HttpClient httpClient, boolean enabled) {
<     HttpConnectionParams.setStaleCheckingEnabled(httpClient.getParams(), enabled);
---
> 
>   public static void removeRequestInterceptor(HttpRequestInterceptor interceptor) {
>     interceptors.remove(interceptor);
306,307c323,324
<   public static void setTcpNoDelay(final HttpClient httpClient, boolean tcpNoDelay) {
<     HttpConnectionParams.setTcpNoDelay(httpClient.getParams(), tcpNoDelay);
---
>   public static void clearRequestInterceptors() {
>     interceptors.clear();
377,379c394,396
<   public static class HttpClientFactory {
<     private static Class<? extends DefaultHttpClient> defaultHttpClientClass = DefaultHttpClient.class;
<     private static Class<? extends SystemDefaultHttpClient> systemDefaultHttpClientClass = SystemDefaultHttpClient.class;
---
>   public static void setHttpClientRequestContextBuilder(SolrHttpClientContextBuilder httpClientContextBuilder) {
>     httpClientRequestContextBuilder = httpClientContextBuilder;
>   }
380a398
>   
382,390d399
<     public static SystemDefaultHttpClient createHttpClient() {
<       Constructor<? extends SystemDefaultHttpClient> constructor;
<       try {
<         constructor = systemDefaultHttpClientClass.getDeclaredConstructor();
<         return constructor.newInstance();
<       } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
<         throw new SolrException(ErrorCode.SERVER_ERROR, "Unable to create HttpClient instance. ", e);
<       }
<     }
392,400c401,407
<     public static DefaultHttpClient createHttpClient(ClientConnectionManager cm) {
<       Constructor<? extends DefaultHttpClient> constructor;
<       try {
<         constructor = defaultHttpClientClass.getDeclaredConstructor(new Class[]{ClientConnectionManager.class});
<         return constructor.newInstance(new Object[]{cm});
<       } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
<         throw new SolrException(ErrorCode.SERVER_ERROR, "Unable to create HttpClient instance, registered class is: " + defaultHttpClientClass, e);
<       }
<     }
---
>   public static HttpClientContext createNewHttpClientRequestContext() {
>     return httpClientRequestContextBuilder.createContext();
>   }
>   
>   public static Builder createDefaultRequestConfigBuilder() {
>     String cpolicy = cookiePolicy;
>     Builder builder = RequestConfig.custom();
402,404c409,414
<     public static void setHttpClientImpl(Class<? extends DefaultHttpClient> defaultHttpClient, Class<? extends SystemDefaultHttpClient> systemDefaultHttpClient) {
<       defaultHttpClientClass = defaultHttpClient;
<       systemDefaultHttpClientClass = systemDefaultHttpClient;
---
>     builder.setSocketTimeout(DEFAULT_SO_TIMEOUT)
>         .setConnectTimeout(DEFAULT_CONNECT_TIMEOUT)
>         .setRedirectsEnabled(false)
>         .setDecompressionEnabled(false); 
>     if (cpolicy != null) {
>       builder.setCookieSpec(cpolicy);
405a416,420
>     return builder;
>   }
> 
>   public static void setCookiePolicy(String policyName) {
>     cookiePolicy = policyName;
407a423
> 
