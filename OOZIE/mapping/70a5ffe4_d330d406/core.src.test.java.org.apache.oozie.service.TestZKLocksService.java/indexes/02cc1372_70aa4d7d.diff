467,468c467
<         final LockToken[] locks = new LockToken[2];
< 
---
>         zkls.init(Services.get());
470,490c469,470
<             zkls.init(Services.get());
<             Thread t1 = new Thread() {
<                 public void run() {
<                     try {
<                         locks[0] = zkls.getWriteLock(path, 5000);
<                     }
<                     catch (InterruptedException e) {
<                         e.printStackTrace();
<                     }
<                 }
<             };
<             Thread t2 = new Thread() {
<                 public void run() {
<                     try {
<                         locks[1] = zkls.getWriteLock(path, 5000);
<                     }
<                     catch (InterruptedException e) {
<                         e.printStackTrace();
<                     }
<                 }
<             };
---
>             ThreadLock t1 = new ThreadLock(zkls, path);
>             ThreadLock t2 = new ThreadLock(zkls, path);
492d471
<             t2.start();
493a473,474
>             assertFalse(zkls.getLocks().containsKey(path));
>             t2.start();
495,509c476
< 
<             if (locks[0] != null) {
<                 assertNull(locks[1]);
<             }
<             if (locks[1] != null) {
<                 assertNull(locks[0]);
<             }
< 
<             if (locks[0] != null) {
<                 locks[0].release();
<             }
<             if (locks[1] != null) {
<                 locks[1].release();
<             }
<             assertTrue(zkls.getLocks().containsKey(path));
---
>             assertFalse(zkls.getLocks().containsKey(path));
517c484
<         Services.get().getConf().set(ZKLocksService.REAPING_THRESHOLD, "1");
---
>         ConfigurationService.set(ZKLocksService.REAPING_THRESHOLD, "1");
518a486
> 
533a502,528
> 
>     static class ThreadLock extends Thread {
>         ZKLocksService zkls;
>         String path;
>         LockToken lock = null;
> 
>         public ThreadLock(ZKLocksService zkls, String path) {
>             this.zkls = zkls;
>             this.path = path;
> 
>         }
> 
>         public void run() {
>             try {
>                 lock = zkls.getWriteLock(path, 5000);
>                 if (lock != null) {
>                     lock = zkls.getWriteLock(path, 5000);
>                     Thread.sleep(1000);
>                     lock.release();
>                     Thread.sleep(1000);
>                     lock.release();
>                 }
>             }
>             catch (InterruptedException e) {
>             }
>         }
>     }
