25a26
> import org.apache.oozie.service.MemoryLocksService.Type;
33a35
>     public static final int DEFAULT_LOCK_TIMEOUT = 5 * 1000;
121c123
<             return locks.getReadLock(name, timeout);
---
>             return locks.getLock(name, Type.READ, timeout);
132c134
<             return locks.getWriteLock(name, timeout);
---
>             return locks.getLock(name, Type.WRITE, timeout);
326c328
<             return locks.getWriteLock(name, timeout);
---
>             return locks.getLock(name, Type.WRITE, timeout);
375,377c377,379
<             LockToken lock = lockService.getWriteLock(path, 5000);
<             lock = (LockToken) lockService.getWriteLock(path, 5000);
<             lock = (LockToken) lockService.getWriteLock(path, 5000);
---
>             LockToken lock = lockService.getWriteLock(path, DEFAULT_LOCK_TIMEOUT);
>             lock = (LockToken) lockService.getWriteLock(path, DEFAULT_LOCK_TIMEOUT);
>             lock = (LockToken) lockService.getWriteLock(path, DEFAULT_LOCK_TIMEOUT);
384c386
<             assertEquals(lockService.getMemoryLocks().size(), 0);
---
>             checkLockRelease(path, lockService);
393a396,439
>     public void testLocksAreGarbageCollected() throws ServiceException, InterruptedException {
>         String path = new String("a");
>         String path1 = new String("a");
>         MemoryLocksService lockService = new MemoryLocksService();
>         lockService.init(Services.get());
>         LockToken lock = lockService.getWriteLock(path, DEFAULT_LOCK_TIMEOUT);
>         int oldHash = lockService.getMemoryLocks().getLockMap().get(path).hashCode();
>         lock.release();
>         lock = lockService.getWriteLock(path1, DEFAULT_LOCK_TIMEOUT);
>         int newHash = lockService.getMemoryLocks().getLockMap().get(path1).hashCode();
>         assertTrue(oldHash == newHash);
>         lock.release();
>         lock = null;
>         System.gc();
>         path = "a";
>         lock = lockService.getWriteLock(path, DEFAULT_LOCK_TIMEOUT);
>         newHash = lockService.getMemoryLocks().getLockMap().get(path).hashCode();
>         assertFalse(oldHash == newHash);
> 
>     }
> 
>     public void testLocksAreReused() throws ServiceException, InterruptedException {
>         String path = "a";
>         MemoryLocksService lockService = new MemoryLocksService();
>         lockService.init(Services.get());
>         LockToken lock = lockService.getWriteLock(path, DEFAULT_LOCK_TIMEOUT);
>         int oldHash = System.identityHashCode(lockService.getMemoryLocks().getLockMap().get(path));
>         System.gc();
>         lock.release();
>         lock = lockService.getWriteLock(path, DEFAULT_LOCK_TIMEOUT);
>         assertEquals(lockService.getMemoryLocks().size(), 1);
>         int newHash = System.identityHashCode(lockService.getMemoryLocks().getLockMap().get(path));
>         assertTrue(oldHash == newHash);
>     }
> 
>     private void checkLockRelease(String path, MemoryLocksService lockService) {
>         if (lockService.getMemoryLocks().getLockMap().get(path) == null) {
>             
>         }
>         else {
>             assertFalse(lockService.getMemoryLocks().getLockMap().get(path).isWriteLocked());
>         }
>     }
> 
