21a22
> import java.net.URISyntaxException;
23a25
> import java.util.Properties;
26a29
> import org.apache.hadoop.fs.FileSystem;
27a31,35
> import org.apache.hadoop.mapred.Counters;
> import org.apache.hadoop.mapred.JobClient;
> import org.apache.hadoop.mapred.JobConf;
> import org.apache.hadoop.mapred.JobID;
> import org.apache.hadoop.mapred.RunningJob;
29a38
> import org.apache.oozie.service.HadoopAccessorException;
31a41
> import org.apache.oozie.util.XLog;
37a48
>   public static final String OOZIE_ACTION_EXTERNAL_STATS_WRITE = "oozie.action.external.stats.write";
109a121,252
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     @Override
>     public void end(Context context, WorkflowAction action) throws ActionExecutorException {
>         super.end(context, action);
>         JobClient jobClient = null;
> 
>         boolean exception = false;
>         try {
>             if (action.getStatus() == WorkflowAction.Status.OK) {
>                 Element actionXml = XmlUtils.parseXml(action.getConf());
>                 JobConf jobConf = createBaseHadoopConf(context, actionXml);
>                 jobClient = createJobClient(context, jobConf);
> 
>                 
>                 Counters counters = null;
> 
>                 String externalIds = action.getExternalChildIDs();
>                 String []jobIds = externalIds.split(",");
> 
>                 for(String jobId : jobIds) {
>                     RunningJob runningJob = jobClient.getJob(JobID.forName(jobId));
>                     if (runningJob == null) {
>                       throw new ActionExecutorException(ActionExecutorException.ErrorType.FAILED, "SQOOP001",
>                         "Unknown hadoop job [{0}] associated with action [{1}].  Failing this action!", action
>                         .getExternalId(), action.getId());
>                     }
> 
>                     Counters taskCounters = runningJob.getCounters();
>                     if(taskCounters != null) {
>                         if(counters == null) {
>                           counters = taskCounters;
>                         } else {
>                           counters.incrAllCounters(taskCounters);
>                         }
>                     } else {
>                       XLog.getLog(getClass()).warn("Could not find Hadoop Counters for job: [{0}]", jobId);
>                     }
>                 }
> 
>                 if (counters != null) {
>                     ActionStats stats = new MRStats(counters);
>                     String statsJsonString = stats.toJSON();
>                     context.setVar(MapReduceActionExecutor.HADOOP_COUNTERS, statsJsonString);
> 
>                     
>                     
>                     
>                     if (Boolean.parseBoolean(evaluateConfigurationProperty(actionXml,
>                             OOZIE_ACTION_EXTERNAL_STATS_WRITE, "true"))
>                             && (statsJsonString.getBytes().length <= getMaxExternalStatsSize())) {
>                         context.setExecutionStats(statsJsonString);
>                         log.debug(
>                           "Printing stats for sqoop action as a JSON string : [{0}]" + statsJsonString);
>                     }
>                 } else {
>                     context.setVar(MapReduceActionExecutor.HADOOP_COUNTERS, "");
>                     XLog.getLog(getClass()).warn("Can't find any associated Hadoop job counters");
>                 }
>             }
>         }
>         catch (Exception ex) {
>             exception = true;
>             throw convertException(ex);
>         }
>         finally {
>             if (jobClient != null) {
>                 try {
>                     jobClient.close();
>                 }
>                 catch (Exception e) {
>                     if (exception) {
>                         log.error("JobClient error: ", e);
>                     }
>                     else {
>                         throw convertException(e);
>                     }
>                 }
>             }
>         }
>     }
> 
>     
>     private String evaluateConfigurationProperty(Element actionConf, String key, String defaultValue)
>             throws ActionExecutorException {
>         try {
>             if (actionConf != null) {
>                 Namespace ns = actionConf.getNamespace();
>                 Element e = actionConf.getChild("configuration", ns);
> 
>                 if(e != null) {
>                   String strConf = XmlUtils.prettyPrint(e).toString();
>                   XConfiguration inlineConf = new XConfiguration(new StringReader(strConf));
>                   return inlineConf.get(key, defaultValue);
>                 }
>             }
>             return defaultValue;
>         }
>         catch (IOException ex) {
>             throw convertException(ex);
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     @Override
>     protected void getActionData(FileSystem actionFs, RunningJob runningJob, WorkflowAction action, Context context)
>             throws HadoopAccessorException, JDOMException, IOException, URISyntaxException{
>         super.getActionData(actionFs, runningJob, action, context);
> 
>         
>         action.getData();
>         Properties props = new Properties();
>         props.load(new StringReader(action.getData()));
>         context.setExternalChildIDs((String)props.get(LauncherMain.HADOOP_JOBS));
>     }
> 
