233c233
<         Configuration childConf = new XConfiguration(new StringReader(wf.getConf()));
---
>         Configuration childConf = getWorkflowConfig(wf);
284c284
<         Configuration childConf = new XConfiguration(new StringReader(wf.getConf()));
---
>         Configuration childConf = getWorkflowConfig(wf);
364c364
<         Configuration childConf = new XConfiguration(new StringReader(wf.getConf()));
---
>         Configuration childConf = getWorkflowConfig(wf);
412c412
<         Configuration childConf = new XConfiguration(new StringReader(wf.getConf()));
---
>         Configuration childConf = getWorkflowConfig(wf);
422c422
<         
---
> 
576a577
> 
632c633
<             assertEquals(job.getStatus(), WorkflowJob.Status.SUCCEEDED);
---
>             assertEquals(WorkflowJob.Status.SUCCEEDED, job.getStatus());
643,648c644
<             Path subWorkflowAppPath = getFsTestCaseDir();
<             FileSystem fs = getFileSystem();
<             Path subWorkflowPath = new Path(subWorkflowAppPath, "workflow.xml");
<             Writer writer = new OutputStreamWriter(fs.create(subWorkflowPath));
<             writer.write(getWorkflow());
<             writer.close();
---
>             Path subWorkflowAppPath = createSubWorkflowXml();
650,683c646,688
<             String workflowUri = getTestCaseFileUri("workflow.xml");
<             String appXml = "<workflow-app xmlns=\"uri:oozie:workflow:0.4\" name=\"workflow\">" +
<                     "<global>" +
<                     "   <configuration>" +
<                     "        <property>" +
<                     "            <name>foo2</name>" +
<                     "            <value>foo2</value>" +
<                     "        </property>" +
<                     "        <property>" +
<                     "            <name>foo3</name>" +
<                     "            <value>foo3</value>" +
<                     "        </property>" +
<                     "    </configuration>" +
<                     "</global>" +
<                     "<start to=\"subwf\"/>" +
<                     "<action name=\"subwf\">" +
<                     "     <sub-workflow xmlns='uri:oozie:workflow:0.4'>" +
<                     "          <app-path>" + subWorkflowAppPath.toString() + "</app-path>" +
<                     "<propagate-configuration/>" +
<                     "   <configuration>" +
<                     "        <property>" +
<                     "            <name>foo3</name>" +
<                     "            <value>actionconf</value>" +
<                     "        </property>" +
<                     "   </configuration>" +
<                     "     </sub-workflow>" +
<                     "     <ok to=\"end\"/>" +
<                     "     <error to=\"fail\"/>" +
<                     "</action>" +
<                     "<kill name=\"fail\">" +
<                     "     <message>Sub workflow failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>" +
<                     "</kill>" +
<                     "<end name=\"end\"/>" +
<                     "</workflow-app>";
---
>             String workflowUri = createTestWorkflowXml(subWorkflowAppPath);
>             LocalOozie.start();
>             final OozieClient wfClient = LocalOozie.getClient();
>             Properties conf = wfClient.createConfiguration();
>             conf.setProperty(OozieClient.APP_PATH, workflowUri);
>             conf.setProperty(OozieClient.USER_NAME, getTestUser());
>             conf.setProperty("appName", "var-app-name");
>             final String jobId = wfClient.submit(conf);
>             wfClient.start(jobId);
> 
>             waitFor(JOB_TIMEOUT, new Predicate() {
>                 public boolean evaluate() throws Exception {
>                     return (wfClient.getJobInfo(jobId).getStatus() == WorkflowJob.Status.SUCCEEDED) &&
>                             (wfClient.getJobInfo(jobId).getActions().get(1).getStatus() == WorkflowAction.Status.OK);
>                 }
>             });
>             WorkflowJob subWorkflow = wfClient.getJobInfo(wfClient.getJobInfo(jobId).
>                     getActions().get(1).getExternalId());
> 
>             Configuration subWorkflowConf = getWorkflowConfig(subWorkflow);
>             Element eConf = XmlUtils.parseXml(subWorkflow.getActions().get(1).getConf());
>             Element element = eConf.getChild("configuration", eConf.getNamespace());
>             Configuration actionConf = new XConfiguration(new StringReader(XmlUtils.prettyPrint(element).toString()));
> 
> 
>             assertEquals("foo1", actionConf.get("foo1"));
>             assertEquals("subconf", actionConf.get("foo2"));
>             assertEquals("foo3", actionConf.get("foo3"));
> 
>             
>             assertEquals("actionconf", subWorkflowConf.get("foo3"));
>         } finally {
>             LocalOozie.stop();
>         }
>     }
> 
>     public void testParentGlobalConfWithConfigDefault() throws Exception {
>         try {
>             Path subWorkflowAppPath = createSubWorkflowXml();
> 
>             createConfigDefaultXml();
> 
>             String workflowUri = createTestWorkflowXml(subWorkflowAppPath);
685d689
<             writeToFile(appXml, workflowUri);
691a696
>             conf.setProperty("foo", "other");
693a699,701
>             
>             assertEquals("other",
>                     new XConfiguration(new StringReader(wfClient.getJobInfo(jobId).getConf())).get("foo"));
703c711,712
<             Configuration subWorkflowConf = new XConfiguration(new StringReader(subWorkflow.getConf()));
---
> 
>             Configuration subWorkflowConf = getWorkflowConfig(subWorkflow);
707,709c716,722
<             assertEquals(actionConf.get("foo1"), "foo1");
<             assertEquals(actionConf.get("foo2"), "subconf");
<             assertEquals(actionConf.get("foo3"), "foo3");
---
> 
>             
>             assertEquals("other", subWorkflowConf.get("foo"));
> 
>             assertEquals("foo1", actionConf.get("foo1"));
>             assertEquals("subconf", actionConf.get("foo2"));
>             assertEquals("foo3", actionConf.get("foo3"));
711c724,725
<             assertEquals(subWorkflowConf.get("foo3"), "actionconf");
---
>             assertEquals("actionconf", subWorkflowConf.get("foo3"));
> 
716a731,796
>     private Configuration getWorkflowConfig(WorkflowJob workflow) throws IOException {
>         return new XConfiguration(new StringReader(workflow.getConf()));
>     }
> 
>     private String createTestWorkflowXml(Path subWorkflowAppPath) throws IOException {
>         String workflowUri = getTestCaseFileUri("workflow.xml");
>         String appXml = "<workflow-app xmlns=\"uri:oozie:workflow:0.4\" name=\"workflow\">" +
>                 "<global>" +
>                 "   <configuration>" +
>                 "        <property>" +
>                 "            <name>foo2</name>" +
>                 "            <value>foo2</value>" +
>                 "        </property>" +
>                 "        <property>" +
>                 "            <name>foo3</name>" +
>                 "            <value>foo3</value>" +
>                 "        </property>" +
>                 "    </configuration>" +
>                 "</global>" +
>                 "<start to=\"subwf\"/>" +
>                 "<action name=\"subwf\">" +
>                 "     <sub-workflow xmlns='uri:oozie:workflow:0.4'>" +
>                 "          <app-path>" + subWorkflowAppPath.toString() + "</app-path>" +
>                 "<propagate-configuration/>" +
>                 "   <configuration>" +
>                 "        <property>" +
>                 "            <name>foo3</name>" +
>                 "            <value>actionconf</value>" +
>                 "        </property>" +
>                 "   </configuration>" +
>                 "     </sub-workflow>" +
>                 "     <ok to=\"end\"/>" +
>                 "     <error to=\"fail\"/>" +
>                 "</action>" +
>                 "<kill name=\"fail\">" +
>                 "     <message>Sub workflow failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>" +
>                 "</kill>" +
>                 "<end name=\"end\"/>" +
>                 "</workflow-app>";
> 
>         writeToFile(appXml, workflowUri);
>         return workflowUri;
>     }
> 
>     private Path createSubWorkflowXml() throws IOException {
>         Path subWorkflowAppPath = getFsTestCaseDir();
>         FileSystem fs = getFileSystem();
>         Path subWorkflowPath = new Path(subWorkflowAppPath, "workflow.xml");
>         Writer writer = new OutputStreamWriter(fs.create(subWorkflowPath));
>         writer.write(getWorkflow());
>         writer.close();
>         return subWorkflowAppPath;
>     }
> 
>     private void createConfigDefaultXml() throws IOException {
>         String config_defaultUri=getTestCaseFileUri("config-default.xml");
>         String config_default="<configuration>\n" +
>                 "<property>\n" +
>                 "<name>foo</name>\n" +
>                 "<value>default</value>\n" +
>                 "</property>\n" +
>                 "</configuration>";
> 
>         writeToFile(config_default, config_defaultUri);
>     }
> 
