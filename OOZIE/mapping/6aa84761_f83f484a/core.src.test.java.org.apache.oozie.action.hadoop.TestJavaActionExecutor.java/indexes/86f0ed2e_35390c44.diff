974a975,1013
>     public void testCredentialsInvalid() throws Exception {
>         String workflowXml = "<workflow-app xmlns='uri:oozie:workflow:0.2.5' name='pig-wf'>" + "<credentials>"
>                 + "<credential name='abcname' type='abc'>" + "<property>" + "<name>property1</name>"
>                 + "<value>value1</value>" + "</property>" + "<property>" + "<name>property2</name>"
>                 + "<value>value2</value>" + "</property>" + "<property>" + "<name>${property3}</name>"
>                 + "<value>${value3}</value>" + "</property>" + "</credential>" + "</credentials>"
>                 + "<start to='pig1' />" + "<action name='pig1' cred='abcname'>" + "<pig>" + "</pig>"
>                 + "<ok to='end' />" + "<error to='fail' />" + "</action>" + "<kill name='fail'>"
>                 + "<message>Pig failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>" + "</kill>"
>                 + "<end name='end' />" + "</workflow-app>";
> 
>         JavaActionExecutor ae = new JavaActionExecutor();
>         WorkflowJobBean wfBean = addRecordToWfJobTable("test1", workflowXml);
>         WorkflowActionBean action = (WorkflowActionBean) wfBean.getActions().get(0);
>         action.setType(ae.getType());
>         action.setCred("invalidabcname");
>         String actionXml = "<pig>" + "<job-tracker>${jobTracker}</job-tracker>" + "<name-node>${nameNode}</name-node>"
>                 + "<prepare>" + "<delete path='outputdir' />" + "</prepare>" + "<configuration>" + "<property>"
>                 + "<name>mapred.compress.map.output</name>" + "<value>true</value>" + "</property>" + "<property>"
>                 + "<name>mapred.job.queue.name</name>" + "<value>${queueName}</value>" + "</property>"
>                 + "</configuration>" + "<script>org/apache/oozie/examples/pig/id.pig</script>"
>                 + "<param>INPUT=${inputDir}</param>" + "<param>OUTPUT=${outputDir}/pig-output</param>" + "</pig>";
>         action.setConf(actionXml);
>         Context context = new Context(wfBean, action);
> 
>         Element actionXmlconf = XmlUtils.parseXml(action.getConf());
>         
>         Configuration actionConf = ae.createBaseHadoopConf(context, actionXmlconf);
> 
>         try {
>         
>         HashMap<String, CredentialsProperties> credProperties = ae.setCredentialPropertyToActionConf(context, action,
>                 actionConf);
>         }
>         catch (ActionExecutorException e) {
>             assertEquals(e.getErrorCode(), "JA021");
>         }
>     }
> 
