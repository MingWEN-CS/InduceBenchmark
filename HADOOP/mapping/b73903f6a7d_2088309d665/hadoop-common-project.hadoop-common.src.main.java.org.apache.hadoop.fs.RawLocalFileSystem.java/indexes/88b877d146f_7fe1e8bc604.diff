511c511
<     RawLocalFileStatus(File f, long defaultBlockSize, FileSystem fs) {
---
>     RawLocalFileStatus(File f, long defaultBlockSize, FileSystem fs) { 
513c513,514
<             f.lastModified(), fs.makeQualified(new Path(f.getPath())));
---
>           f.lastModified(), new Path(f.getPath()).makeQualified(fs.getUri(),
>             fs.getWorkingDirectory()));
544,546c545,548
<         StringTokenizer t = new StringTokenizer(
<             execCommand(new File(getPath().toUri()), 
<                         Shell.getGET_PERMISSION_COMMAND()));
---
>         String output = FileUtil.execCommand(new File(getPath().toUri()), 
>             Shell.getGetPermissionCommand());
>         StringTokenizer t =
>             new StringTokenizer(output, Shell.TOKEN_SEPARATOR_REGEX);
555c557,567
<         setOwner(t.nextToken());
---
> 
>         String owner = t.nextToken();
>         
>         
>         if (Shell.WINDOWS) {
>           int i = owner.indexOf('\\');
>           if (i != -1)
>             owner = owner.substring(i + 1);
>         }
>         setOwner(owner);
> 
591,601c603
<     if (username == null && groupname == null) {
<       throw new IOException("username == null && groupname == null");
<     }
< 
<     if (username == null) {
<       execCommand(pathToFile(p), Shell.SET_GROUP_COMMAND, groupname); 
<     } else {
<       
<       String s = username + (groupname == null? "": ":" + groupname);
<       execCommand(pathToFile(p), Shell.SET_OWNER_COMMAND, s);
<     }
---
>     FileUtil.setOwner(pathToFile(p), username, groupname);
611c613
<       NativeIO.chmod(pathToFile(p).getCanonicalPath(),
---
>       NativeIO.POSIX.chmod(pathToFile(p).getCanonicalPath(),
614,615c616,618
<       execCommand(pathToFile(p), Shell.SET_PERMISSION_COMMAND,
<           String.format("%05o", permission.toShort()));
---
>       String perm = String.format("%04o", permission.toShort());
>       Shell.execCommand(Shell.getSetPermissionCommand(perm, false,
>         FileUtil.makeShellPath(pathToFile(p), true)));
618,626d620
< 
<   private static String execCommand(File f, String... cmd) throws IOException {
<     String[] args = new String[cmd.length + 1];
<     System.arraycopy(cmd, 0, args, 0, cmd.length);
<     args[cmd.length] = FileUtil.makeShellPath(f, true);
<     String output = Shell.execCommand(args);
<     return output;
<   }
< 
