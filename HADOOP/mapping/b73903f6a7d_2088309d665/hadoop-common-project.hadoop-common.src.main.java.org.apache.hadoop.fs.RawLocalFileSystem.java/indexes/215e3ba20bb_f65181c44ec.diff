440d439
<     
643a643,747
>   @Override
>   public boolean supportsSymlinks() {
>     return true;
>   }
> 
>   @Override
>   public void createSymlink(Path target, Path link, boolean createParent)
>       throws IOException {
>     final String targetScheme = target.toUri().getScheme();
>     if (targetScheme != null && !"file".equals(targetScheme)) {
>       throw new IOException("Unable to create symlink to non-local file "+
>                             "system: "+target.toString());
>     }
>     if (createParent) {
>       mkdirs(link.getParent());
>     }
>     
>     try {
>       Shell.execCommand(Shell.getSymlinkCommand(
>         Path.getPathWithoutSchemeAndAuthority(target).toString(),
>         Path.getPathWithoutSchemeAndAuthority(makeAbsolute(link)).toString()));
>     } catch (IOException x) {
>       throw new IOException("Unable to create symlink: "+x.getMessage());
>     }
>   }
> 
>   
> 
> 
> 
> 
>   private String readLink(Path p) {
>     
> 
> 
> 
>     try {
>       final String path = p.toUri().getPath();
>       return Shell.execCommand(Shell.READ_LINK_COMMAND, path).trim();
>     } catch (IOException x) {
>       return "";
>     }
>   }
> 
>   
> 
> 
> 
> 
>   @Override
>   public FileStatus getFileLinkStatus(final Path f) throws IOException {
>     FileStatus fi = getFileLinkStatusInternal(f);
>     
>     
>     if (fi.isSymlink()) {
>       Path targetQual = FSLinkResolver.qualifySymlinkTarget(this.getUri(),
>           fi.getPath(), fi.getSymlink());
>       fi.setSymlink(targetQual);
>     }
>     return fi;
>   }
> 
>   private FileStatus getFileLinkStatusInternal(final Path f) throws IOException {
>     String target = readLink(f);
> 
>     try {
>       FileStatus fs = getFileStatus(f);
>       
>       if (target.isEmpty()) {
>         return fs;
>       }
>       
>       return new FileStatus(fs.getLen(),
>           false,
>           fs.getReplication(),
>           fs.getBlockSize(),
>           fs.getModificationTime(),
>           fs.getAccessTime(),
>           fs.getPermission(),
>           fs.getOwner(),
>           fs.getGroup(),
>           new Path(target),
>           f);
>     } catch (FileNotFoundException e) {
>       
> 
> 
> 
> 
> 
>       if (!target.isEmpty()) {
>         return new FileStatus(0, false, 0, 0, 0, 0, FsPermission.getDefault(),
>             "", "", new Path(target), f);
>       }
>       
>       throw e;
>     }
>   }
> 
>   @Override
>   public Path getLinkTarget(Path f) throws IOException {
>     FileStatus fi = getFileLinkStatusInternal(f);
>     
>     return fi.getSymlink();
>   }
