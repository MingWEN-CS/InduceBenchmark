45c45,47
< import org.apache.hadoop.io.WritableUtils;
---
> import org.apache.hadoop.ipc.ProtobufRpcEngine.RpcRequestMessageWrapper;
> import org.apache.hadoop.ipc.ProtobufRpcEngine.RpcResponseMessageWrapper;
> import org.apache.hadoop.ipc.RPC.RpcKind;
46a49,55
> import org.apache.hadoop.ipc.Server.AuthProtocol;
> import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcRequestHeaderProto;
> import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcRequestHeaderProto.OperationProto;
> import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcResponseHeaderProto;
> import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcSaslProto;
> import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcSaslProto.SaslAuth;
> import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcSaslProto.SaslState;
48d56
< import org.apache.hadoop.security.SaslRpcServer.SaslStatus;
51a60
> import org.apache.hadoop.util.ProtoUtil;
52a62
> import com.google.protobuf.ByteString;
60a71
>   private final AuthMethod authMethod;
63c74,79
< 
---
>   private static final RpcRequestHeaderProto saslHeader =
>       ProtoUtil.makeRpcRequestHeader(RpcKind.RPC_PROTOCOL_BUFFER,
>           OperationProto.RPC_FINAL_PACKET, AuthProtocol.SASL.callId);
>   private static final RpcSaslProto negotiateRequest =
>       RpcSaslProto.newBuilder().setState(SaslState.NEGOTIATE).build();
>   
75a92
>     this.authMethod = method;
84c101,102
<       case DIGEST: {
---
>       case TOKEN: {
>         saslProtocol = "";
110c128
<       LOG.debug("Creating SASL " + mechanism
---
>       LOG.debug("Creating SASL " + mechanism + "(" + authMethod + ") "
121,128d138
<   private static void readStatus(DataInputStream inStream) throws IOException {
<     int status = inStream.readInt(); 
<     if (status != SaslStatus.SUCCESS.state) {
<       throw new RemoteException(WritableUtils.readString(inStream),
<           WritableUtils.readString(inStream));
<     }
<   }
<   
146,178c156,174
< 
<     try {
<       byte[] saslToken = new byte[0];
<       if (saslClient.hasInitialResponse())
<         saslToken = saslClient.evaluateChallenge(saslToken);
<       while (saslToken != null) {
<         outStream.writeInt(saslToken.length);
<         outStream.write(saslToken, 0, saslToken.length);
<         outStream.flush();
<         if (LOG.isDebugEnabled())
<           LOG.debug("Have sent token of size " + saslToken.length
<               + " from initSASLContext.");
<         readStatus(inStream);
<         int len = inStream.readInt();
<         if (len == SaslRpcServer.SWITCH_TO_SIMPLE_AUTH) {
<           if (!fallbackAllowed) {
<             throw new IOException("Server asks us to fall back to SIMPLE " +
<                 "auth, but this client is configured to only allow secure " +
<                 "connections.");
<           }
<           if (LOG.isDebugEnabled())
<             LOG.debug("Server asks us to fall back to simple auth.");
<           saslClient.dispose();
<           return false;
<         } else if ((len == 0) && saslClient.isComplete()) {
<           break;
<         }
<         saslToken = new byte[len];
<         if (LOG.isDebugEnabled())
<           LOG.debug("Will read input token of size " + saslToken.length
<               + " for processing by initSASLContext");
<         inStream.readFully(saslToken);
<         saslToken = saslClient.evaluateChallenge(saslToken);
---
>     
>     
>     boolean inSasl = false;
>     sendSaslMessage(outStream, negotiateRequest);
>     
>     
>     boolean done = false;
>     do {
>       int totalLen = inStream.readInt();
>       RpcResponseMessageWrapper responseWrapper =
>           new RpcResponseMessageWrapper();
>       responseWrapper.readFields(inStream);
>       RpcResponseHeaderProto header = responseWrapper.getMessageHeader();
>       switch (header.getStatus()) {
>         case ERROR: 
>         case FATAL:
>           throw new RemoteException(header.getExceptionClassName(),
>                                     header.getErrorMsg());
>         default: break;
180,181c176,177
<       if (!saslClient.isComplete()) { 
<         throw new SaslException("Internal negotiation error");
---
>       if (totalLen != responseWrapper.getLength()) {
>         throw new SaslException("Received malformed response length");
182a179,184
>       
>       if (header.getCallId() != AuthProtocol.SASL.callId) {
>         throw new SaslException("Non-SASL response during negotiation");
>       }
>       RpcSaslProto saslMessage =
>           RpcSaslProto.parseFrom(responseWrapper.getMessageBytes());
184,185c186,243
<         LOG.debug("SASL client context established. Negotiated QoP: "
<             + saslClient.getNegotiatedProperty(Sasl.QOP));
---
>         LOG.debug("Received SASL message "+saslMessage);
>       }
>       
>       RpcSaslProto.Builder response = null;
>       switch (saslMessage.getState()) {
>         case NEGOTIATE: {
>           inSasl = true;
>           
>           
>           String clientAuthMethod = authMethod.toString();
>           SaslAuth saslAuthType = null;
>           for (SaslAuth authType : saslMessage.getAuthsList()) {
>             if (clientAuthMethod.equals(authType.getMethod())) {
>               saslAuthType = authType;
>               break;
>             }
>           }
>           if (saslAuthType == null) {
>             saslAuthType = SaslAuth.newBuilder()
>                 .setMethod(clientAuthMethod)
>                 .setMechanism(saslClient.getMechanismName())
>                 .build();
>           }
>           
>           byte[] challengeToken = null;
>           if (saslAuthType != null && saslAuthType.hasChallenge()) {
>             
>             challengeToken = saslAuthType.getChallenge().toByteArray();
>             saslAuthType =
>               SaslAuth.newBuilder(saslAuthType).clearChallenge().build();
>           } else if (saslClient.hasInitialResponse()) {
>             challengeToken = new byte[0];
>           }
>           byte[] responseToken = (challengeToken != null)
>               ? saslClient.evaluateChallenge(challengeToken)
>               : new byte[0];
>           
>           response = createSaslReply(SaslState.INITIATE, responseToken);
>           response.addAuths(saslAuthType);
>           break;
>         }
>         case CHALLENGE: {
>           inSasl = true;
>           byte[] responseToken = saslEvaluateToken(saslMessage, false);
>           response = createSaslReply(SaslState.RESPONSE, responseToken);
>           break;
>         }
>         case SUCCESS: {
>           if (inSasl && saslEvaluateToken(saslMessage, true) != null) {
>             throw new SaslException("SASL client generated spurious token");
>           }
>           done = true;
>           break;
>         }
>         default: {
>           throw new SaslException(
>               "RPC client doesn't support SASL " + saslMessage.getState());
>         }
187,192c245,246
<       return true;
<     } catch (IOException e) {
<       try {
<         saslClient.dispose();
<       } catch (SaslException ignored) {
<         
---
>       if (response != null) {
>         sendSaslMessage(outStream, response.build());
194c248,289
<       throw e;
---
>     } while (!done);
>     if (!inSasl && !fallbackAllowed) {
>       throw new IOException("Server asks us to fall back to SIMPLE " +
>           "auth, but this client is configured to only allow secure " +
>           "connections.");
>     }
>     return inSasl;
>   }
>   
>   private void sendSaslMessage(DataOutputStream out, RpcSaslProto message)
>       throws IOException {
>     if (LOG.isDebugEnabled()) {
>       LOG.debug("Sending sasl message "+message);
>     }
>     RpcRequestMessageWrapper request =
>         new RpcRequestMessageWrapper(saslHeader, message);
>     out.writeInt(request.getLength());
>     request.write(out);
>     out.flush();    
>   }
>   
>   private byte[] saslEvaluateToken(RpcSaslProto saslResponse,
>       boolean done) throws SaslException {
>     byte[] saslToken = null;
>     if (saslResponse.hasToken()) {
>       saslToken = saslResponse.getToken().toByteArray();
>       saslToken = saslClient.evaluateChallenge(saslToken);
>     } else if (!done) {
>       throw new SaslException("Challenge contains no token");
>     }
>     if (done && !saslClient.isComplete()) {
>       throw new SaslException("Client is out of sync with server");
>     }
>     return saslToken;
>   }
>   
>   private RpcSaslProto.Builder createSaslReply(SaslState state,
>                                                byte[] responseToken) {
>     RpcSaslProto.Builder response = RpcSaslProto.newBuilder();
>     response.setState(state);
>     if (responseToken != null) {
>       response.setToken(ByteString.copyFrom(responseToken));
195a291
>     return response;
