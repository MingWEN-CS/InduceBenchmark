213,217c213
<     return Shell.WINDOWS ?
<       new String[] { Shell.WINUTILS, "task", "isAlive", pid } :
<       isSetsidAvailable ?
<         new String[] { "kill", "-0", "--", "-" + pid } :
<         new String[] { "kill", "-0", pid };
---
>     return getSignalKillCommand(0, pid);
222,226c218,232
<     return Shell.WINDOWS ?
<       new String[] { Shell.WINUTILS, "task", "kill", pid } :
<       isSetsidAvailable ?
<         new String[] { "kill", "-" + code, "--", "-" + pid } :
<         new String[] { "kill", "-" + code, pid };
---
>     
>     if (Shell.WINDOWS) {
>       if (0 == code) {
>         return new String[] { Shell.WINUTILS, "task", "isAlive", pid };
>       } else {
>         return new String[] { Shell.WINUTILS, "task", "kill", pid };
>       }
>     }
> 
>     if (isSetsidAvailable) {
>       
>       return new String[] { "bash", "-c", "kill -" + code + " -- -" + pid };
>     } else {
>       return new String[] { "bash", "-c", "kill -" + code + " " + pid };
>     }
388a395,414
>   public static final boolean isBashSupported = checkIsBashSupported();
>   private static boolean checkIsBashSupported() {
>     if (Shell.WINDOWS) {
>       return false;
>     }
> 
>     ShellCommandExecutor shexec;
>     boolean supported = true;
>     try {
>       String[] args = {"bash", "-c", "echo 1000"};
>       shexec = new ShellCommandExecutor(args);
>       shexec.execute();
>     } catch (IOException ioe) {
>       LOG.warn("Bash is not supported by the OS", ioe);
>       supported = false;
>     }
> 
>     return supported;
>   }
> 
