36a37,40
> import org.apache.hadoop.fs.FSDataOutputStream;
> import org.apache.hadoop.fs.FSLinkResolver;
> import org.apache.hadoop.fs.FileAlreadyExistsException;
> import org.apache.hadoop.fs.FileChecksum;
38a43
> import org.apache.hadoop.fs.FileSystemLinkResolver;
42d46
< import org.apache.hadoop.fs.MD5MD5CRC32FileChecksum;
44a49
> import org.apache.hadoop.fs.ParentNotDirectoryException;
47a53,54
> import org.apache.hadoop.fs.UnresolvedLinkException;
> import org.apache.hadoop.fs.UnsupportedFileSystemException;
57d63
< import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport;
62a69
> import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport;
149,156d155
<   private Path makeAbsolute(Path f) {
<     if (f.isAbsolute()) {
<       return f;
<     } else {
<       return new Path(workingDir, f);
<     }
<   }
< 
159c158
<     String result = makeAbsolute(dir).toUri().getPath();
---
>     String result = fixRelativePart(dir).toUri().getPath();
164c163
<     workingDir = makeAbsolute(dir);
---
>     workingDir = fixRelativePart(dir);
172a172,180
>   
> 
> 
> 
> 
> 
> 
> 
> 
175c183
<     String result = makeAbsolute(file).toUri().getPath();
---
>     String result = file.toUri().getPath();
194c202
<       long start, long len) throws IOException {
---
>       final long start, final long len) throws IOException {
196,197c204,216
<     return dfs.getBlockLocations(getPathName(p), start, len);
< 
---
>     final Path absF = fixRelativePart(p);
>     return new FileSystemLinkResolver<BlockLocation[]>() {
>       @Override
>       public BlockLocation[] doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return dfs.getBlockLocations(getPathName(p), start, len);
>       }
>       @Override
>       public BlockLocation[] next(final FileSystem fs, final Path p)
>           throws IOException {
>         return fs.getFileBlockLocations(p, start, len);
>       }
>     }.resolve(this, absF);
242,243c261,279
<   public boolean recoverLease(Path f) throws IOException {
<     return dfs.recoverLease(getPathName(f));
---
>   public boolean recoverLease(final Path f) throws IOException {
>     Path absF = fixRelativePart(f);
>     return new FileSystemLinkResolver<Boolean>() {
>       @Override
>       public Boolean doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return dfs.recoverLease(getPathName(p));
>       }
>       @Override
>       public Boolean next(final FileSystem fs, final Path p)
>           throws IOException {
>         if (fs instanceof DistributedFileSystem) {
>           DistributedFileSystem myDfs = (DistributedFileSystem)fs;
>           return myDfs.recoverLease(p);
>         }
>         throw new UnsupportedOperationException("Cannot recoverLease through" +
>             " a symlink to a non-DistributedFileSystem: " + f + " -> " + p);
>       }
>     }.resolve(this, absF);
246d281
<   @SuppressWarnings("deprecation")
248c283,284
<   public HdfsDataInputStream open(Path f, int bufferSize) throws IOException {
---
>   public FSDataInputStream open(Path f, final int bufferSize)
>       throws IOException {
250,251c286,299
<     return new DFSClient.DFSDataInputStream(
<           dfs.open(getPathName(f), bufferSize, verifyChecksum));
---
>     Path absF = fixRelativePart(f);
>     return new FileSystemLinkResolver<FSDataInputStream>() {
>       @Override
>       public FSDataInputStream doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return new HdfsDataInputStream(
>             dfs.open(getPathName(p), bufferSize, verifyChecksum));
>       }
>       @Override
>       public FSDataInputStream next(final FileSystem fs, final Path p)
>           throws IOException {
>         return fs.open(p, bufferSize);
>       }
>     }.resolve(this, absF);
254d301
<   
256,257c303,304
<   public HdfsDataOutputStream append(Path f, int bufferSize,
<       Progressable progress) throws IOException {
---
>   public FSDataOutputStream append(Path f, final int bufferSize,
>       final Progressable progress) throws IOException {
259c306,318
<     return dfs.append(getPathName(f), bufferSize, progress, statistics);
---
>     Path absF = fixRelativePart(f);
>     return new FileSystemLinkResolver<FSDataOutputStream>() {
>       @Override
>       public FSDataOutputStream doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return dfs.append(getPathName(p), bufferSize, progress, statistics);
>       }
>       @Override
>       public FSDataOutputStream next(final FileSystem fs, final Path p)
>           throws IOException {
>         return fs.append(p, bufferSize);
>       }
>     }.resolve(this, absF);
263c322
<   public HdfsDataOutputStream create(Path f, FsPermission permission,
---
>   public FSDataOutputStream create(Path f, FsPermission permission,
282,284c341,345
<   public HdfsDataOutputStream create(Path f, FsPermission permission,
<       boolean overwrite, int bufferSize, short replication, long blockSize,
<       Progressable progress, InetSocketAddress[] favoredNodes) throws IOException {
---
>   public HdfsDataOutputStream create(final Path f,
>       final FsPermission permission, final boolean overwrite,
>       final int bufferSize, final short replication, final long blockSize,
>       final Progressable progress, final InetSocketAddress[] favoredNodes)
>           throws IOException {
286,290c347,371
<     final DFSOutputStream out = dfs.create(getPathName(f), permission,
<         overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)
<             : EnumSet.of(CreateFlag.CREATE),
<         true, replication, blockSize, progress, bufferSize, null, favoredNodes);
<     return new HdfsDataOutputStream(out, statistics);
---
>     Path absF = fixRelativePart(f);
>     return new FileSystemLinkResolver<HdfsDataOutputStream>() {
>       @Override
>       public HdfsDataOutputStream doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         final DFSOutputStream out = dfs.create(getPathName(f), permission,
>             overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)
>                 : EnumSet.of(CreateFlag.CREATE),
>             true, replication, blockSize, progress, bufferSize, null,
>             favoredNodes);
>         return new HdfsDataOutputStream(out, statistics);
>       }
>       @Override
>       public HdfsDataOutputStream next(final FileSystem fs, final Path p)
>           throws IOException {
>         if (fs instanceof DistributedFileSystem) {
>           DistributedFileSystem myDfs = (DistributedFileSystem)fs;
>           return myDfs.create(p, permission, overwrite, bufferSize, replication,
>               blockSize, progress, favoredNodes);
>         }
>         throw new UnsupportedOperationException("Cannot create with" +
>             " favoredNodes through a symlink to a non-DistributedFileSystem: "
>             + f + " -> " + p);
>       }
>     }.resolve(this, absF);
294,296c375,378
<   public HdfsDataOutputStream create(Path f, FsPermission permission,
<     EnumSet<CreateFlag> cflags, int bufferSize, short replication, long blockSize,
<     Progressable progress, ChecksumOpt checksumOpt) throws IOException {
---
>   public FSDataOutputStream create(final Path f, final FsPermission permission,
>     final EnumSet<CreateFlag> cflags, final int bufferSize,
>     final short replication, final long blockSize, final Progressable progress,
>     final ChecksumOpt checksumOpt) throws IOException {
298,300c380,395
<     final DFSOutputStream out = dfs.create(getPathName(f), permission, cflags,
<         replication, blockSize, progress, bufferSize, checksumOpt);
<     return new HdfsDataOutputStream(out, statistics);
---
>     Path absF = fixRelativePart(f);
>     return new FileSystemLinkResolver<FSDataOutputStream>() {
>       @Override
>       public FSDataOutputStream doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return new HdfsDataOutputStream(dfs.create(getPathName(p), permission,
>             cflags, replication, blockSize, progress, bufferSize, checksumOpt),
>             statistics);
>       }
>       @Override
>       public FSDataOutputStream next(final FileSystem fs, final Path p)
>           throws IOException {
>         return fs.create(p, permission, cflags, bufferSize,
>             replication, blockSize, progress, checksumOpt);
>       }
>     }.resolve(this, absF);
302,303c397
<   
<   @SuppressWarnings("deprecation")
---
> 
310c404,405
<     return new HdfsDataOutputStream(dfs.primitiveCreate(getPathName(f),
---
>     return new HdfsDataOutputStream(dfs.primitiveCreate(
>         getPathName(fixRelativePart(f)),
313c408
<    } 
---
>    }
319,321c414,418
<   public HdfsDataOutputStream createNonRecursive(Path f, FsPermission permission,
<       EnumSet<CreateFlag> flag, int bufferSize, short replication,
<       long blockSize, Progressable progress) throws IOException {
---
>   @SuppressWarnings("deprecation")
>   public FSDataOutputStream createNonRecursive(final Path f,
>       final FsPermission permission, final EnumSet<CreateFlag> flag,
>       final int bufferSize, final short replication, final long blockSize,
>       final Progressable progress) throws IOException {
326,328c423,439
<     return new HdfsDataOutputStream(dfs.create(getPathName(f), permission, flag,
<         false, replication, blockSize, progress, 
<         bufferSize, null), statistics);
---
>     Path absF = fixRelativePart(f);
>     return new FileSystemLinkResolver<FSDataOutputStream>() {
>       @Override
>       public FSDataOutputStream doCall(final Path p) throws IOException,
>           UnresolvedLinkException {
>         return new HdfsDataOutputStream(dfs.create(getPathName(p), permission,
>             flag, false, replication, blockSize, progress, bufferSize, null),
>             statistics);
>       }
> 
>       @Override
>       public FSDataOutputStream next(final FileSystem fs, final Path p)
>           throws IOException {
>         return fs.createNonRecursive(p, permission, flag, bufferSize,
>             replication, blockSize, progress);
>       }
>     }.resolve(this, absF);
333c444
<                                 short replication
---
>                                 final short replication
336c447,459
<     return dfs.setReplication(getPathName(src), replication);
---
>     Path absF = fixRelativePart(src);
>     return new FileSystemLinkResolver<Boolean>() {
>       @Override
>       public Boolean doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return dfs.setReplication(getPathName(p), replication);
>       }
>       @Override
>       public Boolean next(final FileSystem fs, final Path p)
>           throws IOException {
>         return fs.setReplication(p, replication);
>       }
>     }.resolve(this, absF);
349,352d471
<     String [] srcs = new String [psrcs.length];
<     for(int i=0; i<psrcs.length; i++) {
<       srcs[i] = getPathName(psrcs[i]);
<     }
354c473,509
<     dfs.concat(getPathName(trg), srcs);
---
>     
>     Path absF = fixRelativePart(trg);
>     
>     Path[] srcs = new Path[psrcs.length];
>     for (int i=0; i<psrcs.length; i++) {
>       srcs[i] = fixRelativePart(psrcs[i]);
>     }
>     
>     String[] srcsStr = new String[psrcs.length];
>     try {
>       for (int i=0; i<psrcs.length; i++) {
>         srcsStr[i] = getPathName(srcs[i]);
>       }
>       dfs.concat(getPathName(trg), srcsStr);
>     } catch (UnresolvedLinkException e) {
>       
>       
>       FileStatus stat = getFileLinkStatus(absF);
>       if (stat.isSymlink()) {
>         throw new IOException("Cannot concat with a symlink target: "
>             + trg + " -> " + stat.getPath());
>       }
>       absF = fixRelativePart(stat.getPath());
>       for (int i=0; i<psrcs.length; i++) {
>         stat = getFileLinkStatus(srcs[i]);
>         if (stat.isSymlink()) {
>           throw new IOException("Cannot concat with a symlink src: "
>               + psrcs[i] + " -> " + stat.getPath());
>         }
>         srcs[i] = fixRelativePart(stat.getPath());
>       }
>       
>       for (int i=0; i<psrcs.length; i++) {
>         srcsStr[i] = getPathName(srcs[i]);
>       }
>       dfs.concat(getPathName(absF), srcsStr);
>     }
362c517,545
<     return dfs.rename(getPathName(src), getPathName(dst));
---
>     
>     final Path absSrc = fixRelativePart(src);
>     final Path absDst = fixRelativePart(dst);
>     FileSystem srcFS = getFSofPath(absSrc, getConf());
>     FileSystem dstFS = getFSofPath(absDst, getConf());
>     if (!srcFS.getUri().equals(getUri()) ||
>         !dstFS.getUri().equals(getUri())) {
>       throw new IOException("Renames across FileSystems not supported");
>     }
>     
>     try {
>       return dfs.rename(getPathName(absSrc), getPathName(absDst));
>     } catch (UnresolvedLinkException e) {
>       
>       final Path source = getFileLinkStatus(absSrc).getPath();
>       
>       return new FileSystemLinkResolver<Boolean>() {
>         @Override
>         public Boolean doCall(final Path p)
>             throws IOException, UnresolvedLinkException {
>           return dfs.rename(getPathName(source), getPathName(p));
>         }
>         @Override
>         public Boolean next(final FileSystem fs, final Path p)
>             throws IOException {
>           return fs.rename(source, p);
>         }
>       }.resolve(this, absDst);
>     }
370c553,554
<   public void rename(Path src, Path dst, Options.Rename... options) throws IOException {
---
>   public void rename(Path src, Path dst, final Options.Rename... options)
>       throws IOException {
372c556,586
<     dfs.rename(getPathName(src), getPathName(dst), options);
---
>     
>     final Path absSrc = fixRelativePart(src);
>     final Path absDst = fixRelativePart(dst);
>     FileSystem srcFS = getFSofPath(absSrc, getConf());
>     FileSystem dstFS = getFSofPath(absDst, getConf());
>     if (!srcFS.getUri().equals(getUri()) ||
>         !dstFS.getUri().equals(getUri())) {
>       throw new IOException("Renames across FileSystems not supported");
>     }
>     
>     try {
>       dfs.rename(getPathName(absSrc), getPathName(absDst), options);
>     } catch (UnresolvedLinkException e) {
>       
>       final Path source = getFileLinkStatus(absSrc).getPath();
>       
>       new FileSystemLinkResolver<Void>() {
>         @Override
>         public Void doCall(final Path p)
>             throws IOException, UnresolvedLinkException {
>           dfs.rename(getPathName(source), getPathName(p), options);
>           return null;
>         }
>         @Override
>         public Void next(final FileSystem fs, final Path p)
>             throws IOException {
>           
>           return doCall(p);
>         }
>       }.resolve(this, absDst);
>     }
376c590
<   public boolean delete(Path f, boolean recursive) throws IOException {
---
>   public boolean delete(Path f, final boolean recursive) throws IOException {
378c592,604
<     return dfs.delete(getPathName(f), recursive);
---
>     Path absF = fixRelativePart(f);
>     return new FileSystemLinkResolver<Boolean>() {
>       @Override
>       public Boolean doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return dfs.delete(getPathName(p), recursive);
>       }
>       @Override
>       public Boolean next(final FileSystem fs, final Path p)
>           throws IOException {
>         return fs.delete(p, recursive);
>       }
>     }.resolve(this, absF);
384c610,622
<     return dfs.getContentSummary(getPathName(f));
---
>     Path absF = fixRelativePart(f);
>     return new FileSystemLinkResolver<ContentSummary>() {
>       @Override
>       public ContentSummary doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return dfs.getContentSummary(getPathName(p));
>       }
>       @Override
>       public ContentSummary next(final FileSystem fs, final Path p)
>           throws IOException {
>         return fs.getContentSummary(p);
>       }
>     }.resolve(this, absF);
390,413c628,645
<   public void setQuota(Path src, long namespaceQuota, long diskspaceQuota) 
<                        throws IOException {
<     dfs.setQuota(getPathName(src), namespaceQuota, diskspaceQuota);
<   }
<   
<   private FileStatus makeQualified(HdfsFileStatus f, Path parent) {
<     return new FileStatus(f.getLen(), f.isDir(), f.getReplication(),
<         f.getBlockSize(), f.getModificationTime(),
<         f.getAccessTime(),
<         f.getPermission(), f.getOwner(), f.getGroup(),
<         (f.getFullPath(parent)).makeQualified(
<             getUri(), getWorkingDirectory())); 
<   }
< 
<   private LocatedFileStatus makeQualifiedLocated(
<       HdfsLocatedFileStatus f, Path parent) {
<     return new LocatedFileStatus(f.getLen(), f.isDir(), f.getReplication(),
<         f.getBlockSize(), f.getModificationTime(),
<         f.getAccessTime(),
<         f.getPermission(), f.getOwner(), f.getGroup(),
<         null,
<         (f.getFullPath(parent)).makeQualified(
<             getUri(), getWorkingDirectory()), 
<         DFSUtil.locatedBlocks2Locations(f.getBlockLocations()));
---
>   public void setQuota(Path src, final long namespaceQuota,
>       final long diskspaceQuota) throws IOException {
>     Path absF = fixRelativePart(src);
>     new FileSystemLinkResolver<Void>() {
>       @Override
>       public Void doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         dfs.setQuota(getPathName(p), namespaceQuota, diskspaceQuota);
>         return null;
>       }
>       @Override
>       public Void next(final FileSystem fs, final Path p)
>           throws IOException {
>         
>         
>         return doCall(p);
>       }
>     }.resolve(this, absF);
416,425c648
<   
< 
< 
< 
< 
< 
< 
< 
<   @Override
<   public FileStatus[] listStatus(Path p) throws IOException {
---
>   private FileStatus[] listStatusInternal(Path p) throws IOException {
440c663
<         stats[i] = makeQualified(partialListing[i], p);
---
>         stats[i] = partialListing[i].makeQualified(getUri(), p);
454c677
<       listing.add(makeQualified(fileStatus, p));
---
>       listing.add(fileStatus.makeQualified(getUri(), p));
468c691
<         listing.add(makeQualified(fileStatus, p));
---
>         listing.add(fileStatus.makeQualified(getUri(), p));
475a699,723
>   
> 
> 
> 
> 
> 
> 
> 
>   @Override
>   public FileStatus[] listStatus(Path p) throws IOException {
>     Path absF = fixRelativePart(p);
>     return new FileSystemLinkResolver<FileStatus[]>() {
>       @Override
>       public FileStatus[] doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return listStatusInternal(p);
>       }
>       @Override
>       public FileStatus[] next(final FileSystem fs, final Path p)
>           throws IOException {
>         return fs.listStatus(p);
>       }
>     }.resolve(this, absF);
>   }
> 
487c735,737
<         src = getPathName(p);
---
>         
>         
>         src = getPathName(resolvePath(p));
499,500c749,751
<           LocatedFileStatus next = makeQualifiedLocated(
<               (HdfsLocatedFileStatus)thisListing.getPartialListing()[i++], p);
---
>           LocatedFileStatus next = 
>               ((HdfsLocatedFileStatus)thisListing.getPartialListing()[i++])
>               .makeQualifiedLocated(getUri(), p);
550,551c801
<     statistics.incrementWriteOps(1);
<     return dfs.mkdirs(getPathName(f), permission, false);
---
>     return mkdirsInternal(f, permission, false);
566a817,821
>     return mkdirsInternal(f, permission, true);
>   }
> 
>   private boolean mkdirsInternal(Path f, final FsPermission permission,
>       final boolean createParent) throws IOException {
568c823,842
<     return dfs.mkdirs(getPathName(f), permission, true);
---
>     Path absF = fixRelativePart(f);
>     return new FileSystemLinkResolver<Boolean>() {
>       @Override
>       public Boolean doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return dfs.mkdirs(getPathName(p), permission, createParent);
>       }
> 
>       @Override
>       public Boolean next(final FileSystem fs, final Path p)
>           throws IOException {
>         
>         
>         if (!createParent) {
>           throw new IOException("FileSystem does not support non-recursive"
>               + "mkdir");
>         }
>         return fs.mkdirs(p, permission);
>       }
>     }.resolve(this, absF);
794,798c1068,1178
<     HdfsFileStatus fi = dfs.getFileInfo(getPathName(f));
<     if (fi != null) {
<       return makeQualified(fi, f);
<     } else {
<       throw new FileNotFoundException("File does not exist: " + f);
---
>     Path absF = fixRelativePart(f);
>     return new FileSystemLinkResolver<FileStatus>() {
>       @Override
>       public FileStatus doCall(final Path p) throws IOException,
>           UnresolvedLinkException {
>         HdfsFileStatus fi = dfs.getFileInfo(getPathName(p));
>         if (fi != null) {
>           return fi.makeQualified(getUri(), p);
>         } else {
>           throw new FileNotFoundException("File does not exist: " + p);
>         }
>       }
>       @Override
>       public FileStatus next(final FileSystem fs, final Path p)
>           throws IOException {
>         return fs.getFileStatus(p);
>       }
>     }.resolve(this, absF);
>   }
> 
>   @Override
>   public void createSymlink(final Path target, final Path link,
>       final boolean createParent) throws AccessControlException,
>       FileAlreadyExistsException, FileNotFoundException,
>       ParentNotDirectoryException, UnsupportedFileSystemException, 
>       IOException {
>     statistics.incrementWriteOps(1);
>     final Path absF = fixRelativePart(link);
>     new FileSystemLinkResolver<Void>() {
>       @Override
>       public Void doCall(final Path p) throws IOException,
>           UnresolvedLinkException {
>         dfs.createSymlink(target.toString(), getPathName(p), createParent);
>         return null;
>       }
>       @Override
>       public Void next(final FileSystem fs, final Path p)
>           throws IOException, UnresolvedLinkException {
>         fs.createSymlink(target, p, createParent);
>         return null;
>       }
>     }.resolve(this, absF);
>   }
> 
>   @Override
>   public boolean supportsSymlinks() {
>     return true;
>   }
> 
>   @Override
>   public FileStatus getFileLinkStatus(final Path f)
>       throws AccessControlException, FileNotFoundException,
>       UnsupportedFileSystemException, IOException {
>     statistics.incrementReadOps(1);
>     final Path absF = fixRelativePart(f);
>     FileStatus status = new FileSystemLinkResolver<FileStatus>() {
>       @Override
>       public FileStatus doCall(final Path p) throws IOException,
>           UnresolvedLinkException {
>         HdfsFileStatus fi = dfs.getFileLinkInfo(getPathName(p));
>         if (fi != null) {
>           return fi.makeQualified(getUri(), p);
>         } else {
>           throw new FileNotFoundException("File does not exist: " + p);
>         }
>       }
>       @Override
>       public FileStatus next(final FileSystem fs, final Path p)
>         throws IOException, UnresolvedLinkException {
>         return fs.getFileLinkStatus(p);
>       }
>     }.resolve(this, absF);
>     
>     if (status.isSymlink()) {
>       Path targetQual = FSLinkResolver.qualifySymlinkTarget(this.getUri(),
>           status.getPath(), status.getSymlink());
>       status.setSymlink(targetQual);
>     }
>     return status;
>   }
> 
>   @Override
>   public Path getLinkTarget(final Path f) throws AccessControlException,
>       FileNotFoundException, UnsupportedFileSystemException, IOException {
>     statistics.incrementReadOps(1);
>     final Path absF = fixRelativePart(f);
>     return new FileSystemLinkResolver<Path>() {
>       @Override
>       public Path doCall(final Path p) throws IOException,
>           UnresolvedLinkException {
>         HdfsFileStatus fi = dfs.getFileLinkInfo(getPathName(p));
>         if (fi != null) {
>           return fi.makeQualified(getUri(), p).getSymlink();
>         } else {
>           throw new FileNotFoundException("File does not exist: " + p);
>         }
>       }
>       @Override
>       public Path next(final FileSystem fs, final Path p)
>         throws IOException, UnresolvedLinkException {
>         return fs.getLinkTarget(p);
>       }
>     }.resolve(this, absF);
>   }
> 
>   @Override
>   protected Path resolveLink(Path f) throws IOException {
>     statistics.incrementReadOps(1);
>     String target = dfs.getLinkTarget(getPathName(fixRelativePart(f)));
>     if (target == null) {
>       throw new FileNotFoundException("File does not exist: " + f.toString());
799a1180
>     return new Path(target);
803c1184
<   public MD5MD5CRC32FileChecksum getFileChecksum(Path f) throws IOException {
---
>   public FileChecksum getFileChecksum(Path f) throws IOException {
805c1186,1199
<     return dfs.getFileChecksum(getPathName(f));
---
>     Path absF = fixRelativePart(f);
>     return new FileSystemLinkResolver<FileChecksum>() {
>       @Override
>       public FileChecksum doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return dfs.getFileChecksum(getPathName(p));
>       }
> 
>       @Override
>       public FileChecksum next(final FileSystem fs, final Path p)
>           throws IOException {
>         return fs.getFileChecksum(p);
>       }
>     }.resolve(this, absF);
809c1203
<   public void setPermission(Path p, FsPermission permission
---
>   public void setPermission(Path p, final FsPermission permission
812c1206,1221
<     dfs.setPermission(getPathName(p), permission);
---
>     Path absF = fixRelativePart(p);
>     new FileSystemLinkResolver<Void>() {
>       @Override
>       public Void doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         dfs.setPermission(getPathName(p), permission);
>         return null;
>       }
> 
>       @Override
>       public Void next(final FileSystem fs, final Path p)
>           throws IOException {
>         fs.setPermission(p, permission);
>         return null;
>       }
>     }.resolve(this, absF);
816c1225
<   public void setOwner(Path p, String username, String groupname
---
>   public void setOwner(Path p, final String username, final String groupname
822c1231,1246
<     dfs.setOwner(getPathName(p), username, groupname);
---
>     Path absF = fixRelativePart(p);
>     new FileSystemLinkResolver<Void>() {
>       @Override
>       public Void doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         dfs.setOwner(getPathName(p), username, groupname);
>         return null;
>       }
> 
>       @Override
>       public Void next(final FileSystem fs, final Path p)
>           throws IOException {
>         fs.setOwner(p, username, groupname);
>         return null;
>       }
>     }.resolve(this, absF);
826c1250
<   public void setTimes(Path p, long mtime, long atime
---
>   public void setTimes(Path p, final long mtime, final long atime
829c1253,1268
<     dfs.setTimes(getPathName(p), mtime, atime);
---
>     Path absF = fixRelativePart(p);
>     new FileSystemLinkResolver<Void>() {
>       @Override
>       public Void doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         dfs.setTimes(getPathName(p), mtime, atime);
>         return null;
>       }
> 
>       @Override
>       public Void next(final FileSystem fs, final Path p)
>           throws IOException {
>         fs.setTimes(p, mtime, atime);
>         return null;
>       }
>     }.resolve(this, absF);
946,947c1385,1408
<   public void allowSnapshot(Path path) throws IOException {
<     dfs.allowSnapshot(getPathName(path));
---
>   public void allowSnapshot(final Path path) throws IOException {
>     Path absF = fixRelativePart(path);
>     new FileSystemLinkResolver<Void>() {
>       @Override
>       public Void doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         dfs.allowSnapshot(getPathName(p));
>         return null;
>       }
> 
>       @Override
>       public Void next(final FileSystem fs, final Path p)
>           throws IOException {
>         if (fs instanceof DistributedFileSystem) {
>           DistributedFileSystem myDfs = (DistributedFileSystem)fs;
>           myDfs.allowSnapshot(p);
>         } else {
>           throw new UnsupportedOperationException("Cannot perform snapshot"
>               + " operations on a symlink to a non-DistributedFileSystem: "
>               + path + " -> " + p);
>         }
>         return null;
>       }
>     }.resolve(this, absF);
951,952c1412,1435
<   public void disallowSnapshot(Path path) throws IOException {
<     dfs.disallowSnapshot(getPathName(path));
---
>   public void disallowSnapshot(final Path path) throws IOException {
>     Path absF = fixRelativePart(path);
>     new FileSystemLinkResolver<Void>() {
>       @Override
>       public Void doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         dfs.disallowSnapshot(getPathName(p));
>         return null;
>       }
> 
>       @Override
>       public Void next(final FileSystem fs, final Path p)
>           throws IOException {
>         if (fs instanceof DistributedFileSystem) {
>           DistributedFileSystem myDfs = (DistributedFileSystem)fs;
>           myDfs.disallowSnapshot(p);
>         } else {
>           throw new UnsupportedOperationException("Cannot perform snapshot"
>               + " operations on a symlink to a non-DistributedFileSystem: "
>               + path + " -> " + p);
>         }
>         return null;
>       }
>     }.resolve(this, absF);
956c1439
<   public Path createSnapshot(Path path, String snapshotName) 
---
>   public Path createSnapshot(final Path path, final String snapshotName) 
958c1441,1461
<     return new Path(dfs.createSnapshot(getPathName(path), snapshotName));
---
>     Path absF = fixRelativePart(path);
>     return new FileSystemLinkResolver<Path>() {
>       @Override
>       public Path doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return new Path(dfs.createSnapshot(getPathName(p), snapshotName));
>       }
> 
>       @Override
>       public Path next(final FileSystem fs, final Path p)
>           throws IOException {
>         if (fs instanceof DistributedFileSystem) {
>           DistributedFileSystem myDfs = (DistributedFileSystem)fs;
>           return myDfs.createSnapshot(p);
>         } else {
>           throw new UnsupportedOperationException("Cannot perform snapshot"
>               + " operations on a symlink to a non-DistributedFileSystem: "
>               + path + " -> " + p);
>         }
>       }
>     }.resolve(this, absF);
962,964c1465,1489
<   public void renameSnapshot(Path path, String snapshotOldName,
<       String snapshotNewName) throws IOException {
<     dfs.renameSnapshot(getPathName(path), snapshotOldName, snapshotNewName);
---
>   public void renameSnapshot(final Path path, final String snapshotOldName,
>       final String snapshotNewName) throws IOException {
>     Path absF = fixRelativePart(path);
>     new FileSystemLinkResolver<Void>() {
>       @Override
>       public Void doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         dfs.renameSnapshot(getPathName(p), snapshotOldName, snapshotNewName);
>         return null;
>       }
> 
>       @Override
>       public Void next(final FileSystem fs, final Path p)
>           throws IOException {
>         if (fs instanceof DistributedFileSystem) {
>           DistributedFileSystem myDfs = (DistributedFileSystem)fs;
>           myDfs.renameSnapshot(p, snapshotOldName, snapshotNewName);
>         } else {
>           throw new UnsupportedOperationException("Cannot perform snapshot"
>               + " operations on a symlink to a non-DistributedFileSystem: "
>               + path + " -> " + p);
>         }
>         return null;
>       }
>     }.resolve(this, absF);
977c1502
<   public void deleteSnapshot(Path snapshotDir, String snapshotName)
---
>   public void deleteSnapshot(final Path snapshotDir, final String snapshotName)
979c1504,1526
<     dfs.deleteSnapshot(getPathName(snapshotDir), snapshotName);
---
>     Path absF = fixRelativePart(snapshotDir);
>     new FileSystemLinkResolver<Void>() {
>       @Override
>       public Void doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         dfs.deleteSnapshot(getPathName(p), snapshotName);
>         return null;
>       }
> 
>       @Override
>       public Void next(final FileSystem fs, final Path p)
>           throws IOException {
>         if (fs instanceof DistributedFileSystem) {
>           DistributedFileSystem myDfs = (DistributedFileSystem)fs;
>           myDfs.deleteSnapshot(p, snapshotName);
>         } else {
>           throw new UnsupportedOperationException("Cannot perform snapshot"
>               + " operations on a symlink to a non-DistributedFileSystem: "
>               + snapshotDir + " -> " + p);
>         }
>         return null;
>       }
>     }.resolve(this, absF);
988,990c1535,1559
<   public SnapshotDiffReport getSnapshotDiffReport(Path snapshotDir,
<       String fromSnapshot, String toSnapshot) throws IOException {
<     return dfs.getSnapshotDiffReport(getPathName(snapshotDir), fromSnapshot, toSnapshot);
---
>   public SnapshotDiffReport getSnapshotDiffReport(final Path snapshotDir,
>       final String fromSnapshot, final String toSnapshot) throws IOException {
>     Path absF = fixRelativePart(snapshotDir);
>     return new FileSystemLinkResolver<SnapshotDiffReport>() {
>       @Override
>       public SnapshotDiffReport doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return dfs.getSnapshotDiffReport(getPathName(p), fromSnapshot,
>             toSnapshot);
>       }
> 
>       @Override
>       public SnapshotDiffReport next(final FileSystem fs, final Path p)
>           throws IOException {
>         if (fs instanceof DistributedFileSystem) {
>           DistributedFileSystem myDfs = (DistributedFileSystem)fs;
>           myDfs.getSnapshotDiffReport(p, fromSnapshot, toSnapshot);
>         } else {
>           throw new UnsupportedOperationException("Cannot perform snapshot"
>               + " operations on a symlink to a non-DistributedFileSystem: "
>               + snapshotDir + " -> " + p);
>         }
>         return null;
>       }
>     }.resolve(this, absF);
1001,1002c1570,1591
<   public boolean isFileClosed(Path src) throws IOException {
<     return dfs.isFileClosed(getPathName(src));
---
>   public boolean isFileClosed(final Path src) throws IOException {
>     Path absF = fixRelativePart(src);
>     return new FileSystemLinkResolver<Boolean>() {
>       @Override
>       public Boolean doCall(final Path p)
>           throws IOException, UnresolvedLinkException {
>         return dfs.isFileClosed(getPathName(p));
>       }
> 
>       @Override
>       public Boolean next(final FileSystem fs, final Path p)
>           throws IOException {
>         if (fs instanceof DistributedFileSystem) {
>           DistributedFileSystem myDfs = (DistributedFileSystem)fs;
>           return myDfs.isFileClosed(p);
>         } else {
>           throw new UnsupportedOperationException("Cannot call isFileClosed"
>               + " on a symlink to a non-DistributedFileSystem: "
>               + src + " -> " + p);
>         }
>       }
>     }.resolve(this, absF);
