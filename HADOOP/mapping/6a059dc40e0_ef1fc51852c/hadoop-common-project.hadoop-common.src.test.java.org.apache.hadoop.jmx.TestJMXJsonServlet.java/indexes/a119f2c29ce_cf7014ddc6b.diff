21,26d20
< import java.net.URL;
< import java.util.regex.Matcher;
< import java.util.regex.Pattern;
< 
< import org.apache.commons.logging.Log;
< import org.apache.commons.logging.LogFactory;
32a27,34
> import java.net.HttpURLConnection;
> import java.net.URL;
> import java.util.regex.Matcher;
> import java.util.regex.Pattern;
> 
> import static org.apache.hadoop.jmx.JMXJsonServlet.ACCESS_CONTROL_ALLOW_METHODS;
> import static org.apache.hadoop.jmx.JMXJsonServlet.ACCESS_CONTROL_ALLOW_ORIGIN;
> 
34d35
<   private   static final Log LOG = LogFactory.getLog(TestJMXJsonServlet.class);
56d56
<     LOG.info("/jmx?qry=java.lang:type=Runtime RESULT: "+result);
61d60
<     LOG.info("/jmx?qry=java.lang:type=Memory RESULT: "+result);
66d64
<     LOG.info("/jmx RESULT: "+result);
72d69
<     LOG.info("/jmx RESULT: "+result);
79d75
<     LOG.info("/jmx RESULT: "+result);
83,104c79,82
<     result = readOutput(new URL(baseUrl, "/jmx?qry=java.lang:type=Memory&callback=mycallback1"));
<     LOG.info("/jmx?qry=java.lang:type=Memory&callback=mycallback RESULT: "+result);
<     assertReFind("^mycallback1\\(\\{", result);
<     assertReFind("\\}\\);$", result);
< 
<     
<     result = readOutput(new URL(baseUrl,
<         "/jmx?get=java.lang:type=Memory::&callback=mycallback2"));
<     LOG.info("/jmx RESULT: "+result);
<     assertReFind("^mycallback2\\(\\{", result);
<     assertReFind("\"ERROR\"", result);
<     assertReFind("\\}\\);$", result);
< 
<     
<     result = readOutput(new URL(baseUrl,
<         "/jmx?get=java.lang:type=Memory::HeapMemoryUsage&callback=mycallback3"));
<     LOG.info("/jmx RESULT: "+result);
<     assertReFind("^mycallback3\\(\\{", result);
<     assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"", result);
<     assertReFind("\"committed\"\\s*:", result);
<     assertReFind("\\}\\);$", result);
< 
---
>     HttpURLConnection conn = (HttpURLConnection)
>         new URL(baseUrl, "/jmx?qry=java.lang:type=Memory").openConnection();
>     assertEquals("GET", conn.getHeaderField(ACCESS_CONTROL_ALLOW_METHODS));
>     assertNotNull(conn.getHeaderField(ACCESS_CONTROL_ALLOW_ORIGIN));
