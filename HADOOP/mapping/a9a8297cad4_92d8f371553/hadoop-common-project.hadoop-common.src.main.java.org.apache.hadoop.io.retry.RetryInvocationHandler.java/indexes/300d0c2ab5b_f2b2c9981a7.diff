45c45,113
<   private static class Counters {
---
>   static class Call {
>     private final Method method;
>     private final Object[] args;
>     private final boolean isRpc;
>     private final int callId;
>     final Counters counters;
> 
>     private final RetryPolicy retryPolicy;
>     private final RetryInvocationHandler<?> retryInvocationHandler;
> 
>     Call(Method method, Object[] args, boolean isRpc, int callId,
>          Counters counters, RetryInvocationHandler<?> retryInvocationHandler) {
>       this.method = method;
>       this.args = args;
>       this.isRpc = isRpc;
>       this.callId = callId;
>       this.counters = counters;
> 
>       this.retryPolicy = retryInvocationHandler.getRetryPolicy(method);
>       this.retryInvocationHandler = retryInvocationHandler;
>     }
> 
>     
>     synchronized CallReturn invokeOnce() {
>       try {
>         
>         
>         
>         final long failoverCount = retryInvocationHandler.getFailoverCount();
>         try {
>           return invoke();
>         } catch (Exception e) {
>           if (LOG.isTraceEnabled()) {
>             LOG.trace(this, e);
>           }
>           if (Thread.currentThread().isInterrupted()) {
>             
>             throw e;
>           }
>           retryInvocationHandler.handleException(
>               method, retryPolicy, failoverCount, counters, e);
>           return CallReturn.RETRY;
>         }
>       } catch(Throwable t) {
>         return new CallReturn(t);
>       }
>     }
> 
>     CallReturn invoke() throws Throwable {
>       return new CallReturn(invokeMethod());
>     }
> 
>     Object invokeMethod() throws Throwable {
>       if (isRpc) {
>         Client.setCallIdAndRetryCount(callId, counters.retries);
>       }
>       return retryInvocationHandler.invokeMethod(method, args);
>     }
> 
>     @Override
>     public String toString() {
>       return getClass().getSimpleName() + "#" + callId + ": "
>           + method.getDeclaringClass().getSimpleName() + "." + method.getName()
>           + "(" + (args == null || args.length == 0? "": Arrays.toString(args))
>           +  ")";
>     }
>   }
> 
>   static class Counters {
49a118,121
> 
>     boolean isZeros() {
>       return retries == 0 && failovers == 0;
>     }
147,148c219,220
<   private volatile boolean hasMadeASuccessfulCall = false;
<   
---
>   private volatile boolean hasSuccessfulCall = false;
> 
151a224,225
>   private final AsyncCallHandler asyncCallHandler = new AsyncCallHandler();
> 
169a244,257
>   private long getFailoverCount() {
>     return proxyDescriptor.getFailoverCount();
>   }
> 
>   private Call newCall(Method method, Object[] args, boolean isRpc, int callId,
>                        Counters counters) {
>     if (Client.isAsynchronousMode()) {
>       return asyncCallHandler.newAsyncCall(method, args, isRpc, callId,
>           counters, this);
>     } else {
>       return new Call(method, args, isRpc, callId, counters, this);
>     }
>   }
> 
175,181c263
<     return invoke(method, args, isRpc, callId, new Counters());
<   }
< 
<   private Object invoke(final Method method, final Object[] args,
<       final boolean isRpc, final int callId, final Counters counters)
<       throws Throwable {
<     final RetryPolicy policy = getRetryPolicy(method);
---
>     final Counters counters = new Counters();
182a265
>     final Call call = newCall(method, args, isRpc, callId, counters);
184,201c267,272
<       
<       
<       
<       final long failoverCount = proxyDescriptor.getFailoverCount();
< 
<       if (isRpc) {
<         Client.setCallIdAndRetryCount(callId, counters.retries);
<       }
<       try {
<         final Object ret = invokeMethod(method, args);
<         hasMadeASuccessfulCall = true;
<         return ret;
<       } catch (Exception ex) {
<         if (Thread.currentThread().isInterrupted()) {
<           
<           throw ex;
<         }
<         handleException(method, policy, failoverCount, counters, ex);
---
>       final CallReturn c = call.invokeOnce();
>       final CallReturn.State state = c.getState();
>       if (state == CallReturn.State.ASYNC_INVOKED) {
>         return null; 
>       } else if (c.getState() != CallReturn.State.RETRY) {
>         return c.getReturnValue();
242c313,314
<     final boolean info = hasMadeASuccessfulCall || failovers != 0;
---
>     final boolean info = hasSuccessfulCall || failovers != 0
>         || asyncCallHandler.hasSuccessfulCall();
268c340,342
<       return method.invoke(proxyDescriptor.getProxy(), args);
---
>       final Object r = method.invoke(proxyDescriptor.getProxy(), args);
>       hasSuccessfulCall = true;
>       return r;
