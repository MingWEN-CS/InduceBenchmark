21,22d20
< import org.apache.commons.logging.Log;
< import org.apache.commons.logging.LogFactory;
27a26,28
> import org.apache.hadoop.util.Time;
> import org.slf4j.Logger;
> import org.slf4j.LoggerFactory;
44c45,46
<   public static final Log LOG = LogFactory.getLog(RetryInvocationHandler.class);
---
>   public static final Logger LOG = LoggerFactory.getLogger(
>       RetryInvocationHandler.class);
51c53
<     final Counters counters;
---
>     private final Counters counters = new Counters();
55a58,59
>     private RetryInfo retryInfo;
> 
57c61
<          Counters counters, RetryInvocationHandler<?> retryInvocationHandler) {
---
>          RetryInvocationHandler<?> retryInvocationHandler) {
62d65
<       this.counters = counters;
67a71,82
>     int getCallId() {
>       return callId;
>     }
> 
>     Counters getCounters() {
>       return counters;
>     }
> 
>     synchronized Long getWaitTime(final long now) {
>       return retryInfo == null? null: retryInfo.retryTime - now;
>     }
> 
70a86,89
>         if (retryInfo != null) {
>           return processWaitTimeAndRetryInfo();
>         }
> 
79c98
<             LOG.trace(this, e);
---
>             LOG.trace(toString(), e);
85,87c104,107
<           retryInvocationHandler.handleException(
<               method, retryPolicy, failoverCount, counters, e);
<           return CallReturn.RETRY;
---
> 
>           retryInfo = retryInvocationHandler.handleException(
>               method, callId, retryPolicy, counters, failoverCount, e);
>           return processWaitTimeAndRetryInfo();
93a114,153
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     CallReturn processWaitTimeAndRetryInfo() throws InterruptedIOException {
>       final Long waitTime = getWaitTime(Time.monotonicNow());
>       LOG.trace("#{} processRetryInfo: retryInfo={}, waitTime={}",
>           callId, retryInfo, waitTime);
>       if (waitTime != null && waitTime > 0) {
>         try {
>           Thread.sleep(retryInfo.delay);
>         } catch (InterruptedException e) {
>           Thread.currentThread().interrupt();
>           LOG.warn("Interrupted while waiting to retry", e);
>           InterruptedIOException intIOE = new InterruptedIOException(
>               "Retry interrupted");
>           intIOE.initCause(e);
>           throw intIOE;
>         }
>       }
>       processRetryInfo();
>       return CallReturn.RETRY;
>     }
> 
>     synchronized void processRetryInfo() {
>       counters.retries++;
>       if (retryInfo.isFailover()) {
>         retryInvocationHandler.proxyDescriptor.failover(
>             retryInfo.expectedFailoverCount, method, callId);
>         counters.failovers++;
>       }
>       retryInfo = null;
>     }
> 
100c160,161
<         Client.setCallIdAndRetryCount(callId, counters.retries);
---
>         Client.setCallIdAndRetryCount(callId, counters.retries,
>             retryInvocationHandler.asyncCallHandler);
149c210,211
<     synchronized void failover(long expectedFailoverCount, Method method) {
---
>     synchronized void failover(long expectedFailoverCount, Method method,
>                                int callId) {
156,157c218,219
<         LOG.warn("A failover has occurred since the start of "
<             + proxyInfo.getString(method.getName()));
---
>         LOG.warn("A failover has occurred since the start of call #" + callId
>             + " " + proxyInfo.getString(method.getName()));
174a237
>     private final long retryTime;
176,177c239,240
<     private final RetryAction failover;
<     private final RetryAction fail;
---
>     private final RetryAction action;
>     private final long expectedFailoverCount;
179c242
<     RetryInfo(long delay, RetryAction failover, RetryAction fail) {
---
>     RetryInfo(long delay, RetryAction action, long expectedFailoverCount) {
181,182c244,256
<       this.failover = failover;
<       this.fail = fail;
---
>       this.retryTime = Time.monotonicNow() + delay;
>       this.action = action;
>       this.expectedFailoverCount = expectedFailoverCount;
>     }
> 
>     boolean isFailover() {
>       return action != null
>           && action.action ==  RetryAction.RetryDecision.FAILOVER_AND_RETRY;
>     }
> 
>     boolean isFail() {
>       return action != null
>           && action.action ==  RetryAction.RetryDecision.FAIL;
186c260,262
<         Counters counters, boolean idempotentOrAtMostOnce) throws Exception {
---
>         Counters counters, boolean idempotentOrAtMostOnce,
>         long expectedFailoverCount) throws Exception {
>       RetryAction max = null;
188,190d263
<       RetryAction failover = null;
<       RetryAction retry = null;
<       RetryAction fail = null;
198,200c271
<         if (a.action == RetryAction.RetryDecision.FAIL) {
<           fail = a;
<         } else {
---
>         if (a.action != RetryAction.RetryDecision.FAIL) {
202,206d272
<           if (a.action == RetryAction.RetryDecision.FAILOVER_AND_RETRY) {
<             failover = a;
<           } else {
<             retry = a;
<           }
210a277,280
> 
>         if (max == null || max.action.compareTo(a.action) < 0) {
>           max = a;
>         }
213,214c283
<       return new RetryInfo(maxRetryDelay, failover,
<           failover == null && retry == null? fail: null);
---
>       return new RetryInfo(maxRetryDelay, max, expectedFailoverCount);
249,250c318,319
<   private Call newCall(Method method, Object[] args, boolean isRpc, int callId,
<                        Counters counters) {
---
>   private Call newCall(Method method, Object[] args, boolean isRpc,
>                        int callId) {
252,253c321
<       return asyncCallHandler.newAsyncCall(method, args, isRpc, callId,
<           counters, this);
---
>       return asyncCallHandler.newAsyncCall(method, args, isRpc, callId, this);
255c323
<       return new Call(method, args, isRpc, callId, counters, this);
---
>       return new Call(method, args, isRpc, callId, this);
264d331
<     final Counters counters = new Counters();
266c333
<     final Call call = newCall(method, args, isRpc, callId, counters);
---
>     final Call call = newCall(method, args, isRpc, callId);
278,285c345,351
<   private void handleException(final Method method, final RetryPolicy policy,
<       final long expectedFailoverCount, final Counters counters,
<       final Exception ex) throws Exception {
<     final RetryInfo retryInfo = RetryInfo.newRetryInfo(policy, ex, counters,
<         proxyDescriptor.idempotentOrAtMostOnce(method));
<     counters.retries++;
< 
<     if (retryInfo.fail != null) {
---
>   private RetryInfo handleException(final Method method, final int callId,
>       final RetryPolicy policy, final Counters counters,
>       final long expectFailoverCount, final Exception e) throws Exception {
>     final RetryInfo retryInfo = RetryInfo.newRetryInfo(policy, e,
>         counters, proxyDescriptor.idempotentOrAtMostOnce(method),
>         expectFailoverCount);
>     if (retryInfo.isFail()) {
287,288c353,354
<       if (retryInfo.fail.reason != null) {
<         LOG.warn("Exception while invoking "
---
>       if (retryInfo.action.reason != null) {
>         LOG.warn("Exception while invoking call #" + callId + " "
290c356
<             + ". Not retrying because " + retryInfo.fail.reason, ex);
---
>             + ". Not retrying because " + retryInfo.action.reason, e);
292c358
<       throw ex;
---
>       throw e;
295,316c361,362
<     
<     final boolean isFailover = retryInfo.failover != null;
< 
<     log(method, isFailover, counters.failovers, retryInfo.delay, ex);
< 
<     if (retryInfo.delay > 0) {
<       try {
<         Thread.sleep(retryInfo.delay);
<       } catch (InterruptedException e) {
<         Thread.currentThread().interrupt();
<         LOG.warn("Interrupted while waiting to retry", e);
<         InterruptedIOException intIOE = new InterruptedIOException(
<             "Retry interrupted");
<         intIOE.initCause(e);
<         throw intIOE;
<       }
<     }
< 
<     if (isFailover) {
<       proxyDescriptor.failover(expectedFailoverCount, method);
<       counters.failovers++;
<     }
---
>     log(method, retryInfo.isFailover(), counters.failovers, retryInfo.delay, e);
>     return retryInfo;
