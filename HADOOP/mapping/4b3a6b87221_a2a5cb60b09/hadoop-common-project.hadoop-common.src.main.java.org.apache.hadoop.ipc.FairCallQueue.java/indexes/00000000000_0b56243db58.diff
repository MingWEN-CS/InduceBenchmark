1a2,449
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.apache.hadoop.ipc;
> 
> import java.lang.ref.WeakReference;
> 
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.Iterator;
> import java.util.AbstractQueue;
> import java.util.HashMap;
> import java.util.concurrent.BlockingQueue;
> import java.util.concurrent.LinkedBlockingQueue;
> import java.util.concurrent.locks.ReentrantLock;
> import java.util.concurrent.locks.Condition;
> import java.util.concurrent.TimeUnit;
> import java.util.concurrent.atomic.AtomicLong;
> 
> import com.google.common.annotations.VisibleForTesting;
> import org.apache.commons.lang.NotImplementedException;
> import org.apache.commons.logging.Log;
> import org.apache.commons.logging.LogFactory;
> import org.apache.hadoop.conf.Configuration;
> import org.apache.hadoop.metrics2.util.MBeans;
> 
> 
> 
> 
> public class FairCallQueue<E extends Schedulable> extends AbstractQueue<E>
>   implements BlockingQueue<E> {
>   
>   public static final int    IPC_CALLQUEUE_PRIORITY_LEVELS_DEFAULT = 4;
>   public static final String IPC_CALLQUEUE_PRIORITY_LEVELS_KEY =
>     "faircallqueue.priority-levels";
> 
>   public static final Log LOG = LogFactory.getLog(FairCallQueue.class);
> 
>   
>   private final ArrayList<BlockingQueue<E>> queues;
> 
>   
>   private final ReentrantLock takeLock = new ReentrantLock();
>   private final Condition notEmpty = takeLock.newCondition();
>   private void signalNotEmpty() {
>     takeLock.lock();
>     try {
>       notEmpty.signal();
>     } finally {
>       takeLock.unlock();
>     }
>   }
> 
>   
>   private RpcScheduler scheduler;
> 
>   
>   private RpcMultiplexer multiplexer;
> 
>   
>   private final ArrayList<AtomicLong> overflowedCalls;
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   public FairCallQueue(int capacity, String ns, Configuration conf) {
>     int numQueues = parseNumQueues(ns, conf);
>     LOG.info("FairCallQueue is in use with " + numQueues + " queues.");
> 
>     this.queues = new ArrayList<BlockingQueue<E>>(numQueues);
>     this.overflowedCalls = new ArrayList<AtomicLong>(numQueues);
> 
>     for(int i=0; i < numQueues; i++) {
>       this.queues.add(new LinkedBlockingQueue<E>(capacity));
>       this.overflowedCalls.add(new AtomicLong(0));
>     }
> 
>     this.scheduler = new DecayRpcScheduler(numQueues, ns, conf);
>     this.multiplexer = new WeightedRoundRobinMultiplexer(numQueues, ns, conf);
> 
>     
>     MetricsProxy mp = MetricsProxy.getInstance(ns);
>     mp.setDelegate(this);
>   }
> 
>   
> 
> 
> 
> 
>   private static int parseNumQueues(String ns, Configuration conf) {
>     int retval = conf.getInt(ns + "." + IPC_CALLQUEUE_PRIORITY_LEVELS_KEY,
>       IPC_CALLQUEUE_PRIORITY_LEVELS_DEFAULT);
>     if(retval < 1) {
>       throw new IllegalArgumentException("numQueues must be at least 1");
>     }
>     return retval;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   private BlockingQueue<E> getFirstNonEmptyQueue(int startIdx) {
>     final int numQueues = this.queues.size();
>     for(int i=0; i < numQueues; i++) {
>       int idx = (i + startIdx) % numQueues; 
>       BlockingQueue<E> queue = this.queues.get(idx);
>       if (queue.size() != 0) {
>         return queue;
>       }
>     }
> 
>     
>     return null;
>   }
> 
>   
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   @Override
>   public void put(E e) throws InterruptedException {
>     int priorityLevel = scheduler.getPriorityLevel(e);
> 
>     final int numLevels = this.queues.size();
>     while (true) {
>       BlockingQueue<E> q = this.queues.get(priorityLevel);
>       boolean res = q.offer(e);
>       if (!res) {
>         
>         this.overflowedCalls.get(priorityLevel).getAndIncrement();
> 
>         
>         priorityLevel++;
> 
>         if (priorityLevel == numLevels) {
>           
>           
>           this.queues.get(priorityLevel-1).put(e);
>           break;
>         }
>       } else {
>         break;
>       }
>     }
> 
> 
>     signalNotEmpty();
>   }
> 
>   @Override
>   public boolean offer(E e, long timeout, TimeUnit unit)
>       throws InterruptedException {
>     int priorityLevel = scheduler.getPriorityLevel(e);
>     BlockingQueue<E> q = this.queues.get(priorityLevel);
>     boolean ret = q.offer(e, timeout, unit);
> 
>     signalNotEmpty();
> 
>     return ret;
>   }
> 
>   @Override
>   public boolean offer(E e) {
>     int priorityLevel = scheduler.getPriorityLevel(e);
>     BlockingQueue<E> q = this.queues.get(priorityLevel);
>     boolean ret = q.offer(e);
> 
>     signalNotEmpty();
> 
>     return ret;
>   }
> 
>   @Override
>   public E take() throws InterruptedException {
>     int startIdx = this.multiplexer.getAndAdvanceCurrentIndex();
> 
>     takeLock.lockInterruptibly();
>     try {
>       
>       for (;;) {
>         BlockingQueue<E> q = this.getFirstNonEmptyQueue(startIdx);
>         if (q != null) {
>           
>           E e = q.poll();
>           if (e != null) {
>             return e;
>           }
>         }
> 
>         notEmpty.await();
>       }
>     } finally {
>       takeLock.unlock();
>     }
>   }
> 
>   @Override
>   public E poll(long timeout, TimeUnit unit)
>       throws InterruptedException {
> 
>     int startIdx = this.multiplexer.getAndAdvanceCurrentIndex();
> 
>     long nanos = unit.toNanos(timeout);
>     takeLock.lockInterruptibly();
>     try {
>       for (;;) {
>         BlockingQueue<E> q = this.getFirstNonEmptyQueue(startIdx);
>         if (q != null) {
>           E e = q.poll();
>           if (e != null) {
>             
>             return e;
>           }
>         }
> 
>         if (nanos <= 0) {
>           
>           return null;
>         }
> 
>         try {
>           
>           
>           nanos = notEmpty.awaitNanos(nanos);
>         } catch (InterruptedException ie) {
>           notEmpty.signal(); 
>           throw ie;
>         }
>       }
>     } finally {
>       takeLock.unlock();
>     }
>   }
> 
>   
> 
> 
> 
>   @Override
>   public E poll() {
>     int startIdx = this.multiplexer.getAndAdvanceCurrentIndex();
> 
>     BlockingQueue<E> q = this.getFirstNonEmptyQueue(startIdx);
>     if (q == null) {
>       return null; 
>     }
> 
>     
>     return q.poll();
>   }
> 
>   
> 
> 
>   @Override
>   public E peek() {
>     BlockingQueue<E> q = this.getFirstNonEmptyQueue(0);
>     if (q == null) {
>       return null;
>     } else {
>       return q.peek();
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
>   @Override
>   public int size() {
>     int size = 0;
>     for (BlockingQueue q : this.queues) {
>       size += q.size();
>     }
>     return size;
>   }
> 
>   
> 
> 
>   @Override
>   public Iterator<E> iterator() {
>     throw new NotImplementedException();
>   }
> 
>   
> 
> 
> 
> 
> 
>   @Override
>   public int drainTo(Collection<? super E> c, int maxElements) {
>     int sum = 0;
>     for (BlockingQueue<E> q : this.queues) {
>       sum += q.drainTo(c, maxElements);
>     }
>     return sum;
>   }
> 
>   @Override
>   public int drainTo(Collection<? super E> c) {
>     int sum = 0;
>     for (BlockingQueue<E> q : this.queues) {
>       sum += q.drainTo(c);
>     }
>     return sum;
>   }
> 
>   
> 
> 
> 
> 
>   @Override
>   public int remainingCapacity() {
>     int sum = 0;
>     for (BlockingQueue q : this.queues) {
>       sum += q.remainingCapacity();
>     }
>     return sum;
>   }
> 
>   
> 
> 
> 
>   private static final class MetricsProxy implements FairCallQueueMXBean {
>     
>     private static final HashMap<String, MetricsProxy> INSTANCES =
>       new HashMap<String, MetricsProxy>();
> 
>     
>     private WeakReference<FairCallQueue> delegate;
> 
>     
>     private int revisionNumber = 0;
> 
>     private MetricsProxy(String namespace) {
>       MBeans.register(namespace, "FairCallQueue", this);
>     }
> 
>     public static synchronized MetricsProxy getInstance(String namespace) {
>       MetricsProxy mp = INSTANCES.get(namespace);
>       if (mp == null) {
>         
>         mp = new MetricsProxy(namespace);
>         INSTANCES.put(namespace, mp);
>       }
>       return mp;
>     }
> 
>     public void setDelegate(FairCallQueue obj) {
>       this.delegate = new WeakReference<FairCallQueue>(obj);
>       this.revisionNumber++;
>     }
> 
>     @Override
>     public int[] getQueueSizes() {
>       FairCallQueue obj = this.delegate.get();
>       if (obj == null) {
>         return new int[]{};
>       }
> 
>       return obj.getQueueSizes();
>     }
> 
>     @Override
>     public long[] getOverflowedCalls() {
>       FairCallQueue obj = this.delegate.get();
>       if (obj == null) {
>         return new long[]{};
>       }
> 
>       return obj.getOverflowedCalls();
>     }
> 
>     @Override public int getRevision() {
>       return revisionNumber;
>     }
>   }
> 
>   
>   public int[] getQueueSizes() {
>     int numQueues = queues.size();
>     int[] sizes = new int[numQueues];
>     for (int i=0; i < numQueues; i++) {
>       sizes[i] = queues.get(i).size();
>     }
>     return sizes;
>   }
> 
>   public long[] getOverflowedCalls() {
>     int numQueues = queues.size();
>     long[] calls = new long[numQueues];
>     for (int i=0; i < numQueues; i++) {
>       calls[i] = overflowedCalls.get(i).get();
>     }
>     return calls;
>   }
> 
>   
>   @VisibleForTesting
>   public void setScheduler(RpcScheduler newScheduler) {
>     this.scheduler = newScheduler;
>   }
> 
>   @VisibleForTesting
>   public void setMultiplexer(RpcMultiplexer newMux) {
>     this.multiplexer = newMux;
>   }
> }
