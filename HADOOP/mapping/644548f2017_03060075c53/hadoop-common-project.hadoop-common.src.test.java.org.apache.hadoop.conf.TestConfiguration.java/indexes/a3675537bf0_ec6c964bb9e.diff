52a53
> import org.mockito.Mockito;
150a152,156
>     
>     Configuration mock = Mockito.spy(conf);
>     Mockito.when(mock.getProperty("user.name")).thenReturn("hadoop_user");
>     Mockito.when(mock.getenv("FILE_NAME")).thenReturn("hello");
> 
155,156c161,162
<     declareProperty("my.base", "/tmp/${user.name}", UNSPEC);
<     declareProperty("my.file", "hello", "hello");
---
>     declareProperty("my.base", "/tmp/${user.name}", "/tmp/hadoop_user");
>     declareProperty("my.file", "${env.FILE_NAME}", "hello");
159c165
<     declareProperty("my.fullfile", "${my.base}/${my.file}${my.suffix}", UNSPEC);
---
>     declareProperty("my.fullfile", "${my.base}/${my.file}${my.suffix}", "/tmp/hadoop_user/hello.txt");
164c170
<     conf.addResource(fileResource);
---
>     mock.addResource(fileResource);
168,169c174,175
<       String gotVal = conf.get(p.name);
<       String gotRawVal = conf.getRaw(p.name);
---
>       String gotVal = mock.get(p.name);
>       String gotRawVal = mock.getRaw(p.name);
171,177c177
<       if (p.expectEval == UNSPEC) {
<         
<         
<         assertTrue(gotVal != null && -1 == gotVal.indexOf("${"));
<       } else {
<         assertEq(p.expectEval, gotVal);
<       }
---
>       assertEq(p.expectEval, gotVal);
181,182c181,214
<     assertTrue(conf.getInt("intvar", -1) == 42);
<     assertTrue(conf.getInt("my.int", -1) == 42);
---
>     assertTrue(mock.getInt("intvar", -1) == 42);
>     assertTrue(mock.getInt("my.int", -1) == 42);
>   }
> 
>   public void testEnvDefault() throws IOException {
>     Configuration mock = Mockito.spy(conf);
>     Mockito.when(mock.getenv("NULL_VALUE")).thenReturn(null);
>     Mockito.when(mock.getenv("EMPTY_VALUE")).thenReturn("");
>     Mockito.when(mock.getenv("SOME_VALUE")).thenReturn("some value");
> 
>     out=new BufferedWriter(new FileWriter(CONFIG));
>     startConfig();
> 
>     
>     declareProperty("null1", "${env.NULL_VALUE}", "${env.NULL_VALUE}");
>     declareProperty("null2", "${env.NULL_VALUE-a}", "a");
>     declareProperty("null3", "${env.NULL_VALUE:-b}", "b");
>     declareProperty("empty1", "${env.EMPTY_VALUE}", "");
>     declareProperty("empty2", "${env.EMPTY_VALUE-c}", "");
>     declareProperty("empty3", "${env.EMPTY_VALUE:-d}", "d");
>     declareProperty("some1", "${env.SOME_VALUE}", "some value");
>     declareProperty("some2", "${env.SOME_VALUE-e}", "some value");
>     declareProperty("some3", "${env.SOME_VALUE:-f}", "some value");
> 
>     
>     declareProperty("edge1", "${env.NULL_VALUE-g-h}", "g-h");
>     declareProperty("edge2", "${env.NULL_VALUE:-i:-j}", "i:-j");
>     declareProperty("edge3", "${env.NULL_VALUE-}", "");
>     declareProperty("edge4", "${env.NULL_VALUE:-}", "");
>     declareProperty("edge5", "${env.NULL_VALUE:}", "${env.NULL_VALUE:}");
> 
>     endConfig();
>     Path fileResource = new Path(CONFIG);
>     mock.addResource(fileResource);
184,190c216,222
<     Map<String, String> results = conf.getValByRegex("^my.*file$");
<     assertTrue(results.keySet().contains("my.relfile"));
<     assertTrue(results.keySet().contains("my.fullfile"));
<     assertTrue(results.keySet().contains("my.file"));
<     assertEquals(-1, results.get("my.relfile").indexOf("${"));
<     assertEquals(-1, results.get("my.fullfile").indexOf("${"));
<     assertEquals(-1, results.get("my.file").indexOf("${"));
---
>     for (Prop p : props) {
>       System.out.println("p=" + p.name);
>       String gotVal = mock.get(p.name);
>       String gotRawVal = mock.getRaw(p.name);
>       assertEq(p.val, gotRawVal);
>       assertEq(p.expectEval, gotVal);
>     }
250d281
<   final String UNSPEC = null;
