126a127
>     Method updateKafkaConfigs = UpgradeCatalog250.class.getDeclaredMethod("updateKafkaConfigs");
130a132
>         .addMockedMethod(updateKafkaConfigs)
138a141,143
>     upgradeCatalog250.updateKafkaConfigs();
>     expectLastCall().once();
> 
293a299,354
> 
>   @Test
>   public void testKafkaUpdateConfigs() throws Exception{
> 
>     Map<String, String> oldProperties = new HashMap<String, String>() {
>       {
>         put("kafka.timeline.metrics.host", "{{metric_collector_host}}");
>         put("kafka.timeline.metrics.port", "{{metric_collector_port}}");
>       }
>     };
>     Map<String, String> newProperties = new HashMap<String, String>() {
>       {
>         put("kafka.timeline.metrics.port", "{{metric_collector_port}}");
>       }
>     };
>     EasyMockSupport easyMockSupport = new EasyMockSupport();
> 
>     Clusters clusters = easyMockSupport.createNiceMock(Clusters.class);
>     final Cluster cluster = easyMockSupport.createNiceMock(Cluster.class);
>     Config mockKafkaBroker = easyMockSupport.createNiceMock(Config.class);
> 
>     expect(clusters.getClusters()).andReturn(new HashMap<String, Cluster>() {{
>       put("normal", cluster);
>     }}).once();
>     expect(cluster.getDesiredConfigByType("kafka-broker")).andReturn(mockKafkaBroker).atLeastOnce();
>     expect(mockKafkaBroker.getProperties()).andReturn(oldProperties).anyTimes();
> 
>     Injector injector = easyMockSupport.createNiceMock(Injector.class);
>     expect(injector.getInstance(Gson.class)).andReturn(null).anyTimes();
>     expect(injector.getInstance(MaintenanceStateHelper.class)).andReturn(null).anyTimes();
>     expect(injector.getInstance(KerberosHelper.class)).andReturn(createNiceMock(KerberosHelper.class)).anyTimes();
> 
>     replay(injector, clusters, mockKafkaBroker, cluster);
> 
>     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)
>       .addMockedMethod("createConfiguration")
>       .addMockedMethod("getClusters", new Class[] { })
>       .addMockedMethod("createConfig")
>       .withConstructor(createNiceMock(ActionManager.class), clusters, injector)
>       .createNiceMock();
> 
>     Injector injector2 = easyMockSupport.createNiceMock(Injector.class);
>     Capture<Map> propertiesCapture = EasyMock.newCapture();
> 
>     expect(injector2.getInstance(AmbariManagementController.class)).andReturn(controller).anyTimes();
>     expect(controller.getClusters()).andReturn(clusters).anyTimes();
>     expect(controller.createConfig(anyObject(Cluster.class), anyString(), capture(propertiesCapture), anyString(),
>       anyObject(Map.class))).andReturn(createNiceMock(Config.class)).once();
> 
>     replay(controller, injector2);
>     new UpgradeCatalog250(injector2).updateKafkaConfigs();
>     easyMockSupport.verifyAll();
> 
>     Map<String, String> updatedProperties = propertiesCapture.getValue();
>     assertTrue(Maps.difference(newProperties, updatedProperties).areEqual());
>   }
