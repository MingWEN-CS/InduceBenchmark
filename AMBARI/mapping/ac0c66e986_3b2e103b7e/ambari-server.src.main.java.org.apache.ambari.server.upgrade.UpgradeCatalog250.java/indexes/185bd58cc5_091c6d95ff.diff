47a48,50
>   private static final String KAFKA_BROKER = "kafka-broker";
>   private static final String KAFKA_TIMELINE_METRICS_HOST = "kafka.timeline.metrics.host";
> 
112a116
>     updateKafkaConfigs();
184c188,212
<         Collections.singletonList("AMBARI.ADMINISTRATOR:AMBARI"));
---
>       Collections.singletonList("AMBARI.ADMINISTRATOR:AMBARI"));
>   }
> 
>   protected void updateKafkaConfigs() throws AmbariException {
>     AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);
>     Clusters clusters = ambariManagementController.getClusters();
> 
>     if (clusters != null) {
>       Map<String, Cluster> clusterMap = clusters.getClusters();
> 
>       if (clusterMap != null && !clusterMap.isEmpty()) {
>         for (final Cluster cluster : clusterMap.values()) {
> 
>           Config kafkaBrokerConfig = cluster.getDesiredConfigByType(KAFKA_BROKER);
>           if (kafkaBrokerConfig != null) {
>             Map<String, String> kafkaBrokerProperties = kafkaBrokerConfig.getProperties();
> 
>             if (kafkaBrokerProperties != null && kafkaBrokerProperties.containsKey(KAFKA_TIMELINE_METRICS_HOST)) {
>               LOG.info("Removing kafka.timeline.metrics.host from kafka-broker");
>               removeConfigurationPropertiesFromCluster(cluster, KAFKA_BROKER, Collections.singleton("kafka.timeline.metrics.host"));
>             }
>           }
>         }
>       }
>     }
