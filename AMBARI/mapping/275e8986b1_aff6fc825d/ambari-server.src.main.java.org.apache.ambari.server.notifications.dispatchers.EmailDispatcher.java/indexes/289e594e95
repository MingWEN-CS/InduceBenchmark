
















package org.apache.ambari.server.notifications.dispatchers;

import java.util.Map.Entry;
import java.util.Properties;
import java.util.Timer;

import javax.mail.Authenticator;
import javax.mail.Message.RecipientType;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.apache.ambari.server.notifications.DispatchCredentials;
import org.apache.ambari.server.notifications.Notification;
import org.apache.ambari.server.notifications.NotificationDispatcher;
import org.apache.ambari.server.notifications.Recipient;
import org.apache.ambari.server.state.alert.TargetType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.inject.Singleton;












@Singleton
public class EmailDispatcher implements NotificationDispatcher {

  


  private static final Logger LOG = LoggerFactory.getLogger(EmailDispatcher.class);

  


  @Override
  public String getType() {
    return TargetType.EMAIL.name();
  }

  


  @Override
  public void dispatch(Notification notification) {
    LOG.info("Sending email: {}", notification);

    if (null == notification.DispatchProperties) {
      LOG.error("Unable to dispatch an email notification that does not contain SMTP properties");

      if (null != notification.Callback) {
        notification.Callback.onFailure(notification.CallbackIds);
      }

      return;
    }

    
    Properties properties = new Properties();
    for (Entry<String, String> entry : notification.DispatchProperties.entrySet()) {
      properties.put(entry.getKey(), entry.getValue());
    }

    
    if (null == notification.Recipients) {
      LOG.error("Unable to dispatch an email notification that does not have recipients");

      if (null != notification.Callback) {
        notification.Callback.onFailure(notification.CallbackIds);
      }

      return;
    }

    
    final Session session;
    EmailAuthenticator authenticator = null;

    if (null != notification.Credentials) {
      authenticator = new EmailAuthenticator(notification.Credentials);
    }

    session = Session.getInstance(properties, authenticator);

    try {
      
      MimeMessage message = new MimeMessage(session);

      for (Recipient recipient : notification.Recipients) {
        InternetAddress address = new InternetAddress(recipient.Identifier);
        message.addRecipient(RecipientType.TO, address);
      }

      message.setSubject(notification.Subject);
      message.setText(notification.Body, "UTF-8", "html");

      Transport.send(message);

      if (LOG.isDebugEnabled()) {
        LOG.debug("Successfully dispatched email to {}",
            notification.Recipients);
      }

      
      if (null != notification.Callback) {
        notification.Callback.onSuccess(notification.CallbackIds);
      }
    } catch (Exception exception) {
      LOG.error("Unable to dispatch notification via Email", exception);

      
      if (null != notification.Callback) {
        notification.Callback.onFailure(notification.CallbackIds);
      }
    } finally {
      try {
        session.getTransport().close();
      } catch (MessagingException me) {
        LOG.warn("Dispatcher unable to close SMTP transport", me);
      }
    }
  }

  


  @Override
  public boolean isDigestSupported() {
    return true;
  }

  



  private static final class EmailAuthenticator extends Authenticator{

    private final DispatchCredentials m_credentials;

    




    private EmailAuthenticator(DispatchCredentials credentials) {
      m_credentials = credentials;
    }

    


    @Override
    protected PasswordAuthentication getPasswordAuthentication() {
      return new PasswordAuthentication(m_credentials.UserName,
          m_credentials.Password);
    }
  }
}
