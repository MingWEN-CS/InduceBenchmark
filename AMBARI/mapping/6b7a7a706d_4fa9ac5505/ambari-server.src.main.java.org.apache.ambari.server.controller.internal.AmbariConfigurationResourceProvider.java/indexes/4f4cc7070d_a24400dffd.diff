17c17
< import java.util.Calendar;
---
> import java.util.Arrays;
20a21
> import java.util.HashSet;
24,25c25
< 
< import javax.inject.Inject;
---
> import java.util.TreeMap;
38,39c38,39
< import org.apache.ambari.server.events.AmbariEvent;
< import org.apache.ambari.server.events.AmbariLdapConfigChangedEvent;
---
> import org.apache.ambari.server.controller.utilities.PropertyHelper;
> import org.apache.ambari.server.events.AmbariConfigurationChangedEvent;
43d42
< import org.apache.ambari.server.orm.entities.ConfigurationBaseEntity;
44a44,45
> import org.apache.commons.collections.CollectionUtils;
> import org.apache.commons.lang.StringUtils;
48,51c49
< import com.google.common.collect.Sets;
< import com.google.gson.Gson;
< import com.google.gson.GsonBuilder;
< import com.google.inject.assistedinject.AssistedInject;
---
> import com.google.inject.Inject;
59,84d56
<   private static final String DEFAULT_VERSION_TAG = "Default version";
<   private static final Integer DEFAULT_VERSION = 1;
< 
<   
< 
< 
<   public enum ResourcePropertyId {
< 
<     ID("AmbariConfiguration/id"),
<     TYPE("AmbariConfiguration/type"),
<     VERSION("AmbariConfiguration/version"),
<     VERSION_TAG("AmbariConfiguration/version_tag"),
<     DATA("AmbariConfiguration/data");
< 
<     private String propertyId;
< 
<     ResourcePropertyId(String propertyId) {
<       this.propertyId = propertyId;
<     }
< 
<     String getPropertyId() {
<       return this.propertyId;
<     }
< 
<     public static ResourcePropertyId fromString(String propertyIdStr) {
<       ResourcePropertyId propertyIdFromStr = null;
86,97c58,59
<       for (ResourcePropertyId id : ResourcePropertyId.values()) {
<         if (id.getPropertyId().equals(propertyIdStr)) {
<           propertyIdFromStr = id;
<           break;
<         }
<       }
< 
<       if (propertyIdFromStr == null) {
<         throw new IllegalArgumentException("Unsupported property type: " + propertyIdStr);
<       }
< 
<       return propertyIdFromStr;
---
>   static final String AMBARI_CONFIGURATION_CATEGORY_PROPERTY_ID = PropertyHelper.getPropertyId("AmbariConfiguration", "category");
>   static final String AMBARI_CONFIGURATION_PROPERTIES_PROPERTY_ID = PropertyHelper.getPropertyId("AmbariConfiguration", "properties");
99,100c61,66
<     }
<   }
---
>   private static final Set<String> PROPERTIES = Collections.unmodifiableSet(
>       new HashSet<>(Arrays.asList(
>           AMBARI_CONFIGURATION_CATEGORY_PROPERTY_ID,
>           AMBARI_CONFIGURATION_PROPERTIES_PROPERTY_ID)
>       )
>   );
102,112c68,69
<   private static Set<String> PROPERTIES = Sets.newHashSet(
<     ResourcePropertyId.ID.getPropertyId(),
<     ResourcePropertyId.TYPE.getPropertyId(),
<     ResourcePropertyId.VERSION.getPropertyId(),
<     ResourcePropertyId.VERSION_TAG.getPropertyId(),
<     ResourcePropertyId.DATA.getPropertyId());
< 
<   private static Map<Resource.Type, String> PK_PROPERTY_MAP = Collections.unmodifiableMap(
<     new HashMap<Resource.Type, String>() {{
<       put(Resource.Type.AmbariConfiguration, ResourcePropertyId.ID.getPropertyId());
<     }}
---
>   private static final Map<Resource.Type, String> PK_PROPERTY_MAP = Collections.unmodifiableMap(
>       Collections.singletonMap(Resource.Type.AmbariConfiguration, AMBARI_CONFIGURATION_CATEGORY_PROPERTY_ID)
114a72,74
>   private static final Set<String> PK_PROPERTY_IDS = Collections.unmodifiableSet(
>       new HashSet<>(PK_PROPERTY_MAP.values())
>   );
122,125d81
< 
<   private Gson gson;
< 
<   @AssistedInject
128,129d83
<     setRequiredCreateAuthorizations(EnumSet.of(RoleAuthorization.AMBARI_MANAGE_CONFIGURATION));
<     setRequiredDeleteAuthorizations(EnumSet.of(RoleAuthorization.AMBARI_MANAGE_CONFIGURATION));
131c85,89
<     gson = new GsonBuilder().create();
---
>     Set<RoleAuthorization> authorizations = EnumSet.of(RoleAuthorization.AMBARI_MANAGE_CONFIGURATION);
>     setRequiredCreateAuthorizations(authorizations);
>     setRequiredDeleteAuthorizations(authorizations);
>     setRequiredUpdateAuthorizations(authorizations);
>     setRequiredGetAuthorizations(authorizations);
136c94
<     return Sets.newHashSet(ResourcePropertyId.ID.getPropertyId());
---
>     return PK_PROPERTY_IDS;
140,141c98,99
<   public RequestStatus createResourcesAuthorized(Request request) throws SystemException, UnsupportedPropertyException,
<     ResourceAlreadyExistsException, NoSuchParentResourceException {
---
>   public RequestStatus createResourcesAuthorized(Request request)
>       throws SystemException, UnsupportedPropertyException, ResourceAlreadyExistsException, NoSuchParentResourceException {
143,163c101
<     LOGGER.info("Creating new ambari configuration resource ...");
<     AmbariConfigurationEntity ambariConfigurationEntity = null;
<     try {
<       ambariConfigurationEntity = getEntityFromRequest(request);
<     } catch (AmbariException e) {
<       throw new NoSuchParentResourceException(e.getMessage());
<     }
< 
<     LOGGER.info("Persisting new ambari configuration: {} ", ambariConfigurationEntity);
< 
<     try {
<       ambariConfigurationDAO.create(ambariConfigurationEntity);
<     } catch (Exception e) {
<       LOGGER.error("Failed to create resource", e);
<       throw new ResourceAlreadyExistsException(e.getMessage());
<     }
< 
<     
<     
<     publisher.publish(new AmbariLdapConfigChangedEvent(AmbariEvent.AmbariEventType.LDAP_CONFIG_CHANGED,
<       ambariConfigurationEntity.getId()));
---
>     createOrAddProperties(null, request.getProperties(), true);
168d105
< 
171,172c108
<     UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
<     Set<Resource> resources = Sets.newHashSet();
---
>       UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
174,180c110,134
<     
<     List<AmbariConfigurationEntity> ambariConfigurationEntities = ambariConfigurationDAO.findAll();
<     for (AmbariConfigurationEntity ambariConfigurationEntity : ambariConfigurationEntities) {
<       try {
<         resources.add(toResource(ambariConfigurationEntity, getPropertyIds()));
<       } catch (AmbariException e) {
<         LOGGER.error("Error while retrieving ambari configuration", e);
---
>     return getResources(new Command<Set<Resource>>() {
>       @Override
>       public Set<Resource> invoke() throws AmbariException {
>         Set<Resource> resources = new HashSet<>();
>         Set<String> requestedIds = getRequestPropertyIds(request, predicate);
> 
>         if (CollectionUtils.isEmpty(requestedIds)) {
>           requestedIds = PROPERTIES;
>         }
> 
>         if (predicate == null) {
>           Set<Resource> _resources = getAmbariConfigurationResources(requestedIds, null);
>           if (!CollectionUtils.isEmpty(_resources)) {
>             resources.addAll(_resources);
>           }
>         } else {
>           for (Map<String, Object> propertyMap : getPropertyMaps(predicate)) {
>             Set<Resource> _resources = getAmbariConfigurationResources(requestedIds, propertyMap);
>             if (!CollectionUtils.isEmpty(_resources)) {
>               resources.addAll(_resources);
>             }
>           }
>         }
> 
>         return resources;
182,183c136
<     }
<     return resources;
---
>     });
185a139
> 
188c142
<     UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
---
>       UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
190c144
<     Long idFromRequest = Long.valueOf((String) PredicateHelper.getProperties(predicate).get(ResourcePropertyId.ID.getPropertyId()));
---
>     String categoryName = (String) PredicateHelper.getProperties(predicate).get(AMBARI_CONFIGURATION_CATEGORY_PROPERTY_ID);
192c146
<     if (null == idFromRequest) {
---
>     if (null == categoryName) {
195c149
<       LOGGER.debug("Deleting amari configuration with id: {}", idFromRequest);
---
>       LOGGER.debug("Deleting Ambari configuration with id: {}", categoryName);
197c151
<         ambariConfigurationDAO.removeByPK(idFromRequest);
---
>         ambariConfigurationDAO.removeByCategory(categoryName);
201d154
< 
205c158,164
<     publisher.publish(new AmbariLdapConfigChangedEvent(AmbariEvent.AmbariEventType.LDAP_CONFIG_CHANGED, idFromRequest));
---
>     publisher.publish(new AmbariConfigurationChangedEvent(categoryName));
>     return getRequestStatus(null);
>   }
> 
>   @Override
>   protected RequestStatus updateResourcesAuthorized(Request request, Predicate predicate)
>       throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
206a166,167
>     String categoryName = (String) PredicateHelper.getProperties(predicate).get(AMBARI_CONFIGURATION_CATEGORY_PROPERTY_ID);
>     createOrAddProperties(categoryName, request.getProperties(), false);
209d169
< 
212,222c172,173
<   @Override
<   protected RequestStatus updateResourcesAuthorized(Request request, Predicate predicate) throws SystemException,
<     UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
<     Long idFromRequest = Long.valueOf((String) PredicateHelper.getProperties(predicate).get(ResourcePropertyId.ID.getPropertyId()));
< 
<     AmbariConfigurationEntity persistedEntity = ambariConfigurationDAO.findByPK(idFromRequest);
<     if (persistedEntity == null) {
<       String errorMsg = String.format("Entity with primary key [ %s ] not found in the database.", idFromRequest);
<       LOGGER.error(errorMsg);
<       throw new NoSuchResourceException(errorMsg);
<     }
---
>   
> 
224d174
<     try {
226,231d175
<       AmbariConfigurationEntity entityFromRequest = getEntityFromRequest(request);
<       persistedEntity.getConfigurationBaseEntity().setVersionTag(entityFromRequest.getConfigurationBaseEntity().getVersionTag());
<       persistedEntity.getConfigurationBaseEntity().setVersion(entityFromRequest.getConfigurationBaseEntity().getVersion());
<       persistedEntity.getConfigurationBaseEntity().setType(entityFromRequest.getConfigurationBaseEntity().getType());
<       persistedEntity.getConfigurationBaseEntity().setConfigurationData(entityFromRequest.getConfigurationBaseEntity().getConfigurationData());
<       persistedEntity.getConfigurationBaseEntity().setConfigurationAttributes(entityFromRequest.getConfigurationBaseEntity().getConfigurationAttributes());
234,237d177
<       ambariConfigurationDAO.update(persistedEntity);
<     } catch (AmbariException e) {
<       throw new NoSuchParentResourceException(e.getMessage());
<     }
239,240d178
<     publisher.publish(new AmbariLdapConfigChangedEvent(AmbariEvent.AmbariEventType.LDAP_CONFIG_CHANGED,
<       persistedEntity.getId()));
243d180
<     return getRequestStatus(null);
245d181
<   }
247d182
<   private Resource toResource(AmbariConfigurationEntity entity, Set<String> requestedIds) throws AmbariException {
249,251d183
<     if (null == entity) {
<       throw new IllegalArgumentException("Null entity can't be transformed into a resource");
<     }
253,257d184
<     if (null == entity.getConfigurationBaseEntity()) {
<       throw new IllegalArgumentException("Invalid configuration entity can't be transformed into a resource");
<     }
<     Resource resource = new ResourceImpl(Resource.Type.AmbariConfiguration);
<     Set<Map<String, String>> configurationSet = gson.fromJson(entity.getConfigurationBaseEntity().getConfigurationData(), Set.class);
259,263c186,205
<     setResourceProperty(resource, ResourcePropertyId.ID.getPropertyId(), entity.getId(), requestedIds);
<     setResourceProperty(resource, ResourcePropertyId.TYPE.getPropertyId(), entity.getConfigurationBaseEntity().getType(), requestedIds);
<     setResourceProperty(resource, ResourcePropertyId.DATA.getPropertyId(), configurationSet, requestedIds);
<     setResourceProperty(resource, ResourcePropertyId.VERSION.getPropertyId(), entity.getConfigurationBaseEntity().getVersion(), requestedIds);
<     setResourceProperty(resource, ResourcePropertyId.VERSION_TAG.getPropertyId(), entity.getConfigurationBaseEntity().getVersionTag(), requestedIds);
---
>   private void createOrAddProperties(String defaultCategoryName, Set<Map<String, Object>> requestProperties, boolean removePropertiesIfNotSpecified)
>       throws SystemException {
>     
>     if (requestProperties != null) {
>       for (Map<String, Object> resourceProperties : requestProperties) {
>         Map<String, Map<String, String>> entityMap = parseProperties(defaultCategoryName, resourceProperties);
> 
>         if (entityMap != null) {
>           for (Map.Entry<String, Map<String, String>> entry : entityMap.entrySet()) {
>             String categoryName = entry.getKey();
> 
>             if (ambariConfigurationDAO.reconcileCategory(categoryName, entry.getValue(), removePropertiesIfNotSpecified)) {
>               
>               publisher.publish(new AmbariConfigurationChangedEvent(categoryName));
>             }
>           }
>         }
>       }
>     }
>   }
264a207,210
>   private Resource toResource(String categoryName, Map<String, String> properties, Set<String> requestedIds) {
>     Resource resource = new ResourceImpl(Resource.Type.AmbariConfiguration);
>     setResourceProperty(resource, AMBARI_CONFIGURATION_CATEGORY_PROPERTY_ID, categoryName, requestedIds);
>     setResourceProperty(resource, AMBARI_CONFIGURATION_PROPERTIES_PROPERTY_ID, properties, requestedIds);
268c214,217
<   private AmbariConfigurationEntity getEntityFromRequest(Request request) throws AmbariException {
---
>   
> 
> 
> 
270,271d218
<     AmbariConfigurationEntity ambariConfigurationEntity = new AmbariConfigurationEntity();
<     ambariConfigurationEntity.setConfigurationBaseEntity(new ConfigurationBaseEntity());
273,274d219
<     
<     Set<Map<String, Object>> resourcePropertiesSet = request.getProperties();
276,277c221,240
<     if (resourcePropertiesSet.size() != 1) {
<       throw new AmbariException("There must be only one resource specified in the request");
---
> 
>   private Map<String, Map<String, String>> parseProperties(String defaultCategoryName, Map<String, Object> resourceProperties) throws SystemException {
>     String categoryName = null;
>     Map<String, String> properties = new HashMap<>();
> 
>     for (Map.Entry<String, Object> entry : resourceProperties.entrySet()) {
>       String propertyName = entry.getKey();
> 
>       if (AMBARI_CONFIGURATION_CATEGORY_PROPERTY_ID.equals(propertyName)) {
>         if (entry.getValue() instanceof String) {
>           categoryName = (String) entry.getValue();
>         }
>       } else {
>         String propertyCategory = PropertyHelper.getPropertyCategory(entry.getKey());
>         if ((propertyCategory != null) && propertyCategory.equals(AMBARI_CONFIGURATION_PROPERTIES_PROPERTY_ID)) {
>           String name = PropertyHelper.getPropertyName(entry.getKey());
>           Object value = entry.getValue();
>           properties.put(name, (value == null) ? null : value.toString());
>         }
>       }
280,282c243,252
<     
<     if (getValueFromResourceProperties(ResourcePropertyId.TYPE, resourcePropertiesSet.iterator().next()) == null) {
<       throw new AmbariException("The configuration type must be set");
---
>     if (categoryName == null) {
>       categoryName = defaultCategoryName;
>     }
> 
>     if (StringUtils.isEmpty(categoryName)) {
>       throw new SystemException("The configuration type must be set");
>     }
> 
>     if (properties.isEmpty()) {
>       throw new SystemException("The configuration properties must be set");
284a255,256
>     return Collections.singletonMap(categoryName, properties);
>   }
286,287c258,259
<     for (ResourcePropertyId resourcePropertyId : ResourcePropertyId.values()) {
<       Object requestValue = getValueFromResourceProperties(resourcePropertyId, resourcePropertiesSet.iterator().next());
---
>   private Set<Resource> getAmbariConfigurationResources(Set<String> requestedIds, Map<String, Object> propertyMap) {
>     Set<Resource> resources = new HashSet<>();
289,309c261,283
<       switch (resourcePropertyId) {
<         case DATA:
<           if (requestValue == null) {
<             throw new IllegalArgumentException("No configuration data is provided in the request");
<           }
<           ambariConfigurationEntity.getConfigurationBaseEntity().setConfigurationData(gson.toJson(requestValue));
<           break;
<         case TYPE:
<           ambariConfigurationEntity.getConfigurationBaseEntity().setType((String) requestValue);
<           break;
<         case VERSION:
<           Integer version = (requestValue == null) ? DEFAULT_VERSION : Integer.valueOf((String) requestValue);
<           ambariConfigurationEntity.getConfigurationBaseEntity().setVersion((version));
<           break;
<         case VERSION_TAG:
<           String versionTag = requestValue == null ? DEFAULT_VERSION_TAG : (String) requestValue;
<           ambariConfigurationEntity.getConfigurationBaseEntity().setVersionTag(versionTag);
<           break;
<         default:
<           LOGGER.debug("Ignored property in the request: {}", resourcePropertyId);
<           break;
---
>     String categoryName = getStringProperty(propertyMap, AMBARI_CONFIGURATION_CATEGORY_PROPERTY_ID);
> 
>     List<AmbariConfigurationEntity> entities = (categoryName == null)
>         ? ambariConfigurationDAO.findAll()
>         : ambariConfigurationDAO.findByCategory(categoryName);
> 
>     if (entities != null) {
>       Map<String, Map<String, String>> configurations = new HashMap<>();
> 
>       for (AmbariConfigurationEntity entity : entities) {
>         String category = entity.getCategoryName();
>         Map<String, String> properties = configurations.get(category);
> 
>         if (properties == null) {
>           properties = new TreeMap<>();
>           configurations.put(category, properties);
>         }
> 
>         properties.put(entity.getPropertyName(), entity.getPropertyValue());
>       }
> 
>       for (Map.Entry<String, Map<String, String>> entry : configurations.entrySet()) {
>         resources.add(toResource(entry.getKey(), entry.getValue(), requestedIds));
312,313d285
<     ambariConfigurationEntity.getConfigurationBaseEntity().setCreateTimestamp(Calendar.getInstance().getTimeInMillis());
<     return ambariConfigurationEntity;
314a287
>     return resources;
317,319c290,291
<   private Object getValueFromResourceProperties(ResourcePropertyId resourcePropertyIdEnum, Map<String, Object> resourceProperties) {
<     LOGGER.debug("Locating resource property [{}] in the resource properties map ...", resourcePropertyIdEnum);
<     Object requestValue = null;
---
>   private String getStringProperty(Map<String, Object> propertyMap, String propertyId) {
>     String value = null;
321,323c293,297
<     if (resourceProperties.containsKey(resourcePropertyIdEnum.getPropertyId())) {
<       requestValue = resourceProperties.get(resourcePropertyIdEnum.getPropertyId());
<       LOGGER.debug("Found resource property {} in the resource properties map, value: {}", resourcePropertyIdEnum, requestValue);
---
>     if (propertyMap != null) {
>       Object o = propertyMap.get(propertyId);
>       if (o instanceof String) {
>         value = (String) o;
>       }
325,326d298
<     return requestValue;
<   }
327a300,301
>     return value;
>   }
