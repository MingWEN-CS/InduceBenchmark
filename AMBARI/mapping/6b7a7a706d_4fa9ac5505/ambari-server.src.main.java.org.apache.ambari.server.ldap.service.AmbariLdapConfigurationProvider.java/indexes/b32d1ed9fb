













package org.apache.ambari.server.ldap.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ambari.server.events.AmbariConfigurationChangedEvent;
import org.apache.ambari.server.events.publishers.AmbariEventPublisher;
import org.apache.ambari.server.ldap.domain.AmbariLdapConfiguration;
import org.apache.ambari.server.ldap.domain.AmbariLdapConfigurationFactory;
import org.apache.ambari.server.orm.dao.AmbariConfigurationDAO;
import org.apache.ambari.server.orm.entities.AmbariConfigurationEntity;
import org.apache.ambari.server.security.authorization.AmbariLdapAuthenticationProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.eventbus.Subscribe;
import com.google.inject.Inject;
import com.google.inject.Provider;
import com.google.inject.Singleton;











@Singleton
public class AmbariLdapConfigurationProvider implements Provider<AmbariLdapConfiguration> {

  private static final Logger LOGGER = LoggerFactory.getLogger(AmbariLdapAuthenticationProvider.class);
  private AmbariLdapConfiguration instance;

  @Inject
  private AmbariEventPublisher publisher;

  @Inject
  private Provider<AmbariConfigurationDAO> ambariConfigurationDAOProvider;

  @Inject
  private AmbariLdapConfigurationFactory ldapConfigurationFactory;

  @Inject
  public AmbariLdapConfigurationProvider() {
  }

  @Inject
  void register() {
    publisher.register(this);
  }

  @Override
  public AmbariLdapConfiguration get() {
    return instance != null ? instance : loadInstance();
  }

  




  private AmbariLdapConfiguration loadInstance() {
    List<AmbariConfigurationEntity> configEntities;

    LOGGER.info("Loading LDAP configuration ...");
    configEntities = ambariConfigurationDAOProvider.get().findByCategory("ldap-configuration");

    if (configEntities != null) {
      Map<String, Object> properties = toProperties(configEntities);
      instance = ldapConfigurationFactory.createLdapConfiguration(properties);
    }

    LOGGER.info("Loaded LDAP configuration instance: [ {} ]", instance);

    return instance;
  }

  private Map<String, Object> toProperties(List<AmbariConfigurationEntity> configEntities) {
    Map<String, Object> map = new HashMap<>();

    for (AmbariConfigurationEntity entity : configEntities) {
      map.put(entity.getPropertyName(), entity.getPropertyValue());
    }

    return map;
  }

  
  @Subscribe
  public void ambariLdapConfigChanged(AmbariConfigurationChangedEvent event) {
    LOGGER.info("LDAP config changed event received: {}", event);
    loadInstance();
    LOGGER.info("Refreshed LDAP config instance.");
  }
}
