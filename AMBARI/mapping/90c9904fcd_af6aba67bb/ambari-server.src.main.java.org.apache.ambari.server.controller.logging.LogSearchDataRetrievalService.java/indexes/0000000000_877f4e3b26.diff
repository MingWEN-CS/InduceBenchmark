1a2,231
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.apache.ambari.server.controller.logging;
> 
> import com.google.common.cache.Cache;
> import com.google.common.cache.CacheBuilder;
> import com.google.common.util.concurrent.AbstractService;
> import com.google.inject.Inject;
> import org.apache.ambari.server.AmbariService;
> import org.apache.ambari.server.configuration.Configuration;
> import org.apache.ambari.server.controller.AmbariManagementController;
> import org.apache.ambari.server.controller.AmbariServer;
> import org.slf4j.Logger;
> import org.slf4j.LoggerFactory;
> 
> import java.util.Set;
> import java.util.concurrent.Executor;
> import java.util.concurrent.Executors;
> import java.util.concurrent.TimeUnit;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> @AmbariService
> public class LogSearchDataRetrievalService extends AbstractService {
> 
>   private static Logger LOG = LoggerFactory.getLogger(LogSearchDataRetrievalService.class);
> 
>   @Inject
>   private Configuration configuration;
> 
>   
> 
> 
> 
> 
>   private Cache<String, Set<String>> logFileNameCache;
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   private Cache<String, String> logFileTailURICache;
> 
>   
> 
> 
> 
>   private Executor executor;
> 
>   @Override
>   protected void doStart() {
> 
>     LOG.debug("Initializing caches");
>     
>     logFileNameCache = CacheBuilder.newBuilder().expireAfterWrite(1, TimeUnit.HOURS).build();
>     
>     logFileTailURICache = CacheBuilder.newBuilder().expireAfterWrite(1, TimeUnit.HOURS).build();
> 
>     
>     executor = Executors.newSingleThreadExecutor();
>   }
> 
>   @Override
>   protected void doStop() {
>     LOG.debug("Invalidating LogSearch caches");
>     
>     logFileNameCache.invalidateAll();
> 
>     logFileTailURICache.invalidateAll();
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   public Set<String> getLogFileNames(String component, String host, String cluster) {
>     String key = generateKey(component, host);
> 
>     
>     Set<String> cacheResult =
>       logFileNameCache.getIfPresent(key);
> 
>     if (cacheResult != null) {
>       LOG.debug("LogFileNames result for key = {} found in cache", key);
>       return cacheResult;
>     } else {
>       
>       LOG.debug("LogFileNames result for key = {} not in cache, queueing up remote request", key);
>       startLogSearchFileNameRequest(host, component, cluster);
>     }
> 
>     return null;
>   }
> 
>   public String getLogFileTailURI(String baseURI, String component, String host, String cluster) {
>     String key = generateKey(component, host);
> 
>     String result = logFileTailURICache.getIfPresent(key);
>     if (result != null) {
>       
>       return result;
>     } else {
>       
>       LoggingRequestHelper helper =
>         new LoggingRequestHelperFactoryImpl().getHelper(getController(), cluster);
>       String tailFileURI =
>         helper.createLogFileTailURI(baseURI, component, host);
> 
>       if (tailFileURI != null) {
>         logFileTailURICache.put(key, tailFileURI);
>         return tailFileURI;
>       }
>     }
> 
>     return null;
>   }
> 
>   private void startLogSearchFileNameRequest(String host, String component, String cluster) {
>     executor.execute(new LogSearchFileNameRequestRunnable(host, component, cluster));
>   }
> 
>   private AmbariManagementController getController() {
>     return AmbariServer.getController();
>   }
> 
> 
> 
>   private static String generateKey(String component, String host) {
>     return component + "+" + host;
>   }
> 
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   private class LogSearchFileNameRequestRunnable implements Runnable {
> 
>     private final String host;
> 
>     private final String component;
> 
>     private final String cluster;
> 
>     private LogSearchFileNameRequestRunnable(String host, String component, String cluster) {
>       this.host = host;
>       this.component = component;
>       this.cluster = cluster;
>     }
> 
>     @Override
>     public void run() {
>       LOG.debug("LogSearchFileNameRequestRunnable: starting...");
>       LoggingRequestHelper helper =
>         new LoggingRequestHelperFactoryImpl().getHelper(getController(), cluster);
> 
>       if (helper != null) {
>         
>         Set<String> logFileNamesResult =
>           helper.sendGetLogFileNamesRequest(component, host);
> 
>         
>         if (logFileNamesResult != null) {
>           LOG.debug("LogSearchFileNameRequestRunnable: request was successful, updating cache");
>           logFileNameCache.put(generateKey(component, host), logFileNamesResult);
>         } else {
>           LOG.debug("LogSearchFileNameRequestRunnable: remote request was not successful");
>         }
>       } else {
>         LOG.debug("LogSearchFileNameRequestRunnable: request helper was null.  This may mean that LogSearch is not available, or could be a potential connection problem.");
>       }
>     }
>   }
> }
