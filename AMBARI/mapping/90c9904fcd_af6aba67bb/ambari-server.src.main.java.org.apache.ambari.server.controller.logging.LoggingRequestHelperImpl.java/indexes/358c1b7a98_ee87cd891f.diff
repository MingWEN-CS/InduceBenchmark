22a23
> import org.apache.ambari.server.configuration.ComponentSSLConfiguration;
37a39,43
> import javax.net.ssl.HttpsURLConnection;
> import javax.net.ssl.KeyManager;
> import javax.net.ssl.SSLContext;
> import javax.net.ssl.SSLSocketFactory;
> import javax.net.ssl.TrustManagerFactory;
38a45,46
> import java.io.File;
> import java.io.FileInputStream;
46a55,56
> import java.security.KeyStore;
> import java.security.SecureRandom;
96a107,108
>   private final String protocol;
> 
103,104c115,118
<   public LoggingRequestHelperImpl(String hostName, String portNumber, CredentialStoreService credentialStoreService, Cluster cluster) {
<     this(hostName, portNumber, credentialStoreService, cluster, new DefaultNetworkConnection());
---
>   private SSLSocketFactory sslSocketFactory;
> 
>   public LoggingRequestHelperImpl(String hostName, String portNumber, String protocol, CredentialStoreService credentialStoreService, Cluster cluster) {
>     this(hostName, portNumber, protocol, credentialStoreService, cluster, new DefaultNetworkConnection());
107c121
<   protected LoggingRequestHelperImpl(String hostName, String portNumber, CredentialStoreService credentialStoreService, Cluster cluster, NetworkConnection networkConnection) {
---
>   protected LoggingRequestHelperImpl(String hostName, String portNumber, String protocol, CredentialStoreService credentialStoreService, Cluster cluster, NetworkConnection networkConnection) {
109a124
>     this.protocol = protocol;
118c133
<       URI logSearchURI = createLogSearchQueryURI("http", queryParameters);
---
>       URI logSearchURI = createLogSearchQueryURI(protocol, queryParameters);
120a136
>       secure(httpURLConnection, protocol);
147a164,198
>   private void secure(HttpURLConnection connection, String protocol) {
>     if ("https".equals(protocol)) {
>       HttpsURLConnection secureConnection = (HttpsURLConnection) connection;
>       loadTrustStore();
>       secureConnection.setSSLSocketFactory(this.sslSocketFactory);
>     }
>   }
> 
>   private void loadTrustStore() {
>     if (this.sslSocketFactory == null) {
>       ComponentSSLConfiguration sslConfig = ComponentSSLConfiguration.instance();
>       String trustStorePath = sslConfig.getTruststorePath();
>       String trustStoreType = sslConfig.getTruststoreType();
>       String trustStorePassword = sslConfig.getTruststorePassword();
> 
>       if (trustStorePath == null || trustStorePassword == null) {
>         String trustStoreErrorMsg = "Can\'t load TrustStore. Truststore path or password is not set.";
>         LOG.error(trustStoreErrorMsg);
>         throw new IllegalStateException(trustStoreErrorMsg);
>       }
> 
>       try (FileInputStream in = new FileInputStream(new File(trustStorePath))) {
>         KeyStore e = KeyStore.getInstance(trustStoreType == null ? KeyStore.getDefaultType() : trustStoreType);
>         e.load(in, trustStorePassword.toCharArray());
>         TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
>         tmf.init(e);
>         SSLContext context = SSLContext.getInstance("TLS");
>         context.init((KeyManager[]) null, tmf.getTrustManagers(), (SecureRandom) null);
>         this.sslSocketFactory = context.getSocketFactory();
>       } catch (Exception ex) {
>         LOG.error("Unable to load TrustStore", ex);
>       }
>     }
>   }
> 
250c301
<       URI logLevelQueryURI = createLogLevelQueryURI("http", componentName, hostName);
---
>       URI logLevelQueryURI = createLogLevelQueryURI(protocol, componentName, hostName);
253c304,305
<       HttpURLConnection httpURLConnection = (HttpURLConnection) logLevelQueryURI.toURL().openConnection();
---
>       HttpURLConnection httpURLConnection  = (HttpURLConnection) logLevelQueryURI.toURL().openConnection();
>       secure(httpURLConnection, protocol);
