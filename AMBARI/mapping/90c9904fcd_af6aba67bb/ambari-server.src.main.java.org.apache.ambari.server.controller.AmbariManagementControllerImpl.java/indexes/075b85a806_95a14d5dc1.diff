91a92
> import org.apache.ambari.server.controller.internal.DeleteStatusMetaData;
3125a3127,3150
>   private void checkIfHostComponentsInDeleteFriendlyState(ServiceComponentHostRequest request, Cluster cluster) throws AmbariException {
>     Service service = cluster.getService(request.getServiceName());
>     ServiceComponent component = service.getServiceComponent(request.getComponentName());
>     ServiceComponentHost componentHost = component.getServiceComponentHost(request.getHostname());
> 
>     if (!componentHost.canBeRemoved()) {
>       throw new AmbariException("Host Component cannot be removed"
>               + ", clusterName=" + request.getClusterName()
>               + ", serviceName=" + request.getServiceName()
>               + ", componentName=" + request.getComponentName()
>               + ", hostname=" + request.getHostname()
>               + ", request=" + request);
>     }
> 
>     
>     
>     
>     if (!component.isClientComponent() &&
>             !componentHost.getState().isRemovableState()) {
>       throw new AmbariException("To remove master or slave components they must be in " +
>               "DISABLED/INIT/INSTALLED/INSTALL_FAILED/UNKNOWN state. Current=" + componentHost.getState() + ".");
>     }
>   }
> 
3227c3252
<   public RequestStatusResponse deleteHostComponents(
---
>   public DeleteStatusMetaData deleteHostComponents(
3230c3255
<     Set<ServiceComponentHostRequest> expanded = new HashSet<ServiceComponentHostRequest>();
---
>     Set<ServiceComponentHostRequest> expanded = new HashSet<>();
3257c3282,3283
<     Map<ServiceComponent, Set<ServiceComponentHost>> safeToRemoveSCHs = new HashMap<ServiceComponent, Set<ServiceComponentHost>>();
---
>     Map<ServiceComponent, Set<ServiceComponentHost>> safeToRemoveSCHs = new HashMap<>();
>     DeleteStatusMetaData deleteStatusMetaData = new DeleteStatusMetaData();
3282,3299d3307
<       if (!componentHost.canBeRemoved()) {
<         throw new AmbariException("Host Component cannot be removed"
<             + ", clusterName=" + request.getClusterName()
<             + ", serviceName=" + request.getServiceName()
<             + ", componentName=" + request.getComponentName()
<             + ", hostname=" + request.getHostname()
<             + ", request=" + request);
<       }
< 
<       
<       
<       
<       if (!component.isClientComponent() &&
<           !componentHost.getState().isRemovableState()) {
<         throw new AmbariException("To remove master or slave components they must be in " +
<             "DISABLED/INIT/INSTALLED/INSTALL_FAILED/UNKNOWN state. Current=" + componentHost.getState() + ".");
<       }
< 
3301,3303c3309,3316
< 
<       if (!safeToRemoveSCHs.containsKey(component)) {
<         safeToRemoveSCHs.put(component, new HashSet<ServiceComponentHost>());
---
>       try {
>         checkIfHostComponentsInDeleteFriendlyState(request, cluster);
>         if (!safeToRemoveSCHs.containsKey(component)) {
>           safeToRemoveSCHs.put(component, new HashSet<ServiceComponentHost>());
>         }
>         safeToRemoveSCHs.get(component).add(componentHost);
>       } catch (Exception ex) {
>         deleteStatusMetaData.addException(request.getHostname() + "/" + request.getComponentName(), ex);
3305d3317
<       safeToRemoveSCHs.get(component).add(componentHost);
3308,3309c3320
<     for (Entry<ServiceComponent, Set<ServiceComponentHost>> entry
<             : safeToRemoveSCHs.entrySet()) {
---
>     for (Entry<ServiceComponent, Set<ServiceComponentHost>> entry : safeToRemoveSCHs.entrySet()) {
3311,3360c3322,3324
<         String included_hostname = componentHost.getHostName();
<         String serviceName = entry.getKey().getServiceName();
<         String master_component_name = null;
<         String slave_component_name = componentHost.getServiceComponentName();
<         HostComponentAdminState desiredAdminState = componentHost.getComponentAdminState();
<         State slaveState = componentHost.getState();
<         
<         entry.getKey().deleteServiceComponentHosts(componentHost.getHostName());
<         
<         if (AmbariCustomCommandExecutionHelper.masterToSlaveMappingForDecom.containsValue(slave_component_name)
<                 && desiredAdminState.equals(HostComponentAdminState.DECOMMISSIONED)
<                 && slaveState.equals(State.INSTALLED)) {
< 
<           for (Entry<String, String> entrySet : AmbariCustomCommandExecutionHelper.masterToSlaveMappingForDecom.entrySet()) {
<             if (entrySet.getValue().equals(slave_component_name)) {
<               master_component_name = entrySet.getKey();
<             }
<           }
<           
<           if (!serviceName.equals(Service.Type.HBASE.toString())) {
<             HashMap<String, String> requestProperties = new HashMap<String, String>();
<             requestProperties.put("context", "Remove host " +
<                     included_hostname + " from exclude file");
<             requestProperties.put("exclusive", "true");
<             HashMap<String, String> params = new HashMap<String, String>();
<             params.put("included_hosts", included_hostname);
<             params.put("slave_type", slave_component_name);
<             params.put(AmbariCustomCommandExecutionHelper.UPDATE_EXCLUDE_FILE_ONLY, "true");
< 
<             
<             RequestResourceFilter resourceFilter
<                     = new RequestResourceFilter(serviceName, master_component_name, null);
<             
<             ExecuteActionRequest actionRequest = new ExecuteActionRequest(
<                     entry.getKey().getClusterName(), AmbariCustomCommandExecutionHelper.DECOMMISSION_COMMAND_NAME, null,
<                     Collections.singletonList(resourceFilter), null, params, true);
<             
<             createAction(actionRequest, requestProperties);
<           }
< 
<           
<           Cluster cluster = clusters.getCluster(entry.getKey().getClusterName());
<           Service service = cluster.getService(serviceName);
<           ServiceComponent sc = service.getServiceComponent(master_component_name);
< 
<           if (sc != null && sc.isMasterComponent()) {
<             for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
<               sch.setRestartRequired(true);
<             }
<           }
---
>         try {
>           deleteHostComponent(entry.getKey(), componentHost);
>           deleteStatusMetaData.addDeletedKey(componentHost.getHostName() + "/" + componentHost.getServiceComponentName());
3361a3326,3327
>         } catch (Exception ex) {
>           deleteStatusMetaData.addException(componentHost.getHostName() + "/" + componentHost.getServiceComponentName(), ex);
3362a3329,3330
>       }
>     }
3363a3332,3342
>     
>     
>     if (deleteStatusMetaData.getDeletedKeys().size() + deleteStatusMetaData.getExceptionForKeys().size() == 1) {
>       if (deleteStatusMetaData.getDeletedKeys().size() == 1) {
>         return null;
>       }
>       Exception ex =  deleteStatusMetaData.getExceptionForKeys().values().iterator().next();
>       if (ex instanceof AmbariException) {
>         throw (AmbariException)ex;
>       } else {
>         throw new AmbariException(ex.getMessage(), ex);
3371c3350,3404
<     return null;
---
>     return deleteStatusMetaData;
>   }
> 
>   private void deleteHostComponent(ServiceComponent serviceComponent, ServiceComponentHost componentHost) throws AmbariException {
>     String included_hostname = componentHost.getHostName();
>     String serviceName = serviceComponent.getServiceName();
>     String master_component_name = null;
>     String slave_component_name = componentHost.getServiceComponentName();
>     HostComponentAdminState desiredAdminState = componentHost.getComponentAdminState();
>     State slaveState = componentHost.getState();
>     
>     serviceComponent.deleteServiceComponentHosts(componentHost.getHostName());
>     
>     if (AmbariCustomCommandExecutionHelper.masterToSlaveMappingForDecom.containsValue(slave_component_name)
>             && desiredAdminState.equals(HostComponentAdminState.DECOMMISSIONED)
>             && slaveState.equals(State.INSTALLED)) {
> 
>       for (Entry<String, String> entrySet : AmbariCustomCommandExecutionHelper.masterToSlaveMappingForDecom.entrySet()) {
>         if (entrySet.getValue().equals(slave_component_name)) {
>           master_component_name = entrySet.getKey();
>         }
>       }
>       
>       if (!serviceName.equals(Service.Type.HBASE.toString())) {
>         HashMap<String, String> requestProperties = new HashMap<String, String>();
>         requestProperties.put("context", "Remove host " +
>                 included_hostname + " from exclude file");
>         requestProperties.put("exclusive", "true");
>         HashMap<String, String> params = new HashMap<String, String>();
>         params.put("included_hosts", included_hostname);
>         params.put("slave_type", slave_component_name);
>         params.put(AmbariCustomCommandExecutionHelper.UPDATE_EXCLUDE_FILE_ONLY, "true");
> 
>         
>         RequestResourceFilter resourceFilter
>                 = new RequestResourceFilter(serviceName, master_component_name, null);
>         
>         ExecuteActionRequest actionRequest = new ExecuteActionRequest(
>                 serviceComponent.getClusterName(), AmbariCustomCommandExecutionHelper.DECOMMISSION_COMMAND_NAME, null,
>                 Collections.singletonList(resourceFilter), null, params, true);
>         
>         createAction(actionRequest, requestProperties);
>       }
> 
>       
>       Cluster cluster = clusters.getCluster(serviceComponent.getClusterName());
>       Service service = cluster.getService(serviceName);
>       ServiceComponent sc = service.getServiceComponent(master_component_name);
> 
>       if (sc != null && sc.isMasterComponent()) {
>         for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
>           sch.setRestartRequired(true);
>         }
>       }
>     }
