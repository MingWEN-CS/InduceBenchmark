21a22,23
> import static java.util.stream.Collectors.groupingBy;
> 
50a53
> import org.apache.ambari.server.topology.validators.UnitValidatedProperty;
2046,2078d2048
< 
<   private static class MPropertyUpdater implements PropertyUpdater {
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     @Override
<     public String updateForClusterCreate(String propertyName,
<                                          String origValue,
<                                          Map<String, Map<String, String>> properties,
<                                          ClusterTopology topology) {
< 
<       return origValue.endsWith("m") ? origValue : origValue + 'm';
<     }
< 
<     @Override
<     public Collection<String> getRequiredHostGroups(String propertyName,
<                                                     String origValue,
<                                                     Map<String, Map<String, String>> properties,
<                                                     ClusterTopology topology) {
<       return Collections.emptySet();
<     }
<   }
< 
<   
< 
< 
2787,2800c2757
<     mHadoopEnvMap.put("namenode_heapsize", new MPropertyUpdater());
<     mHadoopEnvMap.put("namenode_opt_newsize", new MPropertyUpdater());
<     mHadoopEnvMap.put("namenode_opt_maxnewsize", new MPropertyUpdater());
<     mHadoopEnvMap.put("namenode_opt_permsize", new MPropertyUpdater());
<     mHadoopEnvMap.put("namenode_opt_maxpermsize", new MPropertyUpdater());
<     mHadoopEnvMap.put("dtnode_heapsize", new MPropertyUpdater());
<     mapredEnvMap.put("jtnode_opt_newsize", new MPropertyUpdater());
<     mapredEnvMap.put("jtnode_opt_maxnewsize", new MPropertyUpdater());
<     mapredEnvMap.put("jtnode_heapsize", new MPropertyUpdater());
<     hbaseEnvMap.put("hbase_master_heapsize", new MPropertyUpdater());
<     hbaseEnvMap.put("hbase_regionserver_heapsize", new MPropertyUpdater());
<     oozieEnvHeapSizeMap.put("oozie_heapsize", new MPropertyUpdater());
<     oozieEnvHeapSizeMap.put("oozie_permsize", new MPropertyUpdater());
<     zookeeperEnvMap.put("zk_server_heapsize", new MPropertyUpdater());
---
>     addUnitPropertyUpdaters();
2818a2776,2788
>   private static void addUnitPropertyUpdaters() {
>     Map<String, List<UnitValidatedProperty>> propsPerConfigType = UnitValidatedProperty.ALL
>       .stream()
>       .collect(groupingBy(UnitValidatedProperty::getConfigType));
>     for (String configType : propsPerConfigType.keySet()) {
>       Map<String, PropertyUpdater> unitUpdaters = new HashMap<>();
>       for (UnitValidatedProperty each : propsPerConfigType.get(configType)) {
>         unitUpdaters.put(each.getPropertyName(), new UnitUpdater(each.getServiceName(), each.getConfigType()));
>       }
>       mPropertyUpdaters.put(configType, unitUpdaters);
>     }
>   }
> 
