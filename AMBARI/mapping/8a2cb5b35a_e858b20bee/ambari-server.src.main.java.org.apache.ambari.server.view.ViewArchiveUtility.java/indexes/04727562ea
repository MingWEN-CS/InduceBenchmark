

















package org.apache.ambari.server.view;

import org.apache.ambari.server.view.configuration.ViewConfig;
import org.xml.sax.SAXException;

import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.jar.JarInputStream;




public class ViewArchiveUtility {

  


  private static final String VIEW_XML = "view.xml";
  private static final String WEB_INF_VIEW_XML = "WEB-INF/classes/" + VIEW_XML;
  private static final String VIEW_XSD = "view.xsd";


  

  








  public ViewConfig getViewConfigFromArchive(File archiveFile)
      throws MalformedURLException, JAXBException, IOException {
    ViewConfig res = null;
    InputStream configStream = null;
    try {
    ClassLoader cl = URLClassLoader.newInstance(new URL[]{archiveFile.toURI().toURL()});

    configStream = cl.getResourceAsStream(VIEW_XML);
    if (configStream == null) {
      configStream = cl.getResourceAsStream(WEB_INF_VIEW_XML);
    }

    JAXBContext jaxbContext       = JAXBContext.newInstance(ViewConfig.class);
    Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
    res = (ViewConfig) jaxbUnmarshaller.unmarshal(configStream);
    } finally {
      if (configStream != null) {
        configStream.close();
      }
    }
    return res;
  }

  











  public ViewConfig getViewConfigFromExtractedArchive(String archivePath, boolean validate)
      throws JAXBException, IOException, SAXException {
    ViewConfig res = null;
    InputStream  configStream = null;
    try {
    File configFile = new File(archivePath + File.separator + VIEW_XML);

    if (!configFile.exists()) {
      configFile = new File(archivePath + File.separator + WEB_INF_VIEW_XML);
    }

    if (validate) {
      validateConfig(new FileInputStream(configFile));
    }

    configStream     = new FileInputStream(configFile);
    JAXBContext  jaxbContext      = JAXBContext.newInstance(ViewConfig.class);
    Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
    res = (ViewConfig) jaxbUnmarshaller.unmarshal(configStream);
    } finally {
      if (configStream != null) {
        configStream.close();
      }
    }

    return res;
  }

  






  public File getFile(String path) {
    return new File(path);
  }

  






  public FileOutputStream getFileOutputStream(File file) throws FileNotFoundException {
    return new FileOutputStream(file);
  }

  






  public JarInputStream getJarFileStream(File file) throws IOException {
    return new JarInputStream(new FileInputStream(file));
  }


  

  







  protected void validateConfig(InputStream  configStream) throws SAXException, IOException {
    SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);

    URL schemaUrl = getClass().getClassLoader().getResource(VIEW_XSD);
    Schema schema = schemaFactory.newSchema(schemaUrl);

    schema.newValidator().validate(new StreamSource(configStream));
  }
}
