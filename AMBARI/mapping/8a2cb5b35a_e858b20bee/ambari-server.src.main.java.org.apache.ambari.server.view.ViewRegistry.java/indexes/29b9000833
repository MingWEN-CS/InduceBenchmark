

















package org.apache.ambari.server.view;

import com.google.common.collect.Sets;
import com.google.common.eventbus.AllowConcurrentEvents;
import com.google.common.eventbus.Subscribe;
import com.google.inject.AbstractModule;
import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.persist.Transactional;

import org.apache.ambari.server.AmbariException;
import org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl;
import org.apache.ambari.server.api.resources.SubResourceDefinition;
import org.apache.ambari.server.api.resources.ViewExternalSubResourceDefinition;
import org.apache.ambari.server.api.services.AmbariMetaInfo;
import org.apache.ambari.server.api.services.ViewExternalSubResourceService;
import org.apache.ambari.server.api.services.ViewSubResourceService;
import org.apache.ambari.server.configuration.ComponentSSLConfiguration;
import org.apache.ambari.server.configuration.Configuration;
import org.apache.ambari.server.controller.AmbariServer;
import org.apache.ambari.server.controller.AmbariSessionManager;
import org.apache.ambari.server.controller.spi.Resource;
import org.apache.ambari.server.controller.spi.ResourceProvider;
import org.apache.ambari.server.events.ServiceInstalledEvent;
import org.apache.ambari.server.events.publishers.AmbariEventPublisher;
import org.apache.ambari.server.orm.dao.MemberDAO;
import org.apache.ambari.server.orm.dao.PrivilegeDAO;
import org.apache.ambari.server.orm.dao.ResourceDAO;
import org.apache.ambari.server.orm.dao.ResourceTypeDAO;
import org.apache.ambari.server.orm.dao.UserDAO;
import org.apache.ambari.server.orm.dao.ViewDAO;
import org.apache.ambari.server.orm.dao.ViewInstanceDAO;
import org.apache.ambari.server.orm.entities.GroupEntity;
import org.apache.ambari.server.orm.entities.MemberEntity;
import org.apache.ambari.server.orm.entities.PermissionEntity;
import org.apache.ambari.server.orm.entities.PrincipalEntity;
import org.apache.ambari.server.orm.entities.PrivilegeEntity;
import org.apache.ambari.server.orm.entities.ResourceEntity;
import org.apache.ambari.server.orm.entities.ResourceTypeEntity;
import org.apache.ambari.server.orm.entities.UserEntity;
import org.apache.ambari.server.orm.entities.ViewEntity;
import org.apache.ambari.server.orm.entities.ViewEntityEntity;
import org.apache.ambari.server.orm.entities.ViewInstanceDataEntity;
import org.apache.ambari.server.orm.entities.ViewInstanceEntity;
import org.apache.ambari.server.orm.entities.ViewParameterEntity;
import org.apache.ambari.server.orm.entities.ViewResourceEntity;
import org.apache.ambari.server.security.SecurityHelper;
import org.apache.ambari.server.security.authorization.AmbariGrantedAuthority;
import org.apache.ambari.server.state.Clusters;
import org.apache.ambari.server.state.StackId;
import org.apache.ambari.server.state.stack.OsFamily;
import org.apache.ambari.server.utils.VersionUtils;
import org.apache.ambari.server.view.configuration.AutoInstanceConfig;
import org.apache.ambari.server.view.configuration.EntityConfig;
import org.apache.ambari.server.view.configuration.InstanceConfig;
import org.apache.ambari.server.view.configuration.ParameterConfig;
import org.apache.ambari.server.view.configuration.PermissionConfig;
import org.apache.ambari.server.view.configuration.PersistenceConfig;
import org.apache.ambari.server.view.configuration.PropertyConfig;
import org.apache.ambari.server.view.configuration.ResourceConfig;
import org.apache.ambari.server.view.configuration.ViewConfig;
import org.apache.ambari.server.view.validation.ValidationException;
import org.apache.ambari.view.ViewInstanceDefinition;
import org.apache.ambari.view.cluster.Cluster;
import org.apache.ambari.view.validation.Validator;
import org.apache.ambari.view.Masker;
import org.apache.ambari.view.SystemException;
import org.apache.ambari.view.View;
import org.apache.ambari.view.ViewContext;
import org.apache.ambari.view.ViewDefinition;
import org.apache.ambari.view.ViewResourceHandler;
import org.apache.ambari.view.events.Event;
import org.apache.ambari.view.events.Listener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.GrantedAuthority;

import javax.inject.Inject;
import javax.inject.Provider;
import javax.inject.Singleton;

import java.beans.IntrospectionException;
import java.io.File;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;




@Singleton
public class ViewRegistry {

  


  private static final String EXTRACTED_ARCHIVES_DIR = "work";
  private static final String EXTRACT_COMMAND = "extract";
  private static final String ALL_VIEWS_REG_EXP = ".*";
  protected static final int DEFAULT_REQUEST_CONNECT_TIMEOUT = 5000;
  protected static final int DEFAULT_REQUEST_READ_TIMEOUT    = 10000;
  private static final String VIEW_AMBARI_VERSION_REGEXP = "^((\\d+\\.)?)*(\\*|\\d+)$";

  


  private static ExecutorService executorService;

  


  private Map<String, ViewEntity> viewDefinitions = new HashMap<String, ViewEntity>();

  


  private Map<ViewEntity, Map<String, ViewInstanceEntity>> viewInstanceDefinitions =
      new HashMap<ViewEntity, Map<String, ViewInstanceEntity>>();

  


  private final Map<String, Set<SubResourceDefinition>> subResourceDefinitionsMap =
      new ConcurrentHashMap<String, Set<SubResourceDefinition>>();

  


  private final Map<Resource.Type, ResourceProvider> resourceProviders =
      new ConcurrentHashMap<Resource.Type, ResourceProvider>();

  


  private final Map<String, Set<Listener>> listeners =
      new ConcurrentHashMap<String, Set<Listener>>();

  


  private static ViewRegistry singleton;

  


  protected final static Logger LOG = LoggerFactory.getLogger(ViewRegistry.class);

  


  @Inject
  ViewDAO viewDAO;

  


  @Inject
  ViewInstanceDAO instanceDAO;

  


  @Inject
  UserDAO userDAO;

  


  @Inject
  MemberDAO memberDAO;

  


  @Inject
  PrivilegeDAO privilegeDAO;

  


  @Inject
  SecurityHelper securityHelper;

  


  @Inject
  ResourceDAO resourceDAO;

  


  @Inject
  ResourceTypeDAO resourceTypeDAO;

  


  @Inject
  Provider<Clusters> clustersProvider;

  


  @Inject
  Provider<AmbariMetaInfo> ambariMetaInfoProvider;

  


  @Inject
  Configuration configuration;

  


  @Inject
  ViewInstanceHandlerList handlerList;

  


  @Inject
  ViewExtractor extractor;

  


  @Inject
  ViewArchiveUtility archiveUtility;

  


  @Inject
  AmbariSessionManager ambariSessionManager;


 

  


  @Inject
  public ViewRegistry(AmbariEventPublisher publisher) {
    publisher.register(this);
  }




  




  public static void main(String[] args) {

    if (args.length >= 2) {

      if (args[0].equals(EXTRACT_COMMAND)) {

        String     archivePath = args[1];
        ViewModule viewModule  = new ViewModule();

        try {
          if (extractViewArchive(archivePath, viewModule, true)) {
            System.exit(0);
          }
        } catch (Exception e) {
          String msg = "Caught exception extracting view archive " + archivePath + ".";
          LOG.error(msg, e);
          System.exit(2);
        }
      }
    }
    System.exit(1);
  }

  




  public Collection<ViewEntity> getDefinitions() {
    return viewDefinitions.values();
  }

  







  public ViewEntity getDefinition(String viewName, String version) {
    return getDefinition(ViewEntity.getViewName(viewName, version));
  }

  






  public ViewEntity getDefinition(ResourceTypeEntity resourceTypeEntity) {

    for (ViewEntity viewEntity : viewDefinitions.values()) {
      if (viewEntity.isDeployed()) {
        if (viewEntity.getResourceType().equals(resourceTypeEntity)) {
          return viewEntity;
        }
      }
    }
    return null;
  }

  




  public void addDefinition(ViewEntity definition) {
    viewDefinitions.put(definition.getName(), definition);
  }

  






  public Collection<ViewInstanceEntity> getInstanceDefinitions(ViewEntity definition) {
    if (definition != null) {
      Map<String, ViewInstanceEntity> instanceEntityMap = viewInstanceDefinitions.get(definition);
      if (instanceEntityMap != null) {
        return instanceEntityMap.values();
      }
    }
    return Collections.emptyList();
  }

  








  public ViewInstanceEntity getInstanceDefinition(String viewName, String version, String instanceName) {
    Map<String, ViewInstanceEntity> viewInstanceDefinitionMap =
        viewInstanceDefinitions.get(getDefinition(viewName, version));

    return viewInstanceDefinitionMap == null ? null : viewInstanceDefinitionMap.get(instanceName);
  }

  





  public void addInstanceDefinition(ViewEntity definition, ViewInstanceEntity instanceDefinition) {
    Map<String, ViewInstanceEntity> instanceDefinitions = viewInstanceDefinitions.get(definition);
    if (instanceDefinitions == null) {
      instanceDefinitions = new HashMap<String, ViewInstanceEntity>();
      viewInstanceDefinitions.put(definition, instanceDefinitions);
    }

    View view = definition.getView();
    if (view != null) {
      view.onCreate(instanceDefinition);
    }
    instanceDefinitions.put(instanceDefinition.getName(), instanceDefinition);
  }

  





  public void removeInstanceDefinition(ViewEntity definition, String instanceName) {
    Map<String, ViewInstanceEntity> instanceDefinitions = viewInstanceDefinitions.get(definition);
    if (instanceDefinitions != null) {

      ViewInstanceEntity instanceDefinition = instanceDefinitions.get(instanceName);
      if (instanceDefinition != null) {
        View view = definition.getView();
        if (view != null) {
          view.onDestroy(instanceDefinition);
        }
        instanceDefinitions.remove(instanceName);
      }
    }
  }

  




  public static void initInstance(ViewRegistry singleton) {
    ViewRegistry.singleton = singleton;
  }

  




  public static ViewRegistry getInstance() {
    return singleton;
  }

  







  public Set<SubResourceDefinition> getSubResourceDefinitions(
      String viewName, String version) {

    viewName = ViewEntity.getViewName(viewName, version);

    return subResourceDefinitionsMap.get(viewName);
  }
  


  public void readViewArchives() {
    readViewArchives(false, true, ALL_VIEWS_REG_EXP);
  }

  




  public void readViewArchives(String viewNameRegExp) {
    readViewArchives(false, false, viewNameRegExp);
  }

  






  public boolean instanceExists(ViewInstanceEntity instanceEntity) {

    ViewEntity viewEntity = getDefinition(instanceEntity.getViewName());

    return viewEntity != null &&
        (getInstanceDefinition(viewEntity.getCommonName(), viewEntity.getVersion(), instanceEntity.getName()) != null);
  }

  









  public void installViewInstance(ViewInstanceEntity instanceEntity)
      throws ValidationException, IllegalArgumentException, SystemException {
    ViewEntity viewEntity = getDefinition(instanceEntity.getViewName());

    if (viewEntity != null) {
      String instanceName = instanceEntity.getName();
      String viewName     = viewEntity.getCommonName();
      String version      = viewEntity.getVersion();

      if (getInstanceDefinition(viewName, version, instanceName) == null) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Creating view instance " + viewName + "/" +
              version + "/" + instanceName);
        }

        instanceEntity.validate(viewEntity, Validator.ValidationContext.PRE_CREATE);

        ResourceTypeEntity resourceTypeEntity = resourceTypeDAO.findByName(ViewEntity.getViewName(viewName, version));

        setPersistenceEntities(instanceEntity);

        ViewInstanceEntity persistedInstance = mergeViewInstance(instanceEntity, resourceTypeEntity);

        instanceEntity.setViewInstanceId(persistedInstance.getViewInstanceId());
        syncViewInstance(instanceEntity, persistedInstance);

        try {
          
          bindViewInstance(viewEntity, instanceEntity);
        } catch (Exception e) {
          String message = "Caught exception installing view instance.";
          LOG.error(message, e);
          throw new IllegalStateException(message, e);
        }
        
        addInstanceDefinition(viewEntity, instanceEntity);

        
        handlerList.addViewInstance(instanceEntity);
      }
    } else {
      String message = "Attempt to install an instance for an unknown view " +
          instanceEntity.getViewName() + ".";

      LOG.error(message);
      throw new IllegalArgumentException(message);
    }
  }

  







  public void updateViewInstance(ViewInstanceEntity instanceEntity)
      throws ValidationException, SystemException {
    ViewEntity viewEntity = getDefinition(instanceEntity.getViewName());

    if (viewEntity != null) {
      instanceEntity.validate(viewEntity, Validator.ValidationContext.PRE_UPDATE);
      instanceDAO.merge(instanceEntity);

      syncViewInstance(instanceEntity);
    }
  }

  







  public ViewInstanceEntity getViewInstanceEntity(String viewName, String instanceName) {
    return instanceDAO.findByName(viewName, instanceName);
  }

  





  @Transactional
  public void uninstallViewInstance(ViewInstanceEntity instanceEntity) throws IllegalStateException {
    ViewEntity viewEntity = getDefinition(instanceEntity.getViewName());

    if (viewEntity != null) {
      String instanceName = instanceEntity.getName();
      String viewName     = viewEntity.getCommonName();
      String version      = viewEntity.getVersion();

      if (getInstanceDefinition(viewName, version, instanceName) != null) {
        if (instanceEntity.isXmlDriven()) {
          throw new IllegalStateException("View instances defined via xml can't be deleted through api requests");
        }
        if (LOG.isDebugEnabled()) {
          LOG.debug("Deleting view instance " + viewName + "/" +
              version + "/" +instanceName);
        }
        List<PrivilegeEntity> instancePrivileges = privilegeDAO.findByResourceId(instanceEntity.getResource().getId());
        for (PrivilegeEntity privilegeEntity : instancePrivileges) {
          removePrivilegeEntity(privilegeEntity);
        }
        instanceDAO.remove(instanceEntity);
        viewEntity.removeInstanceDefinition(instanceName);
        removeInstanceDefinition(viewEntity, instanceName);

        
        handlerList.removeViewInstance(instanceEntity);
      }
    }
  }

  





  @Transactional
  public void removeInstanceData(ViewInstanceEntity instanceEntity, String key) {
    ViewInstanceDataEntity dataEntity = instanceEntity.getInstanceData(key);
    if (dataEntity != null) {
      instanceDAO.removeData(dataEntity);
    }
    instanceEntity.removeInstanceData(key);
    instanceDAO.merge(instanceEntity);
  }

  




  public void fireEvent(Event event) {

    ViewDefinition subject = event.getViewSubject();

    fireEvent(event, subject.getViewName());
    fireEvent(event, ViewEntity.getViewName(subject.getViewName(), subject.getVersion()));
  }

  






  public synchronized void registerListener(Listener listener, String viewName, String viewVersion) {

    String name = viewVersion == null ? viewName : ViewEntity.getViewName(viewName, viewVersion);

    Set<Listener> listeners = this.listeners.get(name);

    if (listeners == null) {
      listeners = Sets.newSetFromMap(new ConcurrentHashMap<Listener, Boolean>());
      this.listeners.put(name, listeners);
    }

    listeners.add(listener);
  }

  






  public synchronized void unregisterListener(Listener listener, String viewName, String viewVersion) {

    String name = viewVersion == null ? viewName : ViewEntity.getViewName(viewName, viewVersion);

    Set<Listener> listeners = this.listeners.get(name);

    if (listeners != null) {
      listeners.remove(listener);
    }
  }

  











  public boolean hasPermission(PermissionEntity permissionEntity, ResourceEntity resourceEntity, String userName) {

    UserEntity userEntity = userDAO.findUserByName(userName);

    if (userEntity == null) {
      return false;
    }

    if (privilegeDAO.exists(userEntity.getPrincipal(), resourceEntity, permissionEntity)) {
      return true;
    }

    List<MemberEntity> memberEntities = memberDAO.findAllMembersByUser(userEntity);

    for (MemberEntity memberEntity : memberEntities) {

      GroupEntity groupEntity = memberEntity.getGroup();

      if (privilegeDAO.exists(groupEntity.getPrincipal(), resourceEntity, permissionEntity)) {
        return true;
      }
    }
    return false;
  }

  











  public boolean checkPermission(String viewName, String version, String instanceName, boolean readOnly) {

    ViewInstanceEntity instanceEntity =
        instanceName == null ? null : getInstanceDefinition(viewName, version, instanceName);

    return checkPermission(instanceEntity, readOnly);
  }

  








  public boolean checkPermission(ViewInstanceEntity instanceEntity, boolean readOnly) {

    ResourceEntity resourceEntity = instanceEntity == null ? null : instanceEntity.getResource();

    return !configuration.getApiAuthentication() ||
        (resourceEntity == null && readOnly) || checkAuthorization(resourceEntity);
  }

  




  public boolean checkAdmin() {
    return checkAuthorization(null);
  }

  







  public boolean includeDefinition(ViewEntity definitionEntity) {

    if (checkPermission(null, false)) {
      return true;
    }

    for (ViewInstanceEntity instanceEntity: definitionEntity.getInstances()) {
      if (checkPermission(instanceEntity, true) ) {
        return true;
      }
    }
    return false;
  }

  









  public void setViewInstanceProperties(ViewInstanceEntity instanceEntity, Map<String, String> properties,
                                        ViewConfig viewConfig, ClassLoader classLoader) throws SystemException {
    try {
      Masker masker = getMasker(viewConfig.getMaskerClass(classLoader));

      Map<String, ParameterConfig> parameterConfigMap = new HashMap<String, ParameterConfig>();
      for (ParameterConfig paramConfig : viewConfig.getParameters()) {
        parameterConfigMap.put(paramConfig.getName(), paramConfig);
      }
      for (Map.Entry<String, String> entry : properties.entrySet()) {
        String name  = entry.getKey();
        String value = entry.getValue();

        ParameterConfig parameterConfig = parameterConfigMap.get(name);

        if (parameterConfig != null && parameterConfig.isMasked()) {
          value = masker.mask(value);
        }
        instanceEntity.putProperty(name, value);
      }
    } catch (Exception e) {
      throw new SystemException("Caught exception while setting instance property.", e);
    }
  }

  






  public Cluster getCluster(ViewInstanceDefinition viewInstance) {
    if (viewInstance != null) {
      String clusterId = viewInstance.getClusterHandle();

      if (clusterId != null) {
        try {
          return new ClusterImpl(clustersProvider.get().getCluster(clusterId));
        } catch (AmbariException e) {
          LOG.warn("Could not find the cluster identified by " + clusterId + ".");
        }
      }
    }
    return null;
  }

  






  @Subscribe
  @AllowConcurrentEvents
  public void onAmbariEvent(ServiceInstalledEvent event) {

    Clusters clusters  = clustersProvider.get();
    Long     clusterId = event.getClusterId();

    try {
      org.apache.ambari.server.state.Cluster cluster = clusters.getClusterById(clusterId);
      String clusterName = cluster.getClusterName();

      StackId     stackId       = cluster.getCurrentStackVersion();
      Set<String> serviceNames  = cluster.getServices().keySet();

      for (ViewEntity viewEntity : getDefinitions()) {

        String             viewName   = viewEntity.getName();
        ViewConfig         viewConfig = viewEntity.getConfiguration();
        AutoInstanceConfig autoConfig = viewConfig.getAutoInstance();

        try {
          if (checkAutoInstanceConfig(autoConfig, stackId, event.getServiceName(), serviceNames)) {

            LOG.info("Auto creating instance of view " + viewName + " for cluster " + clusterName + ".");
            ViewInstanceEntity viewInstanceEntity = createViewInstanceEntity(viewEntity, viewConfig, autoConfig);
            viewInstanceEntity.setClusterHandle(clusterName);
            installViewInstance(viewInstanceEntity);
          }
        } catch (Exception e) {
          LOG.error("Can't auto create instance of view " + viewName + " for cluster " + clusterName +
              ".  Caught exception :" + e.getMessage(), e);
        }
      }
    } catch (AmbariException e) {
      LOG.warn("Unknown cluster id " + clusterId + ".");
    }
  }


  

  










  private boolean checkAutoInstanceConfig(AutoInstanceConfig autoConfig, StackId stackId,
                                          String serviceName, Set<String> serviceNames) {

    if (autoConfig != null) {
      List<String> autoCreateServices = autoConfig.getServices();

      if (autoCreateServices != null && autoCreateServices.contains(serviceName) &&
          serviceNames.containsAll(autoCreateServices)) {

        String configStackId = autoConfig.getStackId();

        if (configStackId != null) {
          StackId id = new StackId(configStackId);

          if (id.getStackName().equals(stackId.getStackName())) {

            String stackVersion       = stackId.getStackVersion();
            String configStackVersion = id.getStackVersion();

            
            int compVal = 0;

            int index = configStackVersion.indexOf('*');
            if (index == -1) {
              compVal = VersionUtils.compareVersions(configStackVersion, stackVersion);
            } else  if (index > 0) {
              String[] parts = configStackVersion.substring(0, index).split("\\.");
              compVal = VersionUtils.compareVersions(configStackVersion, stackVersion, parts.length);
            }

            return compVal == 0;
          }
        }
      }
    }
    return false;
  }

  


  protected void clear() {
    viewDefinitions.clear();
    viewInstanceDefinitions.clear();
    subResourceDefinitionsMap.clear();
    listeners.clear();
  }

  




  protected Map<Resource.Type, ResourceProvider> getResourceProviders() {
    return resourceProviders;
  }

  
  private ViewEntity getDefinition(String viewName) {
    return viewDefinitions.get(viewName);
  }

  
  protected ViewEntity setupViewDefinition(ViewEntity viewDefinition, ClassLoader cl)
      throws ClassNotFoundException, IntrospectionException {

    ViewConfig viewConfig = viewDefinition.getConfiguration();

    viewDefinition.setClassLoader(cl);

    List<ParameterConfig> parameterConfigurations = viewConfig.getParameters();

    Collection<ViewParameterEntity> parameters = new HashSet<ViewParameterEntity>();

    String viewName = viewDefinition.getName();

    for (ParameterConfig parameterConfiguration : parameterConfigurations) {
      ViewParameterEntity viewParameterEntity =  new ViewParameterEntity();

      viewParameterEntity.setViewName(viewName);
      viewParameterEntity.setName(parameterConfiguration.getName());
      viewParameterEntity.setDescription(parameterConfiguration.getDescription());
      viewParameterEntity.setLabel(parameterConfiguration.getLabel());
      viewParameterEntity.setPlaceholder(parameterConfiguration.getPlaceholder());
      viewParameterEntity.setDefaultValue(parameterConfiguration.getDefaultValue());
      viewParameterEntity.setClusterConfig(parameterConfiguration.getClusterConfig());
      viewParameterEntity.setRequired(parameterConfiguration.isRequired());
      viewParameterEntity.setMasked(parameterConfiguration.isMasked());
      viewParameterEntity.setViewEntity(viewDefinition);
      parameters.add(viewParameterEntity);
    }
    viewDefinition.setParameters(parameters);

    List<ResourceConfig> resourceConfigurations = viewConfig.getResources();

    Resource.Type externalResourceType = viewDefinition.getExternalResourceType();

    ViewExternalSubResourceProvider viewExternalSubResourceProvider =
        new ViewExternalSubResourceProvider(externalResourceType, viewDefinition);
    viewDefinition.addResourceProvider(externalResourceType, viewExternalSubResourceProvider);

    resourceProviders.put(externalResourceType, viewExternalSubResourceProvider);

    ResourceInstanceFactoryImpl.addResourceDefinition(externalResourceType,
        new ViewExternalSubResourceDefinition(externalResourceType));

    Collection<ViewResourceEntity> resources = new HashSet<ViewResourceEntity>();
    for (ResourceConfig resourceConfiguration : resourceConfigurations) {
      ViewResourceEntity viewResourceEntity = new ViewResourceEntity();

      viewResourceEntity.setViewName(viewName);
      viewResourceEntity.setName(resourceConfiguration.getName());
      viewResourceEntity.setPluralName(resourceConfiguration.getPluralName());
      viewResourceEntity.setIdProperty(resourceConfiguration.getIdProperty());
      viewResourceEntity.setResource(resourceConfiguration.getResource());
      viewResourceEntity.setService(resourceConfiguration.getService());
      viewResourceEntity.setProvider(resourceConfiguration.getProvider());
      viewResourceEntity.setSubResourceNames(resourceConfiguration.getSubResourceNames());
      viewResourceEntity.setViewEntity(viewDefinition);

      ViewSubResourceDefinition resourceDefinition = new ViewSubResourceDefinition(viewDefinition, resourceConfiguration);
      viewDefinition.addResourceDefinition(resourceDefinition);

      Resource.Type type = resourceDefinition.getType();
      viewDefinition.addResourceConfiguration(type, resourceConfiguration);

      if (resourceConfiguration.isExternal()) {
        viewExternalSubResourceProvider.addResourceName(resourceConfiguration.getName());
      } else {
        ResourceInstanceFactoryImpl.addResourceDefinition(type, resourceDefinition);

        Class<?> clazz      = resourceConfiguration.getResourceClass(cl);
        String   idProperty = resourceConfiguration.getIdProperty();

        ViewSubResourceProvider provider = new ViewSubResourceProvider(type, clazz, idProperty, viewDefinition);
        viewDefinition.addResourceProvider(type, provider);
        resourceProviders.put(type, provider);

        resources.add(viewResourceEntity);
      }
      viewDefinition.setResources(resources);
    }

    ResourceTypeEntity resourceTypeEntity = new ResourceTypeEntity();
    resourceTypeEntity.setName(viewName);

    viewDefinition.setResourceType(resourceTypeEntity);

    List<PermissionConfig> permissionConfigurations = viewConfig.getPermissions();

    Collection<PermissionEntity> permissions = new HashSet<PermissionEntity>();
    for (PermissionConfig permissionConfiguration : permissionConfigurations) {
      PermissionEntity permissionEntity =  new PermissionEntity();

      permissionEntity.setPermissionName(permissionConfiguration.getName());
      permissionEntity.setResourceType(resourceTypeEntity);
      permissions.add(permissionEntity);
    }
    viewDefinition.setPermissions(permissions);

    View view = null;
    if (viewConfig.getView() != null) {
      view = getView(viewConfig.getViewClass(cl), new ViewContextImpl(viewDefinition, this));
    }
    viewDefinition.setView(view);
    Validator validator = null;
    if (viewConfig.getValidator() != null) {
      validator = getValidator(viewConfig.getValidatorClass(cl), new ViewContextImpl(viewDefinition, this));
    }
    viewDefinition.setValidator(validator);
    viewDefinition.setMask(viewConfig.getMasker());

    Set<SubResourceDefinition> subResourceDefinitions = new HashSet<SubResourceDefinition>();
    for (Resource.Type type : viewDefinition.getViewResourceTypes()) {
      subResourceDefinitions.add(new SubResourceDefinition(type));
    }
    subResourceDefinitionsMap.put(viewName, subResourceDefinitions);

    return viewDefinition;
  }

  
  protected ViewInstanceEntity createViewInstanceDefinition(ViewConfig viewConfig, ViewEntity viewDefinition,
                                                            InstanceConfig instanceConfig)
      throws ValidationException, ClassNotFoundException, SystemException {
    ViewInstanceEntity viewInstanceDefinition = createViewInstanceEntity(viewDefinition, viewConfig, instanceConfig);
    viewInstanceDefinition.validate(viewDefinition, Validator.ValidationContext.PRE_CREATE);

    bindViewInstance(viewDefinition, viewInstanceDefinition);
    return viewInstanceDefinition;
  }

  
  private ViewInstanceEntity createViewInstanceEntity(ViewEntity viewDefinition, ViewConfig viewConfig,
                                                      InstanceConfig instanceConfig)
      throws SystemException {
    ViewInstanceEntity viewInstanceDefinition =
        new ViewInstanceEntity(viewDefinition, instanceConfig);

    Map<String, String> properties = new HashMap<String, String>();

    for (PropertyConfig propertyConfig : instanceConfig.getProperties()) {
      properties.put(propertyConfig.getKey(), propertyConfig.getValue());
    }
    setViewInstanceProperties(viewInstanceDefinition, properties, viewConfig, viewDefinition.getClassLoader());

    setPersistenceEntities(viewInstanceDefinition);

    return viewInstanceDefinition;
  }

  
  protected void bindViewInstance(ViewEntity viewDefinition,
                                   ViewInstanceEntity viewInstanceDefinition)
      throws ClassNotFoundException {
    viewInstanceDefinition.setViewEntity(viewDefinition);

    ViewContext viewInstanceContext = new ViewContextImpl(viewInstanceDefinition, this);

    ViewExternalSubResourceService externalSubResourceService =
        new ViewExternalSubResourceService(viewDefinition.getExternalResourceType(), viewInstanceDefinition);

    viewInstanceDefinition.addService(ResourceConfig.EXTERNAL_RESOURCE_PLURAL_NAME, externalSubResourceService);

    Collection<ViewSubResourceDefinition> resourceDefinitions = viewDefinition.getResourceDefinitions().values();
    for (ViewSubResourceDefinition resourceDefinition : resourceDefinitions) {

      Resource.Type  type           = resourceDefinition.getType();
      ResourceConfig resourceConfig = resourceDefinition.getResourceConfiguration();

      ViewResourceHandler viewResourceService = new ViewSubResourceService(type, viewInstanceDefinition);

      ClassLoader cl = viewDefinition.getClassLoader();

      Object service = getService(resourceConfig.getServiceClass(cl), viewResourceService, viewInstanceContext);

      if (resourceConfig.isExternal()) {
        externalSubResourceService.addResourceService(resourceConfig.getName(), service);
      } else {
        viewInstanceDefinition.addService(viewDefinition.getResourceDefinition(type).getPluralName(),service);
        viewInstanceDefinition.addResourceProvider(type,
            getProvider(resourceConfig.getProviderClass(cl), viewInstanceContext));
      }
    }
    viewDefinition.addInstanceDefinition(viewInstanceDefinition);
  }

  
  private static void setPersistenceEntities(ViewInstanceEntity viewInstanceDefinition) {
    ViewEntity viewDefinition = viewInstanceDefinition.getViewEntity();
    ViewConfig viewConfig     = viewDefinition.getConfiguration();

    Collection<ViewEntityEntity> entities = new HashSet<ViewEntityEntity>();

    if (viewConfig != null) {
      PersistenceConfig persistenceConfig = viewConfig.getPersistence();

      if (persistenceConfig != null) {
        for (EntityConfig entityConfiguration : persistenceConfig.getEntities()) {
          ViewEntityEntity viewEntityEntity = new ViewEntityEntity();

          viewEntityEntity.setViewName(viewDefinition.getName());
          viewEntityEntity.setViewInstanceName(viewInstanceDefinition.getName());
          viewEntityEntity.setClassName(entityConfiguration.getClassName());
          viewEntityEntity.setIdProperty(entityConfiguration.getIdProperty());
          viewEntityEntity.setViewInstance(viewInstanceDefinition);

          entities.add(viewEntityEntity);
        }
      }
    }
    viewInstanceDefinition.setEntities(entities);
  }

  
  private static <T> T getService(Class<T> clazz,
                                  final ViewResourceHandler viewResourceHandler,
                                  final ViewContext viewInstanceContext) {
    Injector viewInstanceInjector = Guice.createInjector(new AbstractModule() {
      @Override
      protected void configure() {
        bind(ViewResourceHandler.class)
            .toInstance(viewResourceHandler);
        bind(ViewContext.class)
            .toInstance(viewInstanceContext);
      }
    });
    return viewInstanceInjector.getInstance(clazz);
  }

  
  private static org.apache.ambari.view.ResourceProvider getProvider(
      Class<? extends org.apache.ambari.view.ResourceProvider> clazz,
      final ViewContext viewInstanceContext) {
    Injector viewInstanceInjector = Guice.createInjector(new AbstractModule() {
      @Override
      protected void configure() {
        bind(ViewContext.class)
            .toInstance(viewInstanceContext);
      }
    });
    return viewInstanceInjector.getInstance(clazz);
  }

  
  private static View getView(Class<? extends View> clazz,
                              final ViewContext viewContext) {
    Injector viewInstanceInjector = Guice.createInjector(new AbstractModule() {
      @Override
      protected void configure() {
        bind(ViewContext.class)
            .toInstance(viewContext);
      }
    });
    return viewInstanceInjector.getInstance(clazz);
  }

  
  private static Validator getValidator(Class<? extends Validator> clazz,
                              final ViewContext viewContext) {
    Injector viewInstanceInjector = Guice.createInjector(new AbstractModule() {
      @Override
      protected void configure() {
        bind(ViewContext.class)
            .toInstance(viewContext);
      }
    });
    return viewInstanceInjector.getInstance(clazz);
  }

  
  private static Masker getMasker(Class<? extends Masker> clazz) {
    try {
      return clazz.newInstance();
    } catch (Exception e) {
      LOG.error("Could not create masker instance", e);
    }
    return null;
  }

  
  private void removeUndeployedViews() {
    for (ViewEntity viewEntity : viewDAO.findAll()) {
      String name = viewEntity.getName();
      if (!ViewRegistry.getInstance().viewDefinitions.containsKey(name)) {
        try {
          viewDAO.remove(viewEntity);
        } catch (Exception e) {
          LOG.error("Caught exception undeploying view " + viewEntity.getName(), e);
        }
      }
    }
  }

  








  private void syncView(ViewEntity view,
                        Set<ViewInstanceEntity> instanceDefinitions)
      throws Exception {

    String             viewName      = view.getName();
    ViewEntity         persistedView = viewDAO.findByName(viewName);
    ResourceTypeEntity resourceType  = view.getResourceType();

    if (LOG.isDebugEnabled()) {
      LOG.debug("Syncing view " + viewName + ".");
    }

    
    if (persistedView == null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Creating view " + viewName + ".");
      }

      
      ResourceTypeEntity resourceTypeEntity = resourceTypeDAO.findByName(viewName);
      if (resourceTypeEntity == null) {
        resourceTypeEntity = resourceType;
        if (LOG.isDebugEnabled()) {
          LOG.debug("Creating resource type for " + viewName + ".");
        }
        resourceTypeDAO.create(resourceTypeEntity);
      }

      for( ViewInstanceEntity instance : view.getInstances()) {
        instance.setResource(createViewInstanceResource(resourceType));
      }
      
      persistedView = viewDAO.merge(view);
    }

    view.setResourceType(persistedView.getResourceType());
    view.setPermissions(persistedView.getPermissions());

    
    for (ViewInstanceEntity persistedInstance : persistedView.getInstances()){

      String             instanceName = persistedInstance.getName();
      ViewInstanceEntity instance     = view.getInstanceDefinition(instanceName);

      
      if (instance == null) {
        if (persistedInstance.isXmlDriven()) {
          
          
          instanceDAO.remove(persistedInstance);
        } else {
          
          
          instanceDAO.merge(persistedInstance);
          bindViewInstance(view, persistedInstance);
          instanceDefinitions.add(persistedInstance);
        }
      } else {
        syncViewInstance(instance, persistedInstance);
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Syncing view " + viewName + " complete.");
    }
  }

  
  private void syncViewInstance(ViewInstanceEntity instanceEntity) {
    String viewName     = instanceEntity.getViewDefinition().getViewName();
    String version      = instanceEntity.getViewDefinition().getVersion();
    String instanceName = instanceEntity.getInstanceName();

    ViewInstanceEntity registryEntry = getInstanceDefinition(viewName, version, instanceName);
    if (registryEntry != null) {
      syncViewInstance(registryEntry, instanceEntity);
    }
  }

  
  private void syncViewInstance(ViewInstanceEntity instance1, ViewInstanceEntity instance2) {
    instance1.setLabel(instance2.getLabel());
    instance1.setDescription(instance2.getDescription());
    instance1.setVisible(instance2.isVisible());
    instance1.setResource(instance2.getResource());
    instance1.setViewInstanceId(instance2.getViewInstanceId());
    instance1.setClusterHandle(instance2.getClusterHandle());
    instance1.setData(instance2.getData());
    instance1.setEntities(instance2.getEntities());
    instance1.setProperties(instance2.getProperties());
  }

  
  @Transactional
  private ViewInstanceEntity mergeViewInstance(ViewInstanceEntity instanceEntity, ResourceTypeEntity resourceTypeEntity) {
    
    instanceEntity.setResource(createViewInstanceResource(resourceTypeEntity));

    return instanceDAO.merge(instanceEntity);
  }

  
  private ResourceEntity createViewInstanceResource(ResourceTypeEntity resourceTypeEntity) {
    ResourceEntity resourceEntity = new ResourceEntity();
    resourceEntity.setResourceType(resourceTypeEntity);
    resourceDAO.create(resourceEntity);
    return resourceEntity;
  }

  
  private void fireEvent(Event event, String viewName) {
    Set<Listener> listeners = this.listeners.get(viewName);

    if (listeners != null) {
      for (Listener listener : listeners) {
        listener.notify(event);
      }
    }
  }

  
  private boolean checkAuthorization(ResourceEntity resourceEntity) {
    for (GrantedAuthority grantedAuthority : securityHelper.getCurrentAuthorities()) {
      if (grantedAuthority instanceof AmbariGrantedAuthority) {

        AmbariGrantedAuthority authority       = (AmbariGrantedAuthority) grantedAuthority;
        PrivilegeEntity        privilegeEntity = authority.getPrivilegeEntity();
        Integer                permissionId    = privilegeEntity.getPermission().getId();

        
        if (permissionId.equals(PermissionEntity.AMBARI_ADMIN_PERMISSION)) {
          return true;
        }
        if (resourceEntity != null) {
          
          if (privilegeEntity.getResource().equals(resourceEntity)) {
            if (permissionId.equals(PermissionEntity.VIEW_USE_PERMISSION)) {
              return true;
            }
          }
        }
      }
    }
    
    return false;
  }

  
  protected void onDeploy(ViewEntity definition) {
    View view = definition.getView();
    if (view != null) {
      view.onDeploy(definition);
    }
  }

  
  private void removePrivilegeEntity(PrivilegeEntity privilegeEntity) {

    PrincipalEntity principalEntity = privilegeEntity.getPrincipal();
    if (principalEntity != null) {
      principalEntity.removePrivilege(privilegeEntity);
    }

    privilegeDAO.remove(privilegeEntity);
  }

  
  private void readViewArchives(boolean systemOnly, boolean useExecutor,
                                String viewNameRegExp) {
    try {
      File viewDir = configuration.getViewsDir();

      String extractedArchivesPath = viewDir.getAbsolutePath() +
          File.separator + EXTRACTED_ARCHIVES_DIR;

      if (extractor.ensureExtractedArchiveDirectory(extractedArchivesPath)) {

        File[] files  = viewDir.listFiles();

        if (files != null) {

          Set<Runnable> extractionRunnables = new HashSet<Runnable>();

          final String serverVersion = ambariMetaInfoProvider.get().getServerVersion();

          for (final File archiveFile : files) {
            if (!archiveFile.isDirectory()) {

              try {
                final ViewConfig viewConfig = archiveUtility.getViewConfigFromArchive(archiveFile);

                String commonName = viewConfig.getName();
                String version    = viewConfig.getVersion();
                String viewName   = ViewEntity.getViewName(commonName, version);

                if (!viewName.matches(viewNameRegExp)) {
                  continue;
                }

                final String extractedArchiveDirPath = extractedArchivesPath + File.separator + viewName;
                final File extractedArchiveDirFile = archiveUtility.getFile(extractedArchiveDirPath);

                final ViewEntity viewDefinition = new ViewEntity(viewConfig, configuration, extractedArchiveDirPath);

                boolean systemView = viewDefinition.isSystem();

                if (!systemOnly || systemView) {
                  
                  addDefinition(viewDefinition);

                  
                  if (systemView || !useExecutor || extractedArchiveDirFile.exists()) {
                    
                    readViewArchive(viewDefinition, archiveFile, extractedArchiveDirFile, serverVersion);
                  } else {
                    
                    extractionRunnables.add(new Runnable() {
                      @Override
                      public void run() {
                        readViewArchive(viewDefinition, archiveFile, extractedArchiveDirFile, serverVersion);
                      }
                    });
                  }
                }
              } catch (Exception e) {
                String msg = "Caught exception reading view archive " + archiveFile.getAbsolutePath();
                LOG.error(msg, e);
              }
            }
          }

          if (useExecutor && extractionRunnables.size() > 0) {
            final ExecutorService executorService = getExecutorService(configuration);

            for (Runnable runnable : extractionRunnables) {
              
              executorService.submit(runnable);
            }
          }

          if (configuration.isViewRemoveUndeployedEnabled()) {
            removeUndeployedViews();
          }
        }
      } else {
        LOG.error("Could not create extracted view archive directory " + extractedArchivesPath + ".");
      }
    } catch (Exception e) {
      LOG.error("Caught exception reading view archives.", e);
    }
  }

  
  private void readViewArchive(ViewEntity viewDefinition,
                               File archiveFile,
                               File extractedArchiveDirFile,
                               String serverVersion) {

    setViewStatus(viewDefinition, ViewEntity.ViewStatus.DEPLOYING, "Deploying " + extractedArchiveDirFile + ".");

    String extractedArchiveDirPath = extractedArchiveDirFile.getAbsolutePath();

    LOG.info("Reading view archive " + archiveFile + ".");

    try {
      
      ClassLoader cl = extractor.extractViewArchive(viewDefinition, archiveFile, extractedArchiveDirFile);

      ViewConfig viewConfig = archiveUtility.getViewConfigFromExtractedArchive(extractedArchiveDirPath,
          configuration.isViewValidationEnabled());

      viewDefinition.setConfiguration(viewConfig);

      if (checkViewVersions(viewDefinition, serverVersion)) {
        setupViewDefinition(viewDefinition, cl);

        Set<ViewInstanceEntity> instanceDefinitions = new HashSet<ViewInstanceEntity>();

        for (InstanceConfig instanceConfig : viewConfig.getInstances()) {
          ViewInstanceEntity instanceEntity = createViewInstanceDefinition(viewConfig, viewDefinition, instanceConfig);
          instanceEntity.setXmlDriven(true);
          instanceDefinitions.add(instanceEntity);
        }
        persistView(viewDefinition, instanceDefinitions);

        setViewStatus(viewDefinition, ViewEntity.ViewStatus.DEPLOYED, "Deployed " + extractedArchiveDirPath + ".");

        LOG.info("View deployed: " + viewDefinition.getName() + ".");
      }
    } catch (Exception e) {
      String msg = "Caught exception loading view " + viewDefinition.getName();

      setViewStatus(viewDefinition, ViewEntity.ViewStatus.ERROR, msg + " : " + e.getMessage());
      LOG.error(msg, e);
    }
  }

  








  protected boolean checkViewVersions(ViewEntity view, String serverVersion) {
    ViewConfig config = view.getConfiguration();

    return checkViewVersion(view, config.getMinAmbariVersion(), serverVersion, "minimum", 1, "less than") &&
           checkViewVersion(view, config.getMaxAmbariVersion(), serverVersion, "maximum", -1, "greater than");

  }

  
  private boolean checkViewVersion(ViewEntity view, String version, String serverVersion, String label,
                                   int errValue, String errMsg) {

    if (version != null && !version.isEmpty()) {

      
      if (!version.matches(VIEW_AMBARI_VERSION_REGEXP)) {
        String msg = "The configured " + label + " Ambari version " + version + " for view " +
            view.getName() + " is not valid.";

        setViewStatus(view, ViewEntity.ViewStatus.ERROR, msg);
        LOG.error(msg);
        return false;
      }

      int index = version.indexOf('*');

      int compVal = index == -1 ? VersionUtils.compareVersions(version, serverVersion) :
                    index > 0 ? VersionUtils.compareVersions(version.substring(0, index), serverVersion, index) : 0;

      if (compVal == errValue) {
        String msg = "The Ambari server version " + serverVersion + " is " + errMsg + " the configured " + label +
            " Ambari version " + version + " for view " + view.getName();

        setViewStatus(view, ViewEntity.ViewStatus.ERROR, msg);
        LOG.error(msg);
        return false;
      }
    }
    return true;
  }

  
  @Transactional
  private void persistView(ViewEntity viewDefinition, Set<ViewInstanceEntity> instanceDefinitions) throws Exception {
    
    syncView(viewDefinition, instanceDefinitions);

    onDeploy(viewDefinition);

    
    for (ViewInstanceEntity instanceEntity : instanceDefinitions) {
      addInstanceDefinition(viewDefinition, instanceEntity);
      handlerList.addViewInstance(instanceEntity);
    }
  }

  
  protected static boolean extractViewArchive(String archivePath, ViewModule viewModule, boolean systemOnly)
      throws Exception {
    Injector injector = Guice.createInjector(viewModule);

    ViewExtractor      extractor      = injector.getInstance(ViewExtractor.class);
    ViewArchiveUtility archiveUtility = injector.getInstance(ViewArchiveUtility.class);
    Configuration      configuration  = injector.getInstance(Configuration.class);

    File viewDir = configuration.getViewsDir();

    String extractedArchivesPath = viewDir.getAbsolutePath() +
        File.separator + EXTRACTED_ARCHIVES_DIR;

    if (extractor.ensureExtractedArchiveDirectory(extractedArchivesPath)) {

      File archiveFile = archiveUtility.getFile(archivePath);

      ViewConfig viewConfig = archiveUtility.getViewConfigFromArchive(archiveFile);

      String commonName = viewConfig.getName();
      String version    = viewConfig.getVersion();
      String viewName   = ViewEntity.getViewName(commonName, version);

      String extractedArchiveDirPath = extractedArchivesPath + File.separator + viewName;
      File   extractedArchiveDirFile = archiveUtility.getFile(extractedArchiveDirPath);

      if (!extractedArchiveDirFile.exists()) {
        ViewEntity viewDefinition = new ViewEntity(viewConfig, configuration, extractedArchiveDirPath);

        if (!systemOnly || viewDefinition.isSystem()) {
          extractor.extractViewArchive(viewDefinition, archiveFile, extractedArchiveDirFile);
          return true;
        }
      }
    }
    return false;
  }

  
  private void setViewStatus(ViewEntity viewDefinition, ViewEntity.ViewStatus status, String statusDetail) {
    viewDefinition.setStatus(status);
    viewDefinition.setStatusDetail(statusDetail);
  }

  
  private static synchronized ExecutorService getExecutorService(Configuration configuration) {
    if (executorService == null) {
      LinkedBlockingQueue<Runnable> queue = new LinkedBlockingQueue<Runnable>();

      ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(
          configuration.getViewExtractionThreadPoolCoreSize(),
          configuration.getViewExtractionThreadPoolMaxSize(),
          configuration.getViewExtractionThreadPoolTimeout(),
          TimeUnit.MILLISECONDS,
          queue);

      threadPoolExecutor.allowCoreThreadTimeOut(true);
      executorService = threadPoolExecutor;
    }
    return executorService;
  }

  






  protected ViewURLStreamProvider createURLStreamProvider(ViewContext viewContext) {
    ComponentSSLConfiguration sslConfiguration = ComponentSSLConfiguration.instance();
    org.apache.ambari.server.controller.internal.URLStreamProvider streamProvider =
        new org.apache.ambari.server.controller.internal.URLStreamProvider(
            configuration.getRequestConnectTimeout(),
            configuration.getRequestReadTimeout(),
            sslConfiguration.getTruststorePath(),
            sslConfiguration.getTruststorePassword(),
            sslConfiguration.getTruststoreType());
    return new ViewURLStreamProvider(viewContext, streamProvider);
  }

  




  protected ViewAmbariStreamProvider createAmbariStreamProvider() {
    ComponentSSLConfiguration sslConfiguration = ComponentSSLConfiguration.instance();
    org.apache.ambari.server.controller.internal.URLStreamProvider streamProvider =
        new org.apache.ambari.server.controller.internal.URLStreamProvider(
            DEFAULT_REQUEST_CONNECT_TIMEOUT,
            DEFAULT_REQUEST_READ_TIMEOUT,
            sslConfiguration.getTruststorePath(),
            sslConfiguration.getTruststorePassword(),
            sslConfiguration.getTruststoreType());
    return new ViewAmbariStreamProvider(streamProvider, ambariSessionManager, AmbariServer.getController());
  }

  


  protected static class ViewModule extends AbstractModule {

    @Override
    protected void configure() {
      Configuration configuration = new Configuration();
      bind(Configuration.class).toInstance(configuration);
      bind(OsFamily.class).toInstance(new OsFamily(configuration));
    }
  }
}
