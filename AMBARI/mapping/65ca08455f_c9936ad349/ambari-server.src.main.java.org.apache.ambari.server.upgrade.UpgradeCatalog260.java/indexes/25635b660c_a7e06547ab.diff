47a48
> import org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor;
48a50
> import org.apache.ambari.server.state.kerberos.KerberosPrincipalType;
137a140,153
> 
>   private static final String HIVE_INTERACTIVE_SITE = "hive-interactive-site";
>   public static final String HIVE_LLAP_DAEMON_KEYTAB_FILE = "hive.llap.daemon.keytab.file";
>   public static final String HIVE_LLAP_ZK_SM_KEYTAB_FILE = "hive.llap.zk.sm.keytab.file";
>   public static final String HIVE_LLAP_TASK_KEYTAB_FILE = "hive.llap.task.keytab.file";
>   public static final String HIVE_SERVER_KERBEROS_PREFIX = "/HIVE/HIVE_SERVER/";
>   public static final String YARN_LLAP_ZK_HIVE_KERBEROS_IDENTITY = "llap_zk_hive";
>   public static final String YARN_LLAP_TASK_HIVE_KERBEROS_IDENTITY = "llap_task_hive";
>   public static final String HIVE_SERVER_HIVE_KERBEROS_IDENTITY = "hive_server_hive";
> 
>   
>   private List<String> yarnKerberosDescUpdatedList = new ArrayList<>();
> 
> 
499a516
>     updateHiveConfigs();
638a656
>           fixYarnHsiKerberosDescriptorAndSiteConfig(getCluster(artifactEntity), kerberosDescriptor);
664a683,806
>   
> 
> 
> 
>   protected void fixYarnHsiKerberosDescriptorAndSiteConfig(Cluster cluster, KerberosDescriptor kerberosDescriptor) {
>     LOG.info("Updating YARN's HSI Kerberos Descriptor ....");
> 
>     
>     KerberosServiceDescriptor hiveServiceDescriptor = kerberosDescriptor.getService("HIVE");
>     KerberosIdentityDescriptor hsh_identityDescriptor = null;
>     KerberosPrincipalDescriptor hsh_principalDescriptor = null;
>     KerberosKeytabDescriptor hsh_keytabDescriptor = null;
>     if (hiveServiceDescriptor != null) {
>       KerberosComponentDescriptor hiveServerKerberosDescriptor = hiveServiceDescriptor.getComponent("HIVE_SERVER");
>       if (hiveServerKerberosDescriptor != null) {
>         hsh_identityDescriptor = hiveServerKerberosDescriptor.getIdentity(HIVE_SERVER_HIVE_KERBEROS_IDENTITY);
>         if (hsh_identityDescriptor != null) {
>           LOG.info("  Retrieved HIVE->HIVE_SERVER kerberos descriptor. Name = " + hsh_identityDescriptor.getName());
>           hsh_principalDescriptor = hsh_identityDescriptor.getPrincipalDescriptor();
>           hsh_keytabDescriptor = hsh_identityDescriptor.getKeytabDescriptor();
>         }
>       }
> 
>       
>       
>       if (hsh_principalDescriptor != null && hsh_keytabDescriptor != null) {
>         KerberosServiceDescriptor yarnServiceDescriptor = kerberosDescriptor.getService("YARN");
>         if (yarnServiceDescriptor != null) {
>           KerberosComponentDescriptor yarnNmKerberosDescriptor = yarnServiceDescriptor.getComponent("NODEMANAGER");
>           if (yarnNmKerberosDescriptor != null) {
>             String[] identities = {YARN_LLAP_ZK_HIVE_KERBEROS_IDENTITY, YARN_LLAP_TASK_HIVE_KERBEROS_IDENTITY};
>             for (String identity : identities) {
>               KerberosIdentityDescriptor identityDescriptor = yarnNmKerberosDescriptor.getIdentity(identity);
> 
>               KerberosPrincipalDescriptor principalDescriptor = null;
>               KerberosKeytabDescriptor keytabDescriptor = null;
>               if (identityDescriptor != null) {
>                 LOG.info("  Retrieved YARN->NODEMANAGER kerberos descriptor to be updated. Name = " + identityDescriptor.getName());
>                 principalDescriptor = identityDescriptor.getPrincipalDescriptor();
>                 keytabDescriptor = identityDescriptor.getKeytabDescriptor();
> 
>                 identityDescriptor.setReference(HIVE_SERVER_KERBEROS_PREFIX + hsh_identityDescriptor.getName());
>                 LOG.info("    Updated '" + YARN_LLAP_ZK_HIVE_KERBEROS_IDENTITY + "' identity descriptor reference = '"
>                         + identityDescriptor.getReference() + "'");
>                 principalDescriptor.setValue(null);
>                 LOG.info("    Updated '" + YARN_LLAP_ZK_HIVE_KERBEROS_IDENTITY + "' principal descriptor value = '"
>                         + principalDescriptor.getValue() + "'");
> 
>                 
>                 keytabDescriptor.setFile(null);
>                 LOG.info("    Updated '" + YARN_LLAP_ZK_HIVE_KERBEROS_IDENTITY + "' keytab descriptor file = '"
>                         + keytabDescriptor.getFile() + "'");
>                 keytabDescriptor.setOwnerName(null);
>                 LOG.info("    Updated '" + YARN_LLAP_ZK_HIVE_KERBEROS_IDENTITY + "' keytab descriptor owner name = '" + keytabDescriptor.getOwnerName() + "'");
>                 keytabDescriptor.setOwnerAccess(null);
>                 LOG.info("    Updated '" + YARN_LLAP_ZK_HIVE_KERBEROS_IDENTITY + "' keytab descriptor owner access = '" + keytabDescriptor.getOwnerAccess() + "'");
>                 keytabDescriptor.setGroupName(null);
>                 LOG.info("    Updated '" + YARN_LLAP_ZK_HIVE_KERBEROS_IDENTITY + "' keytab descriptor group name = '" + keytabDescriptor.getGroupName() + "'");
>                 keytabDescriptor.setGroupAccess(null);
>                 LOG.info("    Updated '" + YARN_LLAP_ZK_HIVE_KERBEROS_IDENTITY + "' keytab descriptor group access = '" + keytabDescriptor.getGroupAccess() + "'");
> 
>                 
> 
>                 
>                 String[] splits = keytabDescriptor.getConfiguration().split("/");
>                 if (splits != null && splits.length == 2) {
>                   updateYarnKerberosDescUpdatedList(splits[1]);
>                   LOG.info("    Updated 'yarnKerberosDescUpdatedList' = " + getYarnKerberosDescUpdatedList());
>                 }
>               }
>             }
>           }
>         }
>       }
>     }
>   }
> 
>   public void updateYarnKerberosDescUpdatedList(String val) {
>     yarnKerberosDescUpdatedList.add(val);
>   }
> 
>   public List<String> getYarnKerberosDescUpdatedList() {
>     return yarnKerberosDescUpdatedList;
>   }
> 
>   protected void updateHiveConfigs() throws AmbariException {
>     AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);
>     Clusters clusters = ambariManagementController.getClusters();
>     if (clusters != null) {
>       Map<String, Cluster> clusterMap = getCheckedClusterMap(clusters);
>       if (clusterMap != null && !clusterMap.isEmpty()) {
>         for (final Cluster cluster : clusterMap.values()) {
>           
>           
>           
>           Config hsiSiteConfig = cluster.getDesiredConfigByType(HIVE_INTERACTIVE_SITE);
>           Map<String, String> hsiSiteConfigProperties = hsiSiteConfig.getProperties();
>           if (hsiSiteConfigProperties != null &&
>                   hsiSiteConfigProperties.containsKey(HIVE_LLAP_DAEMON_KEYTAB_FILE)) {
>             String[] identities = {HIVE_LLAP_ZK_SM_KEYTAB_FILE, HIVE_LLAP_TASK_KEYTAB_FILE};
>             Map<String, String> newProperties = new HashMap<>();
>             for (String identity : identities) {
>               
>               
>               if (getYarnKerberosDescUpdatedList().contains(identity) && hsiSiteConfigProperties.containsKey(identity)) {
>                 newProperties.put(identity, hsiSiteConfigProperties.get(HIVE_LLAP_DAEMON_KEYTAB_FILE));
>               }
>             }
> 
>             
>             if (newProperties.size() > 0) {
>               try {
>                 updateConfigurationPropertiesForCluster(cluster, HIVE_INTERACTIVE_SITE, newProperties, true, false);
>                 LOG.info("Updated HSI config(s) : " + newProperties.keySet() + " with value(s) = " + newProperties.values()+" respectively.");
>               } catch (AmbariException e) {
>                 e.printStackTrace();
>               }
>             }
>           }
>         }
>       }
>     }
>   }
> 
