19a20,27
> import javax.persistence.EntityManager;
> import javax.xml.bind.JAXBException;
> import javax.xml.parsers.DocumentBuilder;
> import javax.xml.parsers.DocumentBuilderFactory;
> 
> import java.io.File;
> import java.io.FilenameFilter;
> import java.io.IOException;
35a44,45
> import java.util.regex.Matcher;
> import java.util.regex.Pattern;
72a83,84
> import org.apache.ambari.server.view.ViewArchiveUtility;
> import org.apache.ambari.server.view.configuration.ViewConfig;
93a106,107
>   @Inject
>   protected ViewArchiveUtility archiveUtility;
885a900,973
>     updateTezHistoryUrlBase();
>   }
> 
>   
> 
> 
> 
> 
> 
>   private void updateTezHistoryUrlBase() throws AmbariException {
>     AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);
>     Clusters clusters = ambariManagementController.getClusters();
> 
>     if (clusters != null) {
>       Map<String, Cluster> clusterMap = clusters.getClusters();
>       if (clusterMap != null && !clusterMap.isEmpty()) {
>         for (final Cluster cluster : clusterMap.values()) {
>           Set<String> installedServices = cluster.getServices().keySet();
>           if (installedServices.contains("TEZ")) {
>             Config tezSite = cluster.getDesiredConfigByType("tez-site");
>             if (tezSite != null) {
>               String currentTezHistoryUrlBase = tezSite.getProperties().get("tez.tez-ui.history-url.base");
>               if(currentTezHistoryUrlBase != null && !currentTezHistoryUrlBase.isEmpty()) {
>                 String newTezHistoryUrlBase = getUpdatedTezHistoryUrlBase(currentTezHistoryUrlBase);
>                 updateConfigurationProperties("tez-site", Collections.singletonMap("tez.tez-ui.history-url.base", newTezHistoryUrlBase), true, false);
>               }
>             }
>           }
>         }
>       }
>     }
>   }
> 
>   protected String getUpdatedTezHistoryUrlBase(String currentTezHistoryUrlBase) throws AmbariException{
>     String pattern = "(.*\\/TEZ\\/)(.*)(\\/TEZ_CLUSTER_INSTANCE)";
>     Pattern regex = Pattern.compile(pattern);
>     Matcher matcher = regex.matcher(currentTezHistoryUrlBase);
>     String prefix;
>     String suffix;
>     String oldVersion;
>     if (matcher.find()) {
>       prefix = matcher.group(1);
>       oldVersion = matcher.group(2);
>       suffix = matcher.group(3);
>     } else {
>       throw new AmbariException("Cannot prepare the new value for property: 'tez.tez-ui.history-url.base' using the old value: '" + currentTezHistoryUrlBase + "'");
>     }
> 
>     String latestTezViewVersion = getLatestTezViewVersion(oldVersion);
> 
>     return prefix + latestTezViewVersion + suffix;
>   }
> 
>   protected String getLatestTezViewVersion(String oldVersion) {
>     File viewsDirectory = configuration.getViewsDir();
>     File[] files = viewsDirectory.listFiles(new FilenameFilter() {
>       @Override
>       public boolean accept(File dir, String name) {
>         return name.startsWith("tez-view");
>       }
>     });
> 
>     if(files == null || files.length == 0) {
>       LOG.error("Could not file tez-view jar file in '{}'. Returning the old version", viewsDirectory.getAbsolutePath());
>       return oldVersion;
>     }
>     File tezViewFile = files[0];
>     try {
>       ViewConfig viewConfigFromArchive = archiveUtility.getViewConfigFromArchive(tezViewFile);
>       return viewConfigFromArchive.getVersion();
>     } catch (JAXBException | IOException e) {
>       LOG.error("Failed to read the tez view version from: {}. Returning the old version", tezViewFile);
>       return oldVersion;
>     }
