19a20,23
> import static org.easymock.EasyMock.createMock;
> import static org.easymock.EasyMock.createNiceMock;
> import static org.easymock.EasyMock.expect;
> import static org.easymock.EasyMock.replay;
32a37
> import java.lang.reflect.Method;
2606a2612,2706
>   @Test
>   public void testSkippableCommandFailureDoesNotAbortNextStage() throws Exception {
>     Stage previousStage = createMock(Stage.class);
>     Stage nextStage = createMock(Stage.class);
>     ActionDBAccessor actionDBAccessor = createMock(ActionDBAccessor.class);
> 
>     expect(previousStage.isSkippable()).andReturn(false);
> 
>     expect(nextStage.getStageId()).andReturn(5L);
>     expect(nextStage.getRequestId()).andReturn(1L);
>     expect(actionDBAccessor.getStage("1-4")).andReturn(previousStage);
> 
>     Map<String, HostRoleCommand> roleCommandMap = new HashMap<>();
>     HostRoleCommand hostRoleCommand = createMock(HostRoleCommand.class);
>     expect(hostRoleCommand.getRole()).andReturn(Role.DATANODE).anyTimes();
>     expect(hostRoleCommand.getStatus()).andReturn(HostRoleStatus.SKIPPED_FAILED);
> 
>     roleCommandMap.put(Role.DATANODE.toString(), hostRoleCommand);
> 
>     Map<String, Map<String, HostRoleCommand>> hostRoleCommands = new HashMap<>();
>     hostRoleCommands.put("host", roleCommandMap);
> 
>     expect(previousStage.getHostRoleCommands()).andReturn(hostRoleCommands).anyTimes();
>     expect(previousStage.getSuccessFactor(Role.DATANODE)).andReturn(0.5F);
> 
>     ActionScheduler scheduler = new ActionScheduler(100, 50, actionDBAccessor, null, null, 3,
>       new HostsMap((String) null), null, null, null);
> 
>     replay(previousStage, nextStage, actionDBAccessor, hostRoleCommand);
> 
>     Method method = scheduler.getClass().getDeclaredMethod("hasPreviousStageFailed", Stage.class);
>     method.setAccessible(true);
>     Object result = method.invoke(scheduler, nextStage);
> 
>     assertFalse((Boolean) result);
>     EasyMock.verify(previousStage, nextStage, actionDBAccessor, hostRoleCommand);
>   }
> 
>   @Test
>   public void testPreviousStageToFailForFirstStage() throws Exception {
>     Stage nextStage = createNiceMock(Stage.class);
> 
>     expect(nextStage.getStageId()).andReturn(0L);
> 
>     ActionScheduler scheduler = new ActionScheduler(100, 50, null, null, null, 3,
>       new HostsMap((String) null), null, null, null);
> 
>     replay(nextStage);
> 
>     Method method = scheduler.getClass().getDeclaredMethod("hasPreviousStageFailed", Stage.class);
>     method.setAccessible(true);
>     Object result = method.invoke(scheduler, nextStage);
> 
>     assertFalse((Boolean) result);
>     EasyMock.verify(nextStage);
>   }
> 
>   @Test
>   public void testPreviousStageToFailForSecondStage() throws Exception {
>     Stage previousStage = createMock(Stage.class);
>     Stage nextStage = createMock(Stage.class);
>     ActionDBAccessor actionDBAccessor = createMock(ActionDBAccessor.class);
> 
>     expect(previousStage.isSkippable()).andReturn(false);
> 
>     expect(nextStage.getStageId()).andReturn(1L);
>     expect(nextStage.getRequestId()).andReturn(1L);
>     expect(actionDBAccessor.getStage("1-0")).andReturn(previousStage);
> 
>     Map<String, HostRoleCommand> roleCommandMap = new HashMap<>();
>     HostRoleCommand hostRoleCommand = createMock(HostRoleCommand.class);
>     expect(hostRoleCommand.getRole()).andReturn(Role.DATANODE).anyTimes();
>     expect(hostRoleCommand.getStatus()).andReturn(HostRoleStatus.FAILED);
> 
>     roleCommandMap.put(Role.DATANODE.toString(), hostRoleCommand);
> 
>     Map<String, Map<String, HostRoleCommand>> hostRoleCommands = new HashMap<>();
>     hostRoleCommands.put("host", roleCommandMap);
> 
>     expect(previousStage.getHostRoleCommands()).andReturn(hostRoleCommands).anyTimes();
>     expect(previousStage.getSuccessFactor(Role.DATANODE)).andReturn(0.5F);
> 
>     ActionScheduler scheduler = new ActionScheduler(100, 50, actionDBAccessor, null, null, 3,
>       new HostsMap((String) null), null, null, null);
> 
>     replay(previousStage, nextStage, actionDBAccessor, hostRoleCommand);
> 
>     Method method = scheduler.getClass().getDeclaredMethod("hasPreviousStageFailed", Stage.class);
>     method.setAccessible(true);
>     Object result = method.invoke(scheduler, nextStage);
> 
>     assertTrue((Boolean) result);
>     EasyMock.verify(previousStage, nextStage, actionDBAccessor, hostRoleCommand);
>   }
> 
