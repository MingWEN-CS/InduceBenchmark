23,27c23
< import static org.mockito.Matchers.any;
< import static org.mockito.Matchers.anyCollectionOf;
< import static org.mockito.Matchers.anyLong;
< import static org.mockito.Matchers.anyString;
< import static org.mockito.Matchers.eq;
---
> import static org.mockito.Matchers.*;
29a26
> import static org.mockito.Mockito.doReturn;
30a28
> import static org.mockito.Mockito.spy;
61a60
> import org.apache.ambari.server.events.AmbariEvent;
77a77
> import org.apache.ambari.server.state.fsm.InvalidStateTransitionException;
302c302
<     }).when(db).timeoutHostRole(anyString(), anyLong(), anyLong(), anyString());
---
>     }).when(db).timeoutHostRole(anyString(), anyLong(), anyLong(), anyString(), anyBoolean());
382c382
<     }).when(db).timeoutHostRole(anyString(), anyLong(), anyLong(), anyString());
---
>     }).when(db).timeoutHostRole(anyString(), anyLong(), anyLong(), anyString(), anyBoolean());
482c482
<     }).when(db).timeoutHostRole(anyString(), anyLong(), anyLong(), anyString());
---
>     }).when(db).timeoutHostRole(anyString(), anyLong(), anyLong(), anyString(), anyBoolean());
794a795,897
>   public void testTimeOutWithHostNull() throws AmbariException {
>     Stage s = getStageWithServerAction(1, 977, null, "test", 2);
>     s.setHostRoleStatus(null, Role.AMBARI_SERVER_ACTION.toString(), HostRoleStatus.IN_PROGRESS);
> 
>     ActionScheduler scheduler = EasyMock.createMockBuilder(ActionScheduler.class)
>       .withConstructor(long.class, long.class, ActionDBAccessor.class, ActionQueue.class, Clusters.class, int.class,
>         HostsMap.class, UnitOfWork.class, AmbariEventPublisher.class, Configuration.class)
>       .withArgs(100L, 50L, null, null, null, -1, null, null, null, null)
>       .createNiceMock();
> 
>     EasyMock.replay(scheduler);
> 
>     
>     Assert.assertEquals(false, scheduler.timeOutActionNeeded(HostRoleStatus.IN_PROGRESS, s, null, Role.AMBARI_SERVER_ACTION.toString(), -1L, 1L));
> 
>     EasyMock.verify(scheduler);
>   }
> 
>   @Test
>   public void testTimeoutRequestDueAgentRestartExecuteCommand() throws Exception {
>     testTimeoutRequest(RoleCommand.EXECUTE);
>   }
> 
>   @Test
>   public void testTimeoutRequestDueAgentRestartCustomCommand() throws Exception {
>     testTimeoutRequest(RoleCommand.CUSTOM_COMMAND);
>   }
> 
>   @Test
>   public void testTimeoutRequestDueAgentRestartActionExecute() throws Exception {
>     testTimeoutRequest(RoleCommand.ACTIONEXECUTE);
>   }
> 
>   @Test
>   public void testTimeoutRequestDueAgentRestartServiceCheck() throws Exception {
>     testTimeoutRequest(RoleCommand.SERVICE_CHECK);
>   }
> 
>   private void testTimeoutRequest(RoleCommand roleCommand) throws AmbariException, InvalidStateTransitionException {
>     final long HOST_REGISTRATION_TIME = 100L;
>     final long STAGE_TASK_START_TIME = HOST_REGISTRATION_TIME - 1L;
> 
>     ActionQueue aq = new ActionQueue();
>     Clusters fsm = EasyMock.createMock(Clusters.class);
>     Cluster cluster = EasyMock.createMock(Cluster.class);
>     Service service = EasyMock.createMock(Service.class);
>     ServiceComponent serviceComponent = EasyMock.createMock(ServiceComponent.class);
>     ServiceComponentHost serviceComponentHost = EasyMock.createMock(ServiceComponentHost.class);
>     Host host = EasyMock.createMock(Host.class);
>     ActionDBAccessor db = EasyMock.createMock(ActionDBAccessor.class);
>     AmbariEventPublisher ambariEventPublisher = EasyMock.createMock(AmbariEventPublisher.class);
> 
>     EasyMock.expect(fsm.getCluster(EasyMock.anyString())).andReturn(cluster).anyTimes();
>     EasyMock.expect(fsm.getHost(EasyMock.anyString())).andReturn(host);
>     EasyMock.expect(cluster.getService(EasyMock.anyString())).andReturn(null);
>     EasyMock.expect(host.getLastRegistrationTime()).andReturn(HOST_REGISTRATION_TIME);
>     EasyMock.expect(host.getHostName()).andReturn(Stage.INTERNAL_HOSTNAME).anyTimes();
>     EasyMock.expect(host.getState()).andReturn(HostState.HEALTHY);
> 
>     if (RoleCommand.ACTIONEXECUTE.equals(roleCommand)) {
>       EasyMock.expect(cluster.getClusterName()).andReturn("clusterName").anyTimes();
>       EasyMock.expect(cluster.getClusterId()).andReturn(1L);
> 
>       ambariEventPublisher.publish(EasyMock.anyObject(AmbariEvent.class));
>       EasyMock.expectLastCall();
>     } else if (RoleCommand.EXECUTE.equals(roleCommand)) {
>       EasyMock.expect(cluster.getClusterName()).andReturn("clusterName");
>       EasyMock.expect(cluster.getService(EasyMock.anyString())).andReturn(service);
>       EasyMock.expect(service.getServiceComponent(EasyMock.anyString())).andReturn(serviceComponent);
>       EasyMock.expect(serviceComponent.getServiceComponentHost(EasyMock.anyString())).andReturn(serviceComponentHost);
> 
>       serviceComponentHost.handleEvent(EasyMock.anyObject(ServiceComponentHostEvent.class));
>       EasyMock.expectLastCall();
>     }
> 
>     Stage s = getStageWithServerAction(1, 977, null, "test", 2);
>     s.setStartTime(null, Role.AMBARI_SERVER_ACTION.toString(), STAGE_TASK_START_TIME);
>     s.setHostRoleStatus(null, Role.AMBARI_SERVER_ACTION.toString(), HostRoleStatus.IN_PROGRESS);
>     s.getExecutionCommands(null).get(0).getExecutionCommand().setServiceName("Service name");
>     s.getExecutionCommands(null).get(0).getExecutionCommand().setRoleCommand(roleCommand);
> 
>     aq.enqueue(Stage.INTERNAL_HOSTNAME, s.getExecutionCommands(null).get(0).getExecutionCommand());
>     List<ExecutionCommand> commandsToSchedule = new ArrayList<ExecutionCommand>();
> 
>     db.timeoutHostRole(EasyMock.anyString(), EasyMock.anyLong(), EasyMock.anyLong(), EasyMock.anyString(), EasyMock.anyBoolean());
>     EasyMock.expectLastCall();
> 
>     ActionScheduler scheduler = EasyMock.createMockBuilder(ActionScheduler.class)
>       .withConstructor(long.class, long.class, ActionDBAccessor.class, ActionQueue.class, Clusters.class, int.class,
>         HostsMap.class, UnitOfWork.class, AmbariEventPublisher.class, Configuration.class)
>       .withArgs(100L, 50L, db, aq, fsm, -1, null, null, ambariEventPublisher, null)
>       .createNiceMock();
> 
>     EasyMock.replay(scheduler, fsm, host, db, cluster, ambariEventPublisher, service, serviceComponent, serviceComponentHost);
> 
>     scheduler.processInProgressStage(s, commandsToSchedule);
> 
>     EasyMock.verify(scheduler, fsm, host, db, cluster, ambariEventPublisher, service, serviceComponent, serviceComponentHost);
> 
>     Assert.assertTrue("ActionQueue should be empty after request was timeout", aq.size(Stage.INTERNAL_HOSTNAME) == 0);
>   }
> 
>   @Test
959,960c1062,1065
<     ActionScheduler scheduler = new ActionScheduler(100, 50, db, aq, fsm, 3,
<             new HostsMap((String) null), unitOfWork, null, conf);
---
>     ActionScheduler scheduler = spy(new ActionScheduler(100, 50, db, aq, fsm, 3,
>             new HostsMap((String) null), unitOfWork, null, conf));
> 
>     doReturn(false).when(scheduler).wasAgentRestartedDuringOperation(any(Host.class), any(Stage.class), anyString());
1047c1152
<     ActionScheduler scheduler = new ActionScheduler(100, 50, db, aq, fsm, 3,
---
>     ActionScheduler scheduler = spy(new ActionScheduler(100, 50, db, aq, fsm, 3,
1049c1154,1157
<             unitOfWork, null, conf);
---
>             unitOfWork, null, conf));
> 
> 
>     doReturn(false).when(scheduler).wasAgentRestartedDuringOperation(any(Host.class), any(Stage.class), anyString());
1118c1226
<     ActionScheduler scheduler = new ActionScheduler(100, 50, db, aq, fsm, 3,
---
>     ActionScheduler scheduler = spy(new ActionScheduler(100, 50, db, aq, fsm, 3,
1120c1228,1230
<         unitOfWork, null, conf);
---
>         unitOfWork, null, conf));
> 
>     doReturn(false).when(scheduler).wasAgentRestartedDuringOperation(any(Host.class), any(Stage.class), anyString());
1639a1750
>     
2269,2270c2380,2383
<     ActionScheduler scheduler = new ActionScheduler(100, 50, db, aq, fsm, 3,
<         new HostsMap((String) null), unitOfWork, null, conf);
---
>     ActionScheduler scheduler = spy(new ActionScheduler(100, 50, db, aq, fsm, 3,
>         new HostsMap((String) null), unitOfWork, null, conf));
> 
>     doReturn(false).when(scheduler).wasAgentRestartedDuringOperation(any(Host.class), any(Stage.class), anyString());
2467,2468c2580,2583
<     ActionScheduler scheduler = new ActionScheduler(100, 50, db, aq, fsm, 3,
<         new HostsMap((String) null), unitOfWork, null, conf);
---
>     ActionScheduler scheduler = spy(new ActionScheduler(100, 50, db, aq, fsm, 3,
>         new HostsMap((String) null), unitOfWork, null, conf));
> 
>     doReturn(false).when(scheduler).wasAgentRestartedDuringOperation(any(Host.class), any(Stage.class), anyString());
