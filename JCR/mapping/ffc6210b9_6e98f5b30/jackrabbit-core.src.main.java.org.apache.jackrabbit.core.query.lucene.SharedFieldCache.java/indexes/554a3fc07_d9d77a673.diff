19a20
> import java.util.Arrays;
114a116,187
>     static class ComparableArray implements Comparable<ComparableArray> {
> 
>         private int offset = 0;
> 
>         private Comparable<?>[] c = new Comparable[0];
> 
>         public ComparableArray(Comparable<?> item, int index) {
>             insert(item, index);
>         }
> 
>         public int compareTo(ComparableArray o) {
>             return Util.compare(c, o.c);
>         }
> 
>         
> 
> 
> 
> 
>         int getOffset() {
>             return offset;
>         }
> 
>         public ComparableArray insert(Comparable<?> item, int index) {
>             
>             if (c.length == 0) {
>                 offset = index;
>                 c = new Comparable<?>[] { item };
>                 return this;
>             }
> 
>             
>             if (index >= offset && index < offset + c.length) {
>                 c[index - offset] = item;
>                 return this;
>             }
> 
>             
>             if (index < offset) {
>                 int relativeOffset = offset - index;
>                 Comparable<?>[] newC = new Comparable[relativeOffset + c.length];
>                 newC[0] = item;
>                 System.arraycopy(c, 0, newC, relativeOffset, c.length);
>                 c = newC;
>                 offset = index;
>                 return this;
>             }
> 
>             
>             if (index >= offset + c.length) {
>                 c = Arrays.copyOf(c, index - offset + 1);
>                 c[index - offset] = item;
>                 return this;
>             }
>             return this;
>         }
> 
>         
> 
> 
>         @Override
>         public String toString() {
>             if (c == null) {
>                 return null;
>             }
>             if (c.length == 1) {
>                 return c[0].toString();
>             }
>             return Arrays.toString(c);
>         }
>     }
> 
155c228,229
<             Comparable<?>[] retArray = new Comparable[reader.maxDoc()];
---
>             final int maxDocs = reader.maxDoc();
>             ComparableArray[] retArray = new ComparableArray[maxDocs];
157c231
<             if (retArray.length > 0) {
---
>             if (maxDocs > 0) {
170,171d243
< 
<                 char[] tmp = new char[16];
181,192c253,254
< 
<                         
<                         String text = term.text();
<                         int len = text.length() - prefix.length();
<                         if (tmp.length < len) {
<                             
<                             tmp = new char[len];
<                         }
<                         text.getChars(prefix.length(), text.length(), tmp, 0);
<                         String value = new String(tmp, 0, len);
< 
<                         termDocs.seek(termEnum);
---
>                         final String value = termValueAsString(term, prefix);
>                         termDocs.seek(term);
193a256
>                             int termPosition = 0;
197c260
<                                 termPos.nextPosition();
---
>                                 termPosition = termPos.nextPosition();
204c267,274
<                             retArray[termDocs.doc()] = getValue(value, type);
---
>                             Comparable<?> v = getValue(value, type);
>                             int doc = termDocs.doc();
>                             ComparableArray ca = retArray[doc];
>                             if (ca == null) {
>                                 retArray[doc] = new ComparableArray(v, termPosition);
>                             } else {
>                                 retArray[doc] = ca.insert(v, termPosition);
>                             }
221a292,307
> 
> 
> 
> 
>     private static String termValueAsString(Term term, String prefix) {
>         
>         String text = term.text();
>         int length = text.length() - prefix.length();
>         char[] tmp = new char[length];
>         text.getChars(prefix.length(), text.length(), tmp, 0);
>         return new String(tmp, 0, length);
>     }
> 
>     
> 
> 
