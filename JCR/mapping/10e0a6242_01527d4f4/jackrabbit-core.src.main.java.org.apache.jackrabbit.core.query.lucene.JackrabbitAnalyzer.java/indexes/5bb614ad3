















package org.apache.jackrabbit.core.query.lucene;

import java.io.IOException;
import java.io.Reader;
import java.lang.reflect.Constructor;
import java.util.Collections;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.util.Version;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;










public class JackrabbitAnalyzer extends Analyzer {

    private static Logger log =
            LoggerFactory.getLogger(JackrabbitAnalyzer.class);

    private static final Analyzer DEFAULT_ANALYZER =
            new StandardAnalyzer(Version.LUCENE_24, Collections.emptySet());

    






    static Analyzer getAnalyzerInstance(String className) {
        Class<?> analyzerClass;
        try {
            analyzerClass = Class.forName(className);
        } catch (ClassNotFoundException e) {
            log.warn(className + " could not be found", e);
            return DEFAULT_ANALYZER;
        }
        if (!Analyzer.class.isAssignableFrom(analyzerClass)) {
            log.warn(className + " is not a Lucene Analyzer");
            return DEFAULT_ANALYZER;
        } else if (JackrabbitAnalyzer.class.isAssignableFrom(analyzerClass)) {
            log.warn(className + " can not be used as a JackrabbitAnalyzer component");
            return DEFAULT_ANALYZER;
        }

        Exception cause = null;
        Constructor<?>[] constructors = analyzerClass.getConstructors();
        for (Constructor<?> constructor : constructors) {
            Class<?>[] types = constructor.getParameterTypes();
            if (types.length == 1 && types[0] == Version.class) {
                try {
                    return (Analyzer) constructor.newInstance(Version.LUCENE_24);
                } catch (Exception e) {
                    cause = e;
                }
            }
        }
        for (Constructor<?> constructor : constructors) {
            if (constructor.getParameterTypes().length == 0) {
                try {
                    return (Analyzer) constructor.newInstance();
                } catch (Exception e) {
                    cause = e;
                }
            }
        }

        log.warn(className + " could not be instantiated", cause);
        return DEFAULT_ANALYZER;
    }

    



    private Analyzer defaultAnalyzer = DEFAULT_ANALYZER;

    


    private IndexingConfiguration indexingConfig;

    


    protected void setIndexingConfig(IndexingConfiguration indexingConfig) {
        this.indexingConfig = indexingConfig;
    }

    


    protected void setDefaultAnalyzer(Analyzer analyzer) {
        defaultAnalyzer = analyzer;
    }

    String getDefaultAnalyzerClass() {
        return defaultAnalyzer.getClass().getName();
    }

    void setDefaultAnalyzerClass(String className) {
        setDefaultAnalyzer(getAnalyzerInstance(className));
    }

    




    public TokenStream tokenStream(String fieldName, Reader reader) {
        if (indexingConfig != null) {
            Analyzer propertyAnalyzer = indexingConfig.getPropertyAnalyzer(fieldName);
            if (propertyAnalyzer != null) {
                return propertyAnalyzer.tokenStream(fieldName, reader);
            }
        }
        return defaultAnalyzer.tokenStream(fieldName, reader);
    }

    @Override
    public TokenStream reusableTokenStream(String fieldName, Reader reader)
            throws IOException {
        if (indexingConfig != null) {
            Analyzer propertyAnalyzer = indexingConfig.getPropertyAnalyzer(fieldName);
            if (propertyAnalyzer != null) {
                return propertyAnalyzer.reusableTokenStream(fieldName, reader);
            }
        }
        return defaultAnalyzer.reusableTokenStream(fieldName, reader);
    }
}
