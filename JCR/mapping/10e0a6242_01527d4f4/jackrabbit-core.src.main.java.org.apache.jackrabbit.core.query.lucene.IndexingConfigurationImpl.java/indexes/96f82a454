















package org.apache.jackrabbit.core.query.lucene;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Properties;

import javax.jcr.NamespaceException;
import javax.jcr.RepositoryException;

import org.apache.commons.collections.iterators.AbstractIteratorDecorator;
import org.apache.jackrabbit.core.HierarchyManager;
import org.apache.jackrabbit.core.HierarchyManagerImpl;
import org.apache.jackrabbit.core.id.PropertyId;
import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
import org.apache.jackrabbit.core.nodetype.NodeTypeRegistryListener;
import org.apache.jackrabbit.core.nodetype.xml.AdditionalNamespaceResolver;
import org.apache.jackrabbit.core.query.QueryHandlerContext;
import org.apache.jackrabbit.core.state.ChildNodeEntry;
import org.apache.jackrabbit.core.state.ItemStateException;
import org.apache.jackrabbit.core.state.ItemStateManager;
import org.apache.jackrabbit.core.state.NodeState;
import org.apache.jackrabbit.core.state.PropertyState;
import org.apache.jackrabbit.core.value.InternalValue;
import org.apache.jackrabbit.spi.Name;
import org.apache.jackrabbit.spi.Path;
import org.apache.jackrabbit.spi.PathFactory;
import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
import org.apache.jackrabbit.spi.commons.conversion.ParsingNameResolver;
import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
import org.apache.jackrabbit.spi.commons.name.Pattern;
import org.apache.jackrabbit.spi.commons.namespace.NamespaceResolver;
import org.apache.jackrabbit.util.ISO9075;
import org.apache.lucene.analysis.Analyzer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Attr;
import org.w3c.dom.CharacterData;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;





public class IndexingConfigurationImpl
        implements IndexingConfiguration, NodeTypeRegistryListener {

    


    private static final Logger log = LoggerFactory.getLogger(IndexingConfigurationImpl.class);

    


    private static final PathFactory PATH_FACTORY = PathFactoryImpl.getInstance();

    


    private Element configuration;

    


    private NameResolver resolver;

    


    private ItemStateManager ism;

    


    private HierarchyManager hmgr;

    


    private NodeTypeRegistry ntReg;

    


    private Map<Name, List<IndexingRule>> configElements = new HashMap<Name, List<IndexingRule>>();

    


    private AggregateRule[] aggregateRules;

    


    private Map<String, Analyzer> analyzers = new HashMap<String, Analyzer>();

    


    public void init(Element config,
                     QueryHandlerContext context,
                     NamespaceMappings nsMappings) throws Exception {
        configuration = config;
        ism = context.getItemStateManager();
        hmgr = new HierarchyManagerImpl(context.getRootId(), ism);
        NamespaceResolver nsResolver = new AdditionalNamespaceResolver(getNamespaces(config));
        resolver = new ParsingNameResolver(NameFactoryImpl.getInstance(), nsResolver);
        ntReg = context.getNodeTypeRegistry();
        ntReg.addListener(this);

        refreshIndexRules();
        List<AggregateRule> idxAggregates = new ArrayList<AggregateRule>();
        NodeList indexingConfigs = config.getChildNodes();
        for (int i = 0; i < indexingConfigs.getLength(); i++) {
            Node configNode = indexingConfigs.item(i);
            if (configNode.getNodeName().equals("aggregate")) {
                idxAggregates.add(new AggregateRuleImpl(
                        configNode, resolver, ism, hmgr));
            } else if (configNode.getNodeName().equals("analyzers")) {
                NodeList childNodes = configNode.getChildNodes();
                for (int j = 0; j < childNodes.getLength(); j++) {
                    Node analyzerNode = childNodes.item(j);
                    if (analyzerNode.getNodeName().equals("analyzer")) {
                        String analyzerClassName = analyzerNode.getAttributes().getNamedItem("class").getNodeValue();
                        try {
                        Class clazz = Class.forName(analyzerClassName);
                            if (clazz == JackrabbitAnalyzer.class) {
                                log.warn("Not allowed to configure " + JackrabbitAnalyzer.class.getName() +  " for a property. "
                                        + "Using default analyzer for that property.");
                            }
                            else if (Analyzer.class.isAssignableFrom(clazz)) {
                                Analyzer analyzer = (Analyzer) clazz.newInstance();
                                NodeList propertyChildNodes = analyzerNode.getChildNodes();
                                for (int k = 0; k < propertyChildNodes.getLength(); k++) {
                                    Node propertyNode = propertyChildNodes.item(k);
                                    if (propertyNode.getNodeName().equals("property")) {
                                        
                                        Name propName = resolver.getQName(getTextContent(propertyNode));
                                        String fieldName = nsMappings.translateName(propName);
                                        
                                        int idx = fieldName.indexOf(':');
                                        fieldName = fieldName.substring(0, idx + 1)
                                                    + FieldNames.FULLTEXT_PREFIX + fieldName.substring(idx + 1);
                                        Object prevAnalyzer = analyzers.put(fieldName, analyzer);
                                        if (prevAnalyzer != null) {
                                            log.warn("Property " + propName.getLocalName()
                                                    + " has been configured for multiple analyzers. "
                                                    + " Last configured analyzer is used");
                                        }
                                    }
                                }
                            } else {
                                log.warn("org.apache.lucene.analysis.Analyzer is not a superclass of "
                                        + analyzerClassName + ". Ignoring this configure analyzer" );
                            }
                        } catch (ClassNotFoundException e) {
                            log.warn("Analyzer class not found: " + analyzerClassName, e);
                        }
                    }
                }
            }

        }
        aggregateRules = idxAggregates.toArray(new AggregateRule[idxAggregates.size()]);
    }

    





    public AggregateRule[] getAggregateRules() {
        return aggregateRules;
    }

    








    public boolean isIndexed(NodeState state, Name propertyName) {
        IndexingRule rule = getApplicableIndexingRule(state);
        if (rule != null) {
            return rule.isIndexed(propertyName);
        }
        
        return true;
    }

    








    public float getPropertyBoost(NodeState state, Name propertyName) {
        IndexingRule rule = getApplicableIndexingRule(state);
        if (rule != null) {
            return rule.getBoost(propertyName);
        }
        return DEFAULT_BOOST;
    }

    





    public float getNodeBoost(NodeState state) {
        IndexingRule rule = getApplicableIndexingRule(state);
        if (rule != null) {
            return rule.getNodeBoost();
        }
        return DEFAULT_BOOST;
    }

    









    public boolean isIncludedInNodeScopeIndex(NodeState state,
                                              Name propertyName) {
        IndexingRule rule = getApplicableIndexingRule(state);
        if (rule != null) {
            return rule.isIncludedInNodeScopeIndex(propertyName);
        }
        
        return true;
    }

    









    public boolean useInExcerpt(NodeState state, Name propertyName) {
        IndexingRule rule = getApplicableIndexingRule(state);
        if (rule != null) {
            return rule.useInExcerpt(propertyName);
        }
        
        return true;
    }

    











    public Analyzer getPropertyAnalyzer(String fieldName) {
        if (analyzers.containsKey(fieldName)) {
            return analyzers.get(fieldName);
        }
        return null;
    }

    

    public void nodeTypeRegistered(Name ntName) {
        try {
            refreshIndexRules();
        } catch (Exception e) {
            log.warn("Unable to refresh index rules", e);
        }
    }

    public void nodeTypeReRegistered(Name ntName) {
        
    }

    public void nodeTypesUnregistered(Collection<Name> names) {
        
    }

    

    





    private void refreshIndexRules() throws Exception {
        Map<Name, List<IndexingRule>> nt2rules = new HashMap<Name, List<IndexingRule>>();
        Name[] ntNames = ntReg.getRegisteredNodeTypes();
        NodeList indexingConfigs = configuration.getChildNodes();
        for (int i = 0; i < indexingConfigs.getLength(); i++) {
            Node configNode = indexingConfigs.item(i);
            if (configNode.getNodeName().equals("index-rule")) {
                IndexingRule element = new IndexingRule(configNode);
                
                log.debug("Found rule '{}' for NodeType '{}'", element, element.getNodeTypeName());
                for (Name ntName : ntNames) {
                    if (ntReg.getEffectiveNodeType(ntName).includesNodeType(element.getNodeTypeName())) {
                        List<IndexingRule> perNtConfig = nt2rules.get(ntName);
                        if (perNtConfig == null) {
                            perNtConfig = new ArrayList<IndexingRule>();
                            nt2rules.put(ntName, perNtConfig);
                        }
                        log.debug("Registering it for name '{}'", ntName);
                        perNtConfig.add(new IndexingRule(element, ntName));
                    }
                }
            }
        }
        configElements = nt2rules;
    }


    






    private IndexingRule getApplicableIndexingRule(NodeState state) {
        List<IndexingRule> rules = null;
        List<IndexingRule> r = configElements.get(state.getNodeTypeName());
        if (r != null) {
            rules = new ArrayList<IndexingRule>();
            rules.addAll(r);
        }

        for (Name name : state.getMixinTypeNames()) {
            r = configElements.get(name);
            if (r != null) {
                if (rules == null) {
                    rules = new ArrayList<IndexingRule>();
                }
                rules.addAll(r);
            }
        }

        if (rules != null) {
            for (IndexingRule rule : rules) {
                if (rule.appliesTo(state)) {
                    return rule;
                }
            }
        }

        
        return null;
    }

    





    private Properties getNamespaces(Node node) {
        Properties namespaces = new Properties();
        NamedNodeMap attributes = node.getAttributes();
        for (int i = 0; i < attributes.getLength(); i++) {
            Attr attribute = (Attr) attributes.item(i);
            if (attribute.getName().startsWith("xmlns:")) {
                namespaces.setProperty(
                        attribute.getName().substring(6), attribute.getValue());
            }
        }
        return namespaces;
    }

    











    private void createPropertyConfigs(Node config,
                                       Map<Name, PropertyConfig> propConfigs,
                                       List<NamePattern> namePatterns)
            throws IllegalNameException, NamespaceException {
        NodeList childNodes = config.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); i++) {
            Node n = childNodes.item(i);
            if (n.getNodeName().equals("property")) {
                NamedNodeMap attributes = n.getAttributes();
                
                float boost = 1.0f;
                Node boostAttr = attributes.getNamedItem("boost");
                if (boostAttr != null) {
                    try {
                        boost = Float.parseFloat(boostAttr.getNodeValue());
                    } catch (NumberFormatException e) {
                        
                    }
                }

                
                boolean nodeScopeIndex = true;
                Node nsIndex = attributes.getNamedItem("nodeScopeIndex");
                if (nsIndex != null) {
                    nodeScopeIndex = Boolean.valueOf(nsIndex.getNodeValue());
                }

                
                boolean isRegexp = false;
                Node regexp = attributes.getNamedItem("isRegexp");
                if (regexp != null) {
                    isRegexp = Boolean.valueOf(regexp.getNodeValue());
                }

                
                boolean useInExcerpt = true;
                Node excerpt = attributes.getNamedItem("useInExcerpt");
                if (excerpt != null) {
                    useInExcerpt = Boolean.valueOf(excerpt.getNodeValue());
                }

                PropertyConfig pc = new PropertyConfig(
                        boost, nodeScopeIndex, useInExcerpt);

                if (isRegexp) {
                    namePatterns.add(new NamePattern(
                            getTextContent(n), pc, resolver));
                } else {
                    Name propName = resolver.getQName(getTextContent(n));
                    propConfigs.put(propName, pc);
                }
            }
        }
    }

    









    private PathExpression getCondition(Node config)
            throws MalformedPathException, IllegalNameException, NamespaceException {
        Node conditionAttr = config.getAttributes().getNamedItem("condition");
        if (conditionAttr == null) {
            return null;
        }
        String conditionString = conditionAttr.getNodeValue();
        int idx;
        int axis;
        Name elementTest = null;
        Name nameTest = null;
        Name propertyName;
        String propertyValue;

        
        if (conditionString.startsWith("ancestor::")) {
            axis = PathExpression.ANCESTOR;
            idx = "ancestor::".length();
        } else if (conditionString.startsWith("parent::")) {
            axis = PathExpression.PARENT;
            idx = "parent::".length();
        } else if (conditionString.startsWith("@")) {
            axis = PathExpression.SELF;
            idx = "@".length();
        } else {
            axis = PathExpression.CHILD;
            idx = 0;
        }

        try {
            if (conditionString.startsWith("element(", idx)) {
                int colon = conditionString.indexOf(',',
                        idx + "element(".length());
                String name = conditionString.substring(
                        idx + "element(".length(), colon).trim();
                if (!name.equals("*")) {
                    nameTest = resolver.getQName(ISO9075.decode(name));
                }
                idx = conditionString.indexOf(")/@", colon);
                String type = conditionString.substring(colon + 1, idx).trim();
                elementTest = resolver.getQName(ISO9075.decode(type));
                idx += ")/@".length();
            } else {
                if (axis == PathExpression.ANCESTOR
                        || axis == PathExpression.CHILD
                        || axis == PathExpression.PARENT) {
                    
                    String name = conditionString.substring(idx,
                            conditionString.indexOf('/', idx));
                    if (!name.equals("*")) {
                        nameTest = resolver.getQName(ISO9075.decode(name));
                    }
                    idx += name.length() + "/@".length();
                }
            }

            
            int eq = conditionString.indexOf('=', idx);
            String name = conditionString.substring(idx, eq).trim();
            propertyName = resolver.getQName(ISO9075.decode(name));

            
            int quote = conditionString.indexOf('\'', eq) + 1;
            propertyValue = conditionString.substring(quote,
                    conditionString.indexOf('\'', quote));
        } catch (IndexOutOfBoundsException e) {
            throw new MalformedPathException(conditionString);
        }

        return new PathExpression(axis, elementTest,
                nameTest, propertyName, propertyValue);
    }

    



    private static String getTextContent(Node node) {
        StringBuffer content = new StringBuffer();
        NodeList nodes = node.getChildNodes();
        for (int i = 0; i < nodes.getLength(); i++) {
            Node n = nodes.item(i);
            if (n.getNodeType() == Node.TEXT_NODE) {
                content.append(((CharacterData) n).getData());
            }
        }
        return content.toString();
    }

    


    private static final class NamePattern {

        


        private final Pattern pattern;

        


        private final PropertyConfig config;

        











        private NamePattern(String pattern,
                            PropertyConfig config,
                            NameResolver resolver)
                throws IllegalNameException, NamespaceException {
            String uri = Name.NS_DEFAULT_URI;
            String localPattern = pattern;
            int idx = pattern.indexOf(':');
            if (idx != -1) {
                String prefix = pattern.substring(0, idx);
                if (prefix.equals(".*")) {
                    
                    uri = prefix;
                } else {
                    
                    
                    uri = resolver.getQName(prefix + ":a").getNamespaceURI();
                }
                localPattern = pattern.substring(idx + 1);
            }
            this.pattern = Pattern.name(uri, localPattern);
            this.config = config;
        }

        




        boolean matches(Path path) {
            return pattern.match(path).isFullMatch();
        }

        


        PropertyConfig getConfig() {
            return config;
        }
    }

    private class IndexingRule {

        


        private final Name nodeTypeName;

        


        private final Map<Name, PropertyConfig> propConfigs;

        


        private final List<NamePattern> namePatterns;

        


        private final PathExpression condition;

        


        private final float boost;

        






        IndexingRule(IndexingRule original, Name nodeTypeName) {
            this.nodeTypeName = nodeTypeName;
            this.propConfigs = original.propConfigs;
            this.namePatterns = original.namePatterns;
            this.condition = original.condition;
            this.boost = original.boost;
        }

        






        IndexingRule(Node config)
                throws MalformedPathException, IllegalNameException, NamespaceException {
            this.nodeTypeName = getNodeTypeName(config);
            this.condition = getCondition(config);
            this.boost = getNodeBoost(config);
            this.propConfigs = new HashMap<Name, PropertyConfig>();
            this.namePatterns = new ArrayList<NamePattern>();
            createPropertyConfigs(config, propConfigs, namePatterns);
        }

        




        public Name getNodeTypeName() {
            return nodeTypeName;
        }

        


        public float getNodeBoost() {
            return boost;
        }

        







        public boolean isIndexed(Name propertyName) {
            return getConfig(propertyName) != null;
        }

        







        public float getBoost(Name propertyName) {
            PropertyConfig config = getConfig(propertyName);
            if (config != null) {
                return config.boost;
            } else {
                return DEFAULT_BOOST;
            }
        }

        








        public boolean isIncludedInNodeScopeIndex(Name propertyName) {
            PropertyConfig config = getConfig(propertyName);
            return config != null && config.nodeScopeIndex;
        }

        








        public boolean useInExcerpt(Name propertyName) {
            PropertyConfig config = getConfig(propertyName);
            return config == null || config.useInExcerpt;
        }

        







        public boolean appliesTo(NodeState state) {
            if (!nodeTypeName.equals(state.getNodeTypeName())) {
                return false;
            }
            return condition == null || condition.evaluate(state);
        }

        

        





        private PropertyConfig getConfig(Name propertyName) {
            PropertyConfig config = propConfigs.get(propertyName);
            if (config != null) {
                return config;
            } else if (namePatterns.size() > 0) {
                Path path = PATH_FACTORY.create(propertyName);
                
                for (NamePattern np : namePatterns) {
                    if (np.matches(path)) {
                        return np.getConfig();
                    }
                }
            }
            return null;
        }

        









        private Name getNodeTypeName(Node config)
                throws IllegalNameException, NamespaceException {
            String ntString = config.getAttributes().getNamedItem("nodeType").getNodeValue();
            return resolver.getQName(ntString);
        }

        






        private float getNodeBoost(Node config) {
            Node boost = config.getAttributes().getNamedItem("boost");
            if (boost != null) {
                try {
                    return Float.parseFloat(boost.getNodeValue());
                } catch (NumberFormatException e) {
                    
                }
            }
            return DEFAULT_BOOST;
        }
    }

    


    private class PropertyConfig {

        


        final float boost;

        



        final boolean nodeScopeIndex;

        



        final boolean useInExcerpt;

        PropertyConfig(float boost,
                       boolean nodeScopeIndex,
                       boolean useInExcerpt) {
            this.boost = boost;
            this.nodeScopeIndex = nodeScopeIndex;
            this.useInExcerpt = useInExcerpt;
        }
    }

    private class PathExpression {

        static final int SELF = 0;

        static final int CHILD = 1;

        static final int ANCESTOR = 2;

        static final int PARENT = 3;

        private final int axis;

        private final Name elementTest;

        private final Name nameTest;

        private final Name propertyName;

        private final String propertyValue;

        PathExpression(int axis, Name elementTest, Name nameTest,
                       Name propertyName, String propertyValue) {
            this.axis = axis;
            this.elementTest = elementTest;
            this.nameTest = nameTest;
            this.propertyName = propertyName;
            this.propertyValue = propertyValue;
        }

        








        boolean evaluate(final NodeState context) {
            
            Iterator nodeStates;
            if (axis == SELF) {
                nodeStates = Collections.singletonList(context).iterator();
            } else if (axis == CHILD) {
                nodeStates = new AbstractIteratorDecorator(
                        context.getChildNodeEntries().iterator()) {
                    public Object next() {
                        ChildNodeEntry cne =
                                (ChildNodeEntry) super.next();
                        try {
                            return ism.getItemState(cne.getId());
                        } catch (ItemStateException e) {
                            NoSuchElementException nsee = new NoSuchElementException("No node with id " + cne.getId() + " found in child axis");
                            nsee.initCause(e);
                            throw nsee;
                        }
                    }
                };
            } else if (axis == ANCESTOR) {
                try {
                    nodeStates = new Iterator() {

                        private NodeState next = context.getParentId() == null ? null :
                                (NodeState) ism.getItemState(context.getParentId());

                        public void remove() {
                            throw new UnsupportedOperationException();
                        }

                        public boolean hasNext() {
                            return next != null;
                        }

                        public Object next() {
                            NodeState tmp = next;
                            try {
                                if (next.getParentId() != null) {
                                    next = (NodeState) ism.getItemState(next.getParentId());
                                } else {
                                    next = null;
                                }
                            } catch (ItemStateException e) {
                                next = null;
                            }
                            return tmp;
                        }
                    };
                } catch (ItemStateException e) {
                    nodeStates = Collections.EMPTY_LIST.iterator();
                }
            } else if (axis == PARENT) {
                try {
                    if (context.getParentId() != null) {
                        NodeState state = (NodeState) ism.getItemState(context.getParentId());
                        nodeStates = Collections.singletonList(state).iterator();
                    } else {
                        nodeStates = Collections.EMPTY_LIST.iterator();
                    }
                } catch (ItemStateException e) {
                    nodeStates = Collections.EMPTY_LIST.iterator();
                }
            } else {
                
                nodeStates = Collections.EMPTY_LIST.iterator();
            }

            
            while (nodeStates.hasNext()) {
                try {
                    NodeState current = (NodeState) nodeStates.next();
                    if (elementTest != null
                            && !current.getNodeTypeName().equals(elementTest)) {
                        continue;
                    }
                    if (nameTest != null
                            && !hmgr.getName(current.getNodeId()).equals(nameTest)) {
                        continue;
                    }
                    if (!current.hasPropertyName(propertyName)) {
                        continue;
                    }
                    PropertyId propId = new PropertyId(
                            current.getNodeId(), propertyName);
                    PropertyState propState =
                            (PropertyState) ism.getItemState(propId);
                    InternalValue[] values = propState.getValues();
                    for (InternalValue value : values) {
                        if (value.toString().equals(propertyValue)) {
                            return true;
                        }
                    }
                } catch (RepositoryException e) {
                    
                } catch (ItemStateException e) {
                    
                }
            }
            return false;
        }
    }
}
