















package org.apache.jackrabbit.core.state;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.LinkedList;
import java.util.SortedMap;
import java.util.TreeMap;

import javax.jcr.InvalidItemStateException;
import javax.jcr.ItemNotFoundException;
import javax.jcr.ReferentialIntegrityException;
import javax.jcr.RepositoryException;

import org.apache.jackrabbit.core.CachingHierarchyManager;
import org.apache.jackrabbit.core.HierarchyManager;
import org.apache.jackrabbit.core.ZombieHierarchyManager;
import org.apache.jackrabbit.core.id.ItemId;
import org.apache.jackrabbit.core.id.NodeId;
import org.apache.jackrabbit.core.id.PropertyId;
import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
import org.apache.jackrabbit.core.util.Dumpable;
import org.apache.jackrabbit.spi.Name;
import org.apache.jackrabbit.spi.QNodeDefinition;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;




public class SessionItemStateManager
        implements UpdatableItemStateManager, Dumpable, NodeStateListener {

    private static Logger log = LoggerFactory.getLogger(SessionItemStateManager.class);

    


    private final UpdatableItemStateManager stateMgr;

    


    private CachingHierarchyManager hierMgr;

    


    private final ItemStateStore atticStore;

    


    private final ItemStateStore transientStore;

    



    private AtticItemStateManager attic;

    


    private final NodeTypeRegistry ntReg;

    


    private final transient StateChangeDispatcher dispatcher = new StateChangeDispatcher();

    






    public SessionItemStateManager(NodeId rootNodeId,
                                   LocalItemStateManager stateMgr,
                                   NodeTypeRegistry ntReg) {
        transientStore = new ItemStateMap();
        atticStore = new ItemStateMap();

        this.stateMgr = stateMgr;

        
        hierMgr = new CachingHierarchyManager(rootNodeId, this);
        addListener(hierMgr);

        this.ntReg = ntReg;
    }

    




    public HierarchyManager getHierarchyMgr() {
        return hierMgr;
    }

    






    public HierarchyManager getAtticAwareHierarchyMgr() {
        return new ZombieHierarchyManager(hierMgr, this, getAttic());
    }

    

    


    public void dump(PrintStream ps) {
        ps.println("SessionItemStateManager (" + this + ")");
        ps.println();
        ps.print("[transient] ");
        if (transientStore instanceof Dumpable) {
            ((Dumpable) transientStore).dump(ps);
        } else {
            ps.println(transientStore.toString());
        }
        ps.println();
        ps.print("[attic]     ");
        if (atticStore instanceof Dumpable) {
            ((Dumpable) atticStore).dump(ps);
        } else {
            ps.println(atticStore.toString());
        }
        ps.println();
    }

    

    


    public ItemState getItemState(ItemId id)
            throws NoSuchItemStateException, ItemStateException {

        
        if (atticStore.contains(id)) {
            






            return getTransientItemState(id);
        }

        
        if (transientStore.contains(id)) {
            return getTransientItemState(id);
        }

        return stateMgr.getItemState(id);
    }

    


    public boolean hasItemState(ItemId id) {
        
        if (atticStore.contains(id)) {
            




            return transientStore.contains(id);
        }
        
        if (transientStore.contains(id)) {
            return true;
        }
        
        return stateMgr.hasItemState(id);
    }

    


    public NodeReferences getNodeReferences(NodeId id)
            throws NoSuchItemStateException, ItemStateException {

        return stateMgr.getNodeReferences(id);
    }

    


    public boolean hasNodeReferences(NodeId id) {
        return stateMgr.hasNodeReferences(id);
    }

    

    


    public void edit() throws IllegalStateException {
        stateMgr.edit();
    }

    


    public boolean inEditMode() {
        return stateMgr.inEditMode();
    }

    


    public NodeState createNew(NodeId id, Name nodeTypeName,
                               NodeId parentId)
            throws IllegalStateException {
        return stateMgr.createNew(id, nodeTypeName, parentId);
    }

    



    public NodeState createNew(NodeState transientState)
            throws IllegalStateException {

        NodeState persistentState = createNew(transientState.getNodeId(),
                transientState.getNodeTypeName(),
                transientState.getParentId());
        transientState.connect(persistentState);
        return persistentState;
    }

    


    public PropertyState createNew(Name propName, NodeId parentId)
            throws IllegalStateException {
        return stateMgr.createNew(propName, parentId);
    }

    



    public PropertyState createNew(PropertyState transientState)
            throws IllegalStateException {

        PropertyState persistentState = createNew(transientState.getName(),
                transientState.getParentId());
        transientState.connect(persistentState);
        return persistentState;
    }


    


    public void store(ItemState state) throws IllegalStateException {
        stateMgr.store(state);
    }

    


    public void destroy(ItemState state) throws IllegalStateException {
        stateMgr.destroy(state);
    }

    


    public void cancel() throws IllegalStateException {
        stateMgr.cancel();
    }

    


    public void update()
            throws ReferentialIntegrityException, StaleItemStateException,
            ItemStateException, IllegalStateException {
        stateMgr.update();
    }

    


    public void dispose() {
        
        
        removeListener(hierMgr);
        
        disposeAllTransientItemStates();
    }

    

    





    public ItemState getTransientItemState(ItemId id)
            throws NoSuchItemStateException, ItemStateException {

        ItemState state = transientStore.get(id);
        if (state != null) {
            return state;
        } else {
            throw new NoSuchItemStateException(id.toString());
        }
    }

    




    public boolean hasTransientItemState(ItemId id) {
        return transientStore.contains(id);
    }

    




    public boolean hasTransientItemStateInAttic(ItemId id) {
        return atticStore.contains(id);
    }

    



    public boolean hasAnyTransientItemStates() {
        return !transientStore.isEmpty();
    }

    














    public Collection<ItemState> getDescendantTransientItemStates(ItemId id)
            throws InvalidItemStateException, RepositoryException {
        try {
            return getDescendantItemStates(
                    id, transientStore, getAtticAwareHierarchyMgr());
        } catch (ItemNotFoundException e) {
            
            
            
            
            
            
            
            
            throw new InvalidItemStateException(
                    "Item seems to have been removed externally", e);
        }
    }

    








    public Iterable<ItemState> getDescendantTransientItemStatesInAttic(
            ItemId id) throws RepositoryException {
        return getDescendantItemStates(
                id, atticStore,
                new ZombieHierarchyManager(hierMgr, this, getAttic()));
    }

    











    private List<ItemState> getDescendantItemStates(
            ItemId id, ItemStateStore store, HierarchyManager hierarchyManager)
            throws RepositoryException {
        if (id.denotesNode() && !store.isEmpty()) {
            
            SortedMap<Integer, Collection<ItemState>> statesByReverseDepth =
                new TreeMap<Integer, Collection<ItemState>>();
            for (ItemState state : store.values()) {
                
                int depth = hierarchyManager.getShareRelativeDepth(
                        (NodeId) id, state.getId());
                if (depth > 0) {
                    Collection<ItemState> statesAtDepth =
                        statesByReverseDepth.get(-depth);
                    if (statesAtDepth == null) {
                        statesAtDepth = new ArrayList<ItemState>();
                        statesByReverseDepth.put(-depth, statesAtDepth);
                    }
                    statesAtDepth.add(state);
                }
            }

            
            List<ItemState> descendants = new ArrayList<ItemState>();
            for (Collection<ItemState> statesAtDepth
                    : statesByReverseDepth.values()) {
                descendants.addAll(statesAtDepth);
            }
            return descendants;
        } else {
            return Collections.emptyList();
        }
    }

    







    public NodeId getIdOfRootTransientNodeState() throws RepositoryException {
        if (transientStore.isEmpty()) {
            return null;
        }

        
        if (transientStore.contains(hierMgr.getRootNodeId())) {
            return hierMgr.getRootNodeId();
        }

        
        
        
        

        
        Collection<NodeId> candidateIds = new LinkedList<NodeId>();
        try {
            HierarchyManager hierMgr = getHierarchyMgr();
            for (ItemState state : transientStore.values()) {
                if (state.getStatus() == ItemState.STATUS_EXISTING_MODIFIED) {
                    NodeId nodeId;
                    if (state.isNode()) {
                        nodeId = (NodeId) state.getId();
                    } else {
                        nodeId = state.getParentId();
                    }
                    
                    boolean skip = false;
                    for (NodeId id : candidateIds) {
                        if (nodeId.equals(id) || hierMgr.isAncestor(id, nodeId)) {
                            
                            
                            skip = true;
                            break;
                        }
                        if (hierMgr.isAncestor(nodeId, id)) {
                            
                            candidateIds.remove(id);
                        }
                    }
                    if (!skip) {
                        
                        candidateIds.add(nodeId);
                    }
                }
            }

            if (candidateIds.size() == 1) {
                return candidateIds.iterator().next();
            }

            
            NodeId candidateId = null;
            for (NodeId id : candidateIds) {
                if (candidateId == null) {
                    candidateId = id;
                } else {
                    if (hierMgr.getDepth(id) < hierMgr.getDepth(candidateId)) {
                        candidateId = id;
                    }
                }
            }

            
            
            NodeState state = (NodeState) getItemState(candidateId);
            NodeId parentId = state.getParentId();
            boolean continueWithParent = false;
            while (parentId != null) {
                for (NodeId id : candidateIds) {
                    if (hierMgr.getRelativeDepth(parentId, id) == -1) {
                        continueWithParent = true;
                        break;
                    }
                }
                if (continueWithParent) {
                    state = (NodeState) getItemState(candidateId);
                    parentId = state.getParentId();
                    continueWithParent = false;
                } else {
                    break;
                }
            }
            return parentId;
        } catch (ItemStateException e) {
            throw new RepositoryException("failed to determine common root of transient changes", e);
        }
    }

    







    public boolean isItemStateInAttic(ItemId id) {
        return atticStore.contains(id);
    }

    

    







    public NodeState createTransientNodeState(NodeId id, Name nodeTypeName, NodeId parentId, int initialStatus)
            throws ItemStateException {

        
        synchronized (transientStore) {
            if (transientStore.contains(id)) {
                String msg = "there's already a node state instance with id " + id;
                log.debug(msg);
                throw new ItemStateException(msg);
            }

            NodeState state = new NodeState(id, nodeTypeName, parentId,
                    initialStatus, true);
            
            transientStore.put(state);
            state.setContainer(this);
            return state;
        }
    }

    





    public NodeState createTransientNodeState(NodeState overlayedState, int initialStatus)
            throws ItemStateException {

        ItemId id = overlayedState.getNodeId();

        
        synchronized (transientStore) {
            if (transientStore.contains(id)) {
                String msg = "there's already a node state instance with id " + id;
                log.debug(msg);
                throw new ItemStateException(msg);
            }

            NodeState state = new NodeState(overlayedState, initialStatus, true);
            
            transientStore.put(state);
            state.setContainer(this);
            return state;
        }
    }

    






    public PropertyState createTransientPropertyState(NodeId parentId, Name propName, int initialStatus)
            throws ItemStateException {

        PropertyId id = new PropertyId(parentId, propName);

        
        synchronized (transientStore) {
            if (transientStore.contains(id)) {
                String msg = "there's already a property state instance with id " + id;
                log.debug(msg);
                throw new ItemStateException(msg);
            }

            PropertyState state = new PropertyState(id, initialStatus, true);
            
            transientStore.put(state);
            state.setContainer(this);
            return state;
        }
    }

    





    public PropertyState createTransientPropertyState(PropertyState overlayedState, int initialStatus)
            throws ItemStateException {

        PropertyId id = overlayedState.getPropertyId();

        
        synchronized (transientStore) {
            if (transientStore.contains(id)) {
                String msg = "there's already a property state instance with id " + id;
                log.debug(msg);
                throw new ItemStateException(msg);
            }

            PropertyState state = new PropertyState(overlayedState, initialStatus, true);
            
            transientStore.put(state);
            state.setContainer(this);
            return state;
        }
    }

    






    public void disconnectTransientItemState(ItemState state) {
        state.disconnect();
    }

    







    public void disposeTransientItemState(ItemState state) {
        
        
        state.discard();
        
        transientStore.remove(state.getId());
        
        state.onDisposed();
    }

    






    public void moveTransientItemStateToAttic(ItemState state) {
        
        transientStore.remove(state.getId());
        
        atticStore.put(state);
    }

    






    public void disposeTransientItemStateInAttic(ItemState state) {
        
        
        state.discard();
        
        atticStore.remove(state.getId());
        
        state.onDisposed();
    }

    


    public void disposeAllTransientItemStates() {
        
        
        Collection<ItemState> tmp = new ArrayList<ItemState>(transientStore.values());
        for (ItemState state : tmp) {
            disposeTransientItemState(state);
        }
        tmp = new ArrayList<ItemState>(atticStore.values());
        for (ItemState state : tmp) {
            disposeTransientItemStateInAttic(state);
        }
    }

    




    public void addListener(ItemStateListener listener) {
        dispatcher.addListener(listener);
    }

    




    public void removeListener(ItemStateListener listener) {
        dispatcher.removeListener(listener);
    }

    





    public ItemStateManager getAttic() {
        if (attic == null) {
            attic = new AtticItemStateManager();
        }
        return attic;
    }

    

    






    public void stateCreated(ItemState created) {
        ItemState visibleState = created;
        if (created.getContainer() != this) {
            
            ItemState transientState = transientStore.get(created.getId());
            if (transientState != null) {
                if (transientState.hasOverlayedState()) {
                    
                    transientState.pull();
                    transientState.setStatus(ItemState.STATUS_EXISTING);
                } else {
                    
                    try {
                        ItemState local = stateMgr.getItemState(created.getId());
                        transientState.connect(local);
                        
                        transientState.setModCount(local.getModCount());
                        transientState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
                    } catch (ItemStateException e) {
                        
                        transientState.setStatus(ItemState.STATUS_STALE_MODIFIED);
                    }
                }
                visibleState = transientState;
            }
        }
        dispatcher.notifyStateCreated(visibleState);
    }

    






    public void stateModified(ItemState modified) {
        ItemState visibleState = modified;
        if (modified.getContainer() != this) {
            
            ItemState transientState = transientStore.get(modified.getId());
            if (transientState != null) {
                if (transientState.isNode() && !transientState.isStale()) {
                    
                    NodeStateMerger.MergeContext context =
                            new NodeStateMerger.MergeContext() {
                                public boolean isAdded(ItemId id) {
                                    ItemState is = transientStore.get(id);
                                    return is != null
                                            && is.getStatus() == ItemState.STATUS_NEW;
                                }

                                public boolean isDeleted(ItemId id) {
                                    return atticStore.contains(id);
                                }

                                public boolean isModified(ItemId id) {
                                    ItemState is = transientStore.get(id);
                                    return is != null
                                            && is.getStatus() == ItemState.STATUS_EXISTING_MODIFIED;
                                }

                                public boolean allowsSameNameSiblings(NodeId id) {
                                    try {
                                        NodeState ns = (NodeState) getItemState(id);
                                        NodeState parent = (NodeState) getItemState(ns.getParentId());
                                        Name name = parent.getChildNodeEntry(id).getName();
                                        EffectiveNodeType ent = ntReg.getEffectiveNodeType(
                                                parent.getNodeTypeName(),
                                                parent.getMixinTypeNames());
                                        QNodeDefinition def = ent.getApplicableChildNodeDef(name, ns.getNodeTypeName(), ntReg);
                                        return def != null && def.allowsSameNameSiblings();
                                    } catch (Exception e) {
                                        log.warn("Unable to get node definition", e);
                                        return false;
                                    }
                                }
                            };
                    if (NodeStateMerger.merge((NodeState) transientState, context)) {
                        
                        return;
                    }
                }
                transientState.setStatus(ItemState.STATUS_STALE_MODIFIED);
                visibleState = transientState;
            }
            
            transientState = atticStore.get(modified.getId());
            if (transientState != null) {
                transientState.setStatus(ItemState.STATUS_STALE_MODIFIED);
                visibleState = transientState;
            }
        }
        dispatcher.notifyStateModified(visibleState);
    }

    






    public void stateDestroyed(ItemState destroyed) {
        ItemState visibleState = destroyed;
        if (destroyed.getContainer() != this) {
            
            ItemState transientState = transientStore.get(destroyed.getId());
            if (transientState != null) {
                transientState.setStatus(ItemState.STATUS_STALE_DESTROYED);
                visibleState = transientState;
            } else {
                
                transientState = atticStore.get(destroyed.getId());
                if (transientState != null) {
                    atticStore.remove(destroyed.getId());
                    transientState.onDisposed();
                }
            }
        }
        dispatcher.notifyStateDestroyed(visibleState);
    }

    






    public void stateDiscarded(ItemState discarded) {
        ItemState visibleState = discarded;
        if (discarded.getContainer() != this) {
            
            ItemState transientState = transientStore.get(discarded.getId());
            if (transientState != null) {
                transientState.setStatus(ItemState.STATUS_UNDEFINED);
                visibleState = transientState;
            }
        }
        dispatcher.notifyStateDiscarded(visibleState);
    }

    





    public void nodeAdded(NodeState state, Name name, int index, NodeId id) {
        if (state.getContainer() == this || !transientStore.contains(state.getId())) {
            dispatcher.notifyNodeAdded(state, name, index, id);
        }
    }

    





    public void nodesReplaced(NodeState state) {
        if (state.getContainer() == this || !transientStore.contains(state.getId())) {
            dispatcher.notifyNodesReplaced(state);
        }
    }

    





    public void nodeModified(NodeState state) {
        if (state.getContainer() == this || !transientStore.contains(state.getId())) {
            dispatcher.notifyNodeModified(state);
        }
    }

    





    public void nodeRemoved(NodeState state, Name name, int index, NodeId id) {
        if (state.getContainer() == this || !transientStore.contains(state.getId())) {
            dispatcher.notifyNodeRemoved(state, name, index, id);
        }
    }

    

    




    private class AtticItemStateManager implements ItemStateManager {

        


        public ItemState getItemState(ItemId id)
                throws NoSuchItemStateException, ItemStateException {

            ItemState state = atticStore.get(id);
            if (state != null) {
                return state;
            } else {
                throw new NoSuchItemStateException(id.toString());
            }
        }

        


        public boolean hasItemState(ItemId id) {
            return atticStore.contains(id);
        }

        


        public NodeReferences getNodeReferences(NodeId id)
                throws NoSuchItemStateException, ItemStateException {
            
            throw new ItemStateException("getNodeReferences() not implemented");
        }

        


        public boolean hasNodeReferences(NodeId id) {
            
            return false;
        }
    }
}
