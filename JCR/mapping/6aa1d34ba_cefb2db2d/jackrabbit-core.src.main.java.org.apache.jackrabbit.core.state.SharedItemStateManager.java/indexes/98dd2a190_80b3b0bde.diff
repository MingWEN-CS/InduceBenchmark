123a124,130
>     private static final boolean VALIDATE_HIERARCHY =
>         Boolean.getBoolean("org.apache.jackrabbit.core.state.validatehierarchy");
> 
>     
> 
> 
> 
708a716,726
>                 if (VALIDATE_HIERARCHY) {
>                     log.info("Validating change-set hierarchy");
>                     try {
>                         validateHierarchy(local);
>                     } catch (ItemStateException e) {
>                         throw e;
>                     } catch (RepositoryException e) {
>                         throw new ItemStateException("Invalid hierarchy", e);
>                     }
>                 }
> 
1098a1117,1421
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     private void validateHierarchy(ChangeLog changeLog) throws ItemStateException, RepositoryException {
> 
>         
>         validateDeleted(changeLog);
> 
>         
>         validateAdded(changeLog);
> 
>         
>         validateModified(changeLog);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     private void validateDeleted(ChangeLog changeLog) throws ItemStateException {
> 
>         
>         for (ItemState removedState : changeLog.deletedStates()) {
>             if (removedState instanceof NodeState) {
> 
>                 
>                 NodeState removedNodeState = (NodeState) removedState;
>                 NodeId id = removedNodeState.getNodeId();
> 
>                 
>                 NodeState overlayedState = (NodeState) removedState.getOverlayedState();
>                 if (overlayedState == null) {
>                     String message = "Unable to load persistent state for removed node " + id;
>                     overlayedState = (NodeState) SharedItemStateManager.this.getItemState(id);
>                     if (overlayedState == null) {
>                         log.error(message);
>                         throw new ItemStateException(message);
>                     }
>                 }
> 
>                 
>                 boolean addedAndRemoved = changeLog.has(removedNodeState.getId());
>                 if (!addedAndRemoved) {
> 
>                     
>                     NodeId oldParentId = overlayedState.getParentId();
>                     if (changeLog.deleted(oldParentId)) {
>                         
>                     } else if (changeLog.isModified(oldParentId)) {
>                         
>                     } else {
>                         String message = "Node with id " + id
>                                 + " has been removed, but the parent node isn't part of the changelog " + oldParentId;
>                         log.error(message);
>                         throw new ItemStateException(message);
>                     }
> 
>                     
>                     for (ChildNodeEntry entry : overlayedState.getChildNodeEntries()) {
> 
>                         
>                         NodeId childId = entry.getId();
> 
>                         if (changeLog.deleted(childId)) {
>                             
>                         } else if (changeLog.isModified(childId)) {
> 
>                             
>                         } else {
>                             String message = "Node with id " + id
>                                     + " has been removed, but the old child node isn't part of the changelog "
>                                     + childId;
>                             log.error(message);
>                             throw new ItemStateException(message);
>                         }
>                     }
>                 }
>             }
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     private void validateAdded(ChangeLog changeLog) throws ItemStateException {
> 
>         
>         for (ItemState state : changeLog.addedStates()) {
>             if (state instanceof NodeState) {
> 
>                 
>                 NodeState addedNodeState = (NodeState) state;
>                 NodeId id = addedNodeState.getNodeId();
> 
>                 
>                 NodeId parentId = addedNodeState.getParentId();
>                 if (changeLog.has(parentId)) { 
>                     
>                     checkParent(changeLog, addedNodeState, parentId);
>                 } else {
>                     String message = "Node with id " + id
>                             + " has been added, but the parent node isn't part of the changelog " + parentId;
>                     log.error(message);
>                     throw new ItemStateException(message);
>                 }
> 
>                 
>                 for (ChildNodeEntry entry : addedNodeState.getChildNodeEntries()) {
> 
>                     
>                     NodeId childId = entry.getId();
> 
>                     if (changeLog.has(childId)) {
>                         NodeState childState = (NodeState) changeLog.get(childId);
>                         checkParent(changeLog, childState, id);
>                         
> 
>                     } else {
>                         String message = "Node with id " + id
>                                 + " has been added, but the child node isn't part of the changelog " + childId;
>                         log.error(message);
>                         throw new ItemStateException(message);
>                     }
>                 }
>             }
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     private void validateModified(ChangeLog changeLog) throws ItemStateException, RepositoryException {
> 
>         
>         for (ItemState state : changeLog.modifiedStates()) {
>             if (state instanceof NodeState) {
> 
>                 
>                 NodeState modifiedNodeState = (NodeState) state;
>                 NodeId id = modifiedNodeState.getNodeId();
> 
>                 
>                 NodeState overlayedState = (NodeState) modifiedNodeState.getOverlayedState();
>                 if (overlayedState == null) {
>                     String message = "Unable to load persistent state for modified node " + id;
>                     log.error(message);
>                     throw new ItemStateException(message);
>                 }
> 
>                 
>                 NodeId parentId = modifiedNodeState.getParentId();
>                 NodeId oldParentId = overlayedState.getParentId();
> 
>                 
>                 if (parentId != null && changeLog.deleted(parentId)) {
>                     String message = "Parent of node with id " + id + " has been deleted";
>                     log.error(message);
>                     throw new ItemStateException(message);
>                 }
> 
>                 if (parentId != null && changeLog.has(parentId)) {
>                     checkParent(changeLog, modifiedNodeState, parentId);
>                 }
> 
>                 
>                 if (parentId == null && oldParentId == null) {
>                     
> 
>                 } else if (!parentId.equals(oldParentId)) {
> 
>                     
>                     if (changeLog.has(parentId)) {
>                         checkParent(changeLog, modifiedNodeState, parentId);
>                     } else if (!isShareable(modifiedNodeState)) {
>                         String message = "New parent of node " + id + " is not present in the changelog " + id;
>                         log.error(message);
>                         throw new ItemStateException(message);
>                     }
> 
>                     
>                     if (!changeLog.isModified(oldParentId) && !changeLog.deleted(oldParentId)) {
>                         String message = "Node with id " + id
>                                 + " has been move, but the original parent is not part of the changelog: "
>                                 + oldParentId;
>                         log.error(message);
>                         throw new ItemStateException(message);
>                     }
>                 }
> 
>                 
>                 for (ChildNodeEntry entry : modifiedNodeState.getChildNodeEntries()) {
> 
>                     NodeId childId = entry.getId();
> 
>                     
>                     if (changeLog.deleted(childId) && !changeLog.has(childId)) { 
>                         String message = "Node with id " + id + " has a deleted childid: " + childId;
>                         log.error(message);
>                         throw new ItemStateException(message);
>                     }
> 
>                     if (changeLog.has(childId)) {
>                         NodeState childState = (NodeState) changeLog.get(childId);
>                         checkParent(changeLog, childState, id);
>                     }
>                 }
> 
>                 
>                 for (ChildNodeEntry entry : modifiedNodeState.getAddedChildNodeEntries()) {
>                     NodeId childId = entry.getId();
>                     if (!changeLog.has(childId)) {
>                         String message = "ChildId " + childId + " has been added to parent " + id
>                                 + ", but is not present in the changelog";
>                         log.error(message);
>                         throw new ItemStateException(message);
>                     }
>                 }
> 
>                 
>                 for (ChildNodeEntry entry : modifiedNodeState.getRemovedChildNodeEntries()) {
>                     NodeId childId = entry.getId();
>                     if (!changeLog.isModified(childId) && !changeLog.deleted(childId)) {
>                         String message = "Child node entry with id " + childId
>                                 + " has been removed, but is not present in the changelog";
>                         log.error(message);
>                         throw new ItemStateException(message);
>                     }
>                 }
>             }
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     void checkParent(ChangeLog changeLog, NodeState childState, NodeId expectedParent) throws ItemStateException {
> 
>         
>         NodeId parentId = childState.getParentId();
>         if (!parentId.equals(expectedParent)) {
>             Set sharedSet = childState.getSharedSet();
>             if (sharedSet.contains(expectedParent)) {
>                 return;
>             }
>             String message = "Child node has another parent id " + parentId + ", expected " + expectedParent;
>             log.error(message);
>             throw new ItemStateException(message);
>         }
> 
>         if (!changeLog.has(parentId)) {
>             String message = "Parent not part of changelog";
>             log.error(message);
>             throw new ItemStateException(message);
>         }
> 
>         
>         NodeState parent = (NodeState) changeLog.get(parentId);
> 
>         
>         NodeId childId = childState.getNodeId();
>         ChildNodeEntry childNodeEntry = parent.getChildNodeEntry(childId);
>         if (childNodeEntry == null) {
>             String message = "Child not present in parent";
>             log.error(message);
>             throw new ItemStateException(message);
>         }
>     }
> 
>     
> 
> 
> 
> 
1099a1423,1444
> 
> 
> 
> 
>     private boolean isShareable(NodeState state) throws RepositoryException {
>         
>         Name primary = state.getNodeTypeName();
>         Set mixins = state.getMixinTypeNames();
>         if (mixins.contains(NameConstants.MIX_SHAREABLE)) {
>             return true;
>         }
> 
>         try {
>             EffectiveNodeType type = ntReg.getEffectiveNodeType(primary, mixins);
>             return type.includesNodeType(NameConstants.MIX_SHAREABLE);
>         } catch (NodeTypeConflictException ntce) {
>             String msg = "internal error: failed to build effective node type for node " + state.getNodeId();
>             log.debug(msg);
>             throw new RepositoryException(msg, ntce);
>         }
>     }
>     
