153,247d152
<     public boolean checkBundle() {
<         int version;
<         
<         try {
<             
<             int index = in.readInt();
< 
<             
<             version = (index >> 24) & 0xff;
<             index &= 0x00ffffff;
<             String uri = binding.nsIndex.indexToString(index);
<             String local = binding.nameIndex.indexToString(in.readInt());
<             Name nodeTypeName = NameFactoryImpl.getInstance().create(uri, local);
< 
<             log.debug("Serialzation Version: " + version);
<             log.debug("NodeTypeName: " + nodeTypeName);
<         } catch (IOException e) {
<             log.error("Error while reading NodeTypeName: " + e);
<             return false;
<         }
<         try {
<             NodeId parentId = readNodeId();
<             log.debug("ParentUUID: " + parentId);
<         } catch (IOException e) {
<             log.error("Error while reading ParentUUID: " + e);
<             return false;
<         }
<         try {
<             String definitionId = in.readUTF();
<             log.debug("DefinitionId: " + definitionId);
<         } catch (IOException e) {
<             log.error("Error while reading DefinitionId: " + e);
<             return false;
<         }
<         try {
<             Name mixinName = readIndexedQName();
<             while (mixinName != null) {
<                 log.debug("MixinTypeName: " + mixinName);
<                 mixinName = readIndexedQName();
<             }
<         } catch (IOException e) {
<             log.error("Error while reading MixinTypes: " + e);
<             return false;
<         }
<         try {
<             Name propName = readIndexedQName();
<             while (propName != null) {
<                 log.debug("PropertyName: " + propName);
<                 if (!checkPropertyState()) {
<                     return false;
<                 }
<                 propName = readIndexedQName();
<             }
<         } catch (IOException e) {
<             log.error("Error while reading property names: " + e);
<             return false;
<         }
<         try {
<             boolean hasUUID = in.readBoolean();
<             log.debug("hasUUID: " + hasUUID);
<         } catch (IOException e) {
<             log.error("Error while reading 'hasUUID': " + e);
<             return false;
<         }
<         try {
<             NodeId cneId = readNodeId();
<             while (cneId != null) {
<                 Name cneName = readQName();
<                 log.debug("ChildNodentry: " + cneId + ":" + cneName);
<                 cneId = readNodeId();
<             }
<         } catch (IOException e) {
<             log.error("Error while reading child node entry: " + e);
<             return false;
<         }
< 
<         if (version >= BundleBinding.VERSION_1) {
<             try {
<                 short modCount = readModCount();
<                 log.debug("modCount: " + modCount);
<             } catch (IOException e) {
<                 log.error("Error while reading mod cout: " + e);
<                 return false;
<             }
<         }
< 
<         return true;
<     }
< 
<     
< 
< 
< 
< 
< 
342,509d246
<     private boolean checkPropertyState() {
<         int type;
<         try {
<             type = in.readInt();
<             short modCount = (short) ((type >> 16) | 0xffff);
<             type &= 0xffff;
<             log.debug("  PropertyType: " + PropertyType.nameFromValue(type));
<             log.debug("  ModCount: " + modCount);
<         } catch (IOException e) {
<             log.error("Error while reading property type: " + e);
<             return false;
<         }
<         try {
<             boolean isMV = in.readBoolean();
<             log.debug("  MultiValued: " + isMV);
<         } catch (IOException e) {
<             log.error("Error while reading multivalued: " + e);
<             return false;
<         }
<         try {
<             String defintionId = in.readUTF();
<             log.debug("  DefinitionId: " + defintionId);
<         } catch (IOException e) {
<             log.error("Error while reading definition id: " + e);
<             return false;
<         }
< 
<         int count;
<         try {
<             count = in.readInt();
<             log.debug("  num values: " + count);
<         } catch (IOException e) {
<             log.error("Error while reading number of values: " + e);
<             return false;
<         }
<         for (int i = 0; i < count; i++) {
<             switch (type) {
<                 case PropertyType.BINARY:
<                     int size;
<                     try {
<                         size = in.readInt();
<                         log.debug("  binary size: " + size);
<                     } catch (IOException e) {
<                         log.error("Error while reading size of binary: " + e);
<                         return false;
<                     }
<                     if (size == BundleBinding.BINARY_IN_DATA_STORE) {
<                         try {
<                             String s = in.readUTF();
<                             
<                             if (s.length() > 80) {
<                                 s = s.substring(80) + "...";
<                             }
<                             log.debug("  global data store id: " + s);
<                         } catch (IOException e) {
<                             log.error("Error while reading blob id: " + e);
<                             return false;
<                         }
<                     } else if (size == BundleBinding.BINARY_IN_BLOB_STORE) {
<                         try {
<                             String s = in.readUTF();
<                             log.debug("  blobid: " + s);
<                         } catch (IOException e) {
<                             log.error("Error while reading blob id: " + e);
<                             return false;
<                         }
<                     } else {
<                         
<                         byte[] data = new byte[size];
<                         try {
<                             in.readFully(data);
<                             log.debug("  binary: " + data.length + " bytes");
<                         } catch (IOException e) {
<                             log.error("Error while reading inlined binary: " + e);
<                             return false;
<                         }
<                     }
<                     break;
<                 case PropertyType.DOUBLE:
<                     try {
<                         double d = in.readDouble();
<                         log.debug("  double: " + d);
<                     } catch (IOException e) {
<                         log.error("Error while reading double value: " + e);
<                         return false;
<                     }
<                     break;
<                 case PropertyType.DECIMAL:
<                     try {
<                         BigDecimal d = readDecimal();
<                         log.debug("  decimal: " + d);
<                     } catch (IOException e) {
<                         log.error("Error while reading decimal value: " + e);
<                         return false;
<                     }
<                     break;
<                 case PropertyType.LONG:
<                     try {
<                         double l = in.readLong();
<                         log.debug("  long: " + l);
<                     } catch (IOException e) {
<                         log.error("Error while reading long value: " + e);
<                         return false;
<                     }
<                     break;
<                 case PropertyType.BOOLEAN:
<                     try {
<                         boolean b = in.readBoolean();
<                         log.debug("  boolean: " + b);
<                     } catch (IOException e) {
<                         log.error("Error while reading boolean value: " + e);
<                         return false;
<                     }
<                     break;
<                 case PropertyType.NAME:
<                     try {
<                         Name name = readQName();
<                         log.debug("  name: " + name);
<                     } catch (IOException e) {
<                         log.error("Error while reading name value: " + e);
<                         return false;
<                     }
<                     break;
<                 case PropertyType.WEAKREFERENCE:
<                 case PropertyType.REFERENCE:
<                     try {
<                         NodeId id = readNodeId();
<                         log.debug("  reference: " + id);
<                     } catch (IOException e) {
<                         log.error("Error while reading reference value: " + e);
<                         return false;
<                     }
<                     break;
<                 default:
<                     
<                     
<                     int len;
<                     try {
<                         len = in.readInt();
<                         log.debug("  size of string value: " + len);
<                     } catch (IOException e) {
<                         log.error("Error while reading size of string value: " + e);
<                         return false;
<                     }
<                     try {
<                         byte[] bytes = new byte[len];
<                         in.readFully(bytes);
<                         String s = new String(bytes, "UTF-8");
<                         
<                         if (s.length() > 80) {
<                             s = s.substring(80) + "...";
<                         }
<                         log.debug("  string: " + s);
<                     } catch (IOException e) {
<                         log.error("Error while reading string value: " + e);
<                         return false;
<                     }
<             }
<         }
<         return true;
<     }
< 
<     
< 
< 
< 
< 
< 
