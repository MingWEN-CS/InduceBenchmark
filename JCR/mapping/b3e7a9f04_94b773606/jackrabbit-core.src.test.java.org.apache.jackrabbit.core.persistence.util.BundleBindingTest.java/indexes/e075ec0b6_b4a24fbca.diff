20a21,22
> import java.util.Arrays;
> import java.util.Calendar;
21a24,26
> import java.util.HashSet;
> 
> import javax.jcr.PropertyType;
23a29,31
> import org.apache.jackrabbit.core.id.PropertyId;
> import org.apache.jackrabbit.core.persistence.util.NodePropBundle.PropertyEntry;
> import org.apache.jackrabbit.core.value.InternalValue;
40c48
<         bundle.setParentId(new NodeId());
---
>         bundle.setParentId(new NodeId(1, 2));
43a52
> 
44a54,110
> 
>         assertBundleSerialization(bundle, new byte[] {
>                 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
>                 0, 0, 0, 0, 0, 2, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1,
>                 0, 0, 0, 0, 0 });
>     }
> 
>     public void testComplexBundle() throws Exception {
>         NodeId id = new NodeId(1, 2);
>         NodePropBundle bundle = new NodePropBundle(id);
>         bundle.setParentId(new NodeId(3, 4));
>         bundle.setNodeTypeName(NameConstants.NT_UNSTRUCTURED);
>         bundle.setMixinTypeNames(Collections.singleton(
>                 NameConstants.MIX_CREATED));
>         bundle.setReferenceable(true);
>         bundle.setSharedSet(new HashSet<NodeId>(Arrays.asList(
>                 new NodeId(5, 6), new NodeId(7, 8), new NodeId(9, 10))));
> 
>         PropertyEntry created = new PropertyEntry(
>                 new PropertyId(id, NameConstants.JCR_CREATED));
>         created.setType(PropertyType.DATE);
>         created.setMultiValued(false);
>         Calendar date = Calendar.getInstance();
>         date.setTimeInMillis(1234567890);
>         created.setValues(new InternalValue[] { InternalValue.create(date) });
>         bundle.addProperty(created);
> 
>         PropertyEntry createdby = new PropertyEntry(
>                 new PropertyId(id, NameConstants.JCR_CREATEDBY));
>         createdby.setType(PropertyType.STRING);
>         createdby.setMultiValued(false);
>         createdby.setValues(new InternalValue[] {
>                 InternalValue.create("test") });
>         bundle.addProperty(createdby);
> 
>         bundle.addChildNodeEntry(
>                 NameConstants.JCR_SYSTEM, new NodeId(11, 12));
>         bundle.addChildNodeEntry(
>                 NameConstants.JCR_VERSIONSTORAGE, new NodeId(13, 14));
> 
>         assertBundleRoundtrip(bundle);
> 
>         assertBundleSerialization(bundle, new byte[] {
>                 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0,
>                 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, -1, -1, -1, -1,
>                 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
>                 0, 0, 4, 116, 101, 115, 116, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0,
>                 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 29, 49, 57, 55, 48, 45, 48,
>                 49, 45, 49, 53, 84, 48, 55, 58, 53, 54, 58, 48, 55, 46, 56,
>                 57, 48, 43, 48, 49, 58, 48, 48, -1, -1, -1, -1, 1, 1, 0, 0,
>                 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 2, 0, 6,
>                 115, 121, 115, 116, 101, 109, 1, 0, 0, 0, 0, 0, 0, 0, 13, 0,
>                 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 2, 0, 14, 118, 101, 114, 115,
>                 105, 111, 110, 83, 116, 111, 114, 97, 103, 101, 0, 0, 0, 1,
>                 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0,
>                 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 1, 0, 0, 0, 0, 0, 0,
>                 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0 });
57a124,132
> 
>     private void assertBundleSerialization(NodePropBundle bundle, byte[] data)
>             throws Exception {
>         assertTrue(binding.checkBundle(new ByteArrayInputStream(data)));
> 
>         assertEquals(bundle, binding.readBundle(
>                 new ByteArrayInputStream(data), bundle.getId()));
>     }
> 
