65,68d64
< import org.apache.commons.collections.iterators.TransformIterator;
< import org.apache.commons.collections.collection.TransformedCollection;
< import org.apache.commons.collections.IteratorUtils;
< import org.apache.commons.collections.Transformer;
590,622c586,618
<         final Map aggregateRoots = new HashMap();
<         final HashSet removedUUIDs = new HashSet();
<         final Set addedUUIDs = new HashSet();
< 
<         index.update(IteratorUtils.toList(new TransformIterator(remove,
<                 new Transformer() {
<                     public Object transform(Object input) {
<                         UUID uuid = ((NodeId) input).getUUID();
<                         removedUUIDs.add(uuid);
<                         return uuid;
<                     }
<                 })), IteratorUtils.toList(new TransformIterator(add,
<                 new Transformer() {
<                     public Object transform(Object input) {
<                         NodeState state = (NodeState) input;
<                         if (state == null) {
<                             return null;
<                         }
<                         UUID uuid = state.getNodeId().getUUID();
<                         addedUUIDs.add(uuid);
<                         removedUUIDs.remove(uuid);
<                         Document doc = null;
<                         try {
<                             doc = createDocument(state, getNamespaceMappings(),
<                                     index.getIndexFormatVersion());
<                             retrieveAggregateRoot(state, aggregateRoots);
<                         } catch (RepositoryException e) {
<                             log.warn("Exception while creating document for node: "
<                                     + state.getNodeId() + ": " + e.toString());
<                         }
<                         return doc;
<                     }
<                 })));
---
> 
>         Map<UUID, NodeState> aggregateRoots = new HashMap<UUID, NodeState>();
>         Set<UUID> removedUUIDs = new HashSet<UUID>();
>         Set<UUID> addedUUIDs = new HashSet<UUID>();
> 
>         Collection<UUID> removeCollection = new ArrayList<UUID>();
>         while (remove.hasNext()) {
>             UUID uuid = remove.nextNodeId().getUUID();
>             removeCollection.add(uuid);
>             removedUUIDs.add(uuid);
>         }
> 
>         Collection<Document> addCollection = new ArrayList<Document>();
>         while (add.hasNext()) {
>             NodeState state = add.nextNodeState();
>             if (state != null) {
>                 UUID uuid = state.getNodeId().getUUID();
>                 addedUUIDs.add(uuid);
>                 removedUUIDs.remove(uuid);
>                 retrieveAggregateRoot(state, aggregateRoots);
> 
>                 try {
>                     addCollection.add(createDocument(
>                             state, getNamespaceMappings(),
>                             index.getIndexFormatVersion()));
>                 } catch (RepositoryException e) {
>                     log.warn("Exception while creating document for node: "
>                             + state.getNodeId() + ": " + e.toString());
>                 }
>             }
>         }
> 
>         index.update(removeCollection, addCollection);
632,649c628,642
<         if (aggregateRoots.size() > 0) {
<             Collection modified = TransformedCollection.decorate(
<                     new ArrayList(),
<                     new Transformer() {
<                         public Object transform(Object input) {
<                             NodeState state = (NodeState) input;
<                             try {
<                                 return createDocument(state,
<                                         getNamespaceMappings(),
<                                         index.getIndexFormatVersion());
<                             } catch (RepositoryException e) {
<                                 log.warn("Exception while creating document for node: "
<                                         + state.getNodeId() + ": " + e.toString());
<                             }
<                             return null;
<                         }
<                     });
<             modified.addAll(aggregateRoots.values());
---
>         if (!aggregateRoots.isEmpty()) {
>             Collection<Document> modified =
>                 new ArrayList<Document>(aggregateRoots.size());
> 
>             for (NodeState state : aggregateRoots.values()) {
>                 try {
>                     modified.add(createDocument(
>                             state, getNamespaceMappings(),
>                             index.getIndexFormatVersion()));
>                 } catch (RepositoryException e) {
>                     log.warn("Exception while creating document for node: "
>                             + state.getNodeId(), e);
>                 }
>             }
> 
1359c1352,1353
<     protected void retrieveAggregateRoot(NodeState state, Map map) {
---
>     protected void retrieveAggregateRoot(
>             NodeState state, Map<UUID, NodeState> map) {
1386,1387c1380,1381
< 
<     protected void retrieveAggregateRoot(Set removedUUIDs, Map map) {
---
>     protected void retrieveAggregateRoot(
>             Set<UUID> removedUUIDs, Map<UUID, NodeState> map) {
1398,1399c1392,1393
<                     Term aggregateUUIDs = new Term(
<                             FieldNames.AGGREGATED_NODE_UUID, "");
---
>                     Term aggregateUUIDs =
>                         new Term(FieldNames.AGGREGATED_NODE_UUID, "");
1403,1407c1397,1399
<                         Iterator it = removedUUIDs.iterator();
<                         while (it.hasNext()) {
<                             UUID uuid = (UUID) it.next();
<                             aggregateUUIDs = aggregateUUIDs.createTerm(
<                                     uuid.toString());
---
>                         for (UUID uuid : removedUUIDs) {
>                             aggregateUUIDs =
>                                 aggregateUUIDs.createTerm(uuid.toString());
1410,1413c1402,1406
<                                 Document doc = reader.document(tDocs.doc(), FieldSelectors.UUID);
<                                 NodeId nId = new NodeId(UUID.fromString(
<                                         doc.get(FieldNames.UUID)));
<                                 map.put(nId.getUUID(), ism.getItemState(nId));
---
>                                 Document doc = reader.document(
>                                         tDocs.doc(), FieldSelectors.UUID);
>                                 NodeId nId = new NodeId(
>                                         UUID.fromString(doc.get(FieldNames.UUID)));
>                                 map.put(nId.getUUID(), (NodeState) ism.getItemState(nId));
1427,1428c1420
<             log.debug("Retrieved {} aggregate roots in {} ms.",
<                     new Integer(found), new Long(time));
---
>             log.debug("Retrieved {} aggregate roots in {} ms.", found, time);
