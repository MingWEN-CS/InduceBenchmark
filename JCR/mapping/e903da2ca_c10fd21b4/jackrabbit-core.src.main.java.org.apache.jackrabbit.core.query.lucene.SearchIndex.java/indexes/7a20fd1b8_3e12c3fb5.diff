49,58d48
< import org.apache.jackrabbit.spi.commons.query.qom.QOMTreeVisitor;
< import org.apache.jackrabbit.spi.commons.query.qom.DefaultTraversingQOMTreeVisitor;
< import org.apache.jackrabbit.spi.commons.query.qom.LengthImpl;
< import org.apache.jackrabbit.spi.commons.query.qom.LowerCaseImpl;
< import org.apache.jackrabbit.spi.commons.query.qom.UpperCaseImpl;
< import org.apache.jackrabbit.spi.commons.query.qom.FullTextSearchScoreImpl;
< import org.apache.jackrabbit.spi.commons.query.qom.NodeLocalNameImpl;
< import org.apache.jackrabbit.spi.commons.query.qom.NodeNameImpl;
< import org.apache.jackrabbit.spi.commons.query.qom.PropertyValueImpl;
< import org.apache.jackrabbit.spi.commons.query.qom.DynamicOperandImpl;
794c784
<                                              OrderingImpl[] orderings,
---
>                                              Ordering[] orderings,
799,800d788
<         Sort sort = new Sort(createSortFields(orderings));
< 
806c794
<                 query.execute(searcher, sort, resultFetchHint)) {
---
>                 query.execute(searcher, orderings, resultFetchHint)) {
1006,1055d993
<     protected SortField[] createSortFields(OrderingImpl[] orderings) {
<         List<SortField> sortFields = new ArrayList<SortField>();
<         for (final OrderingImpl ordering : orderings) {
<             QOMTreeVisitor visitor = new DefaultTraversingQOMTreeVisitor() {
< 
<                 public Object visit(LengthImpl node, Object data) throws Exception {
<                     PropertyValueImpl propValue = (PropertyValueImpl) node.getPropertyValue();
<                     return new SortField(propValue.getPropertyQName().toString(),
<                             new LengthSortComparator(nsMappings),
<                             !ordering.isAscending());
<                 }
< 
<                 public Object visit(LowerCaseImpl node, Object data)
<                         throws Exception {
<                     SortField sf = (SortField) ((DynamicOperandImpl) node.getOperand()).accept(this, data);
<                     return new SortField(sf.getField(),
<                             new LowerCaseSortComparator(sf.getFactory()),
<                             !ordering.isAscending());
<                 }
< 
<                 public Object visit(UpperCaseImpl node, Object data)
<                         throws Exception {
<                     SortField sf = (SortField) ((DynamicOperandImpl) node.getOperand()).accept(this, data);
<                     return new SortField(sf.getField(),
<                             new UpperCaseSortComparator(sf.getFactory()),
<                             !ordering.isAscending());
<                 }
< 
<                 public Object visit(FullTextSearchScoreImpl node, Object data)
<                         throws Exception {
<                     
<                     return new SortField(null, SortField.SCORE,
<                             ordering.isAscending());
<                 }
< 
<                 public Object visit(NodeLocalNameImpl node, Object data) throws Exception {
<                     return new SortField(FieldNames.LOCAL_NAME,
<                            SortField.STRING, !ordering.isAscending());
<                 }
< 
<                 public Object visit(NodeNameImpl node, Object data) throws Exception {
<                     return new SortField(FieldNames.LABEL,
<                            SortField.STRING, !ordering.isAscending());
<                 }
< 
<                 public Object visit(PropertyValueImpl node, Object data)
<                         throws Exception {
<                     return new SortField(node.getPropertyQName().toString(),
<                             scs, !ordering.isAscending());
<                 }
1057,1066c995,999
<                 public Object visit(OrderingImpl node, Object data)
<                         throws Exception {
<                     return ((DynamicOperandImpl) node.getOperand()).accept(this, data);
<                 }
<             };
<             try {
<                 sortFields.add((SortField) ordering.accept(visitor, null));
<             } catch (Exception e) {
<                 
<             }
---
>     protected Ordering[] createOrderings(OrderingImpl[] orderings)
>             throws RepositoryException {
>         Ordering[] ords = new Ordering[orderings.length];
>         for (int i = 0; i < orderings.length; i++) {
>             ords[i] = Ordering.fromQOM(orderings[i], scs, nsMappings);
1068c1001
<         return sortFields.toArray(new SortField[sortFields.size()]);
---
>         return ords;
