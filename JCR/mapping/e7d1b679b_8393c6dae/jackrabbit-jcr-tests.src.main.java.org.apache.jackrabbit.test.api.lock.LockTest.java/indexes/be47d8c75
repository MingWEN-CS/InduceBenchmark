















package org.apache.jackrabbit.test.api.lock;

import javax.jcr.ItemExistsException;
import javax.jcr.Node;
import javax.jcr.Repository;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.lock.Lock;
import javax.jcr.lock.LockException;

import org.apache.jackrabbit.test.AbstractJCRTest;
import org.apache.jackrabbit.test.NotExecutableException;















public class LockTest extends AbstractJCRTest {

    


    public void testAddRemoveLockToken() throws Exception {
        
        Node n = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n, mixLockable);
        testRootNode.getSession().save();

        
        Lock lock = n.lock(false, false);
        String lockToken = lock.getLockToken();
        try {
            
            assertNotNull("session must get a non-null lock token", lockToken);

            
            assertTrue("session must hold lock token", containsLockToken(superuser, lockToken));

            
            superuser.removeLockToken(lockToken);

            String nlt = lock.getLockToken();
            assertTrue("freshly obtained lock token must either be null or the same as the one returned earlier",
                    nlt == null || nlt.equals(lockToken));

            
            assertFalse("session must not hold lock token",
                    containsLockToken(superuser, lockToken));

            
            try {
                n.addNode(nodeName2, testNodeType);
                fail("session unable to modify node");
            } catch (LockException e) {
                
            }

            
            superuser.addLockToken(lockToken);

            
            assertNotNull("session must get a non-null lock token",
                    lock.getLockToken());

            
            assertTrue("session must hold lock token",
                    containsLockToken(superuser, lock.getLockToken()));

            
            n.addNode(nodeName2, testNodeType);
        } finally {
            
            superuser.addLockToken(lockToken);
        }
    }

    



    public void testNodeLocked() throws Exception {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        testRootNode.getSession().save();

        
        Lock lock = n1.lock(false, true);
        String lt = lock.getLockToken();

        
        assertTrue("Lock must be live", lock.isLive());

        
        Session otherSuperuser = getHelper().getSuperuserSession();

        try {
            
            Node n2 = (Node) otherSuperuser.getItem(n1.getPath());

            Lock lock2 = n2.getLock();
            assertNotNull("other session must see the lock", lock2);
            String lt2 = lock2.getLockToken();
            assertTrue("other session must either not get the lock token, or see the actual one (tokens: " + lt + ", " + lt2 + ")",
                    lt2 == null || lt2.equals(lt));

            
            try {
                n2.addNode(nodeName2, testNodeType);
                fail("modifying same node in other session must fail");
            } catch (LockException e) {
                
            }
        } finally {
            otherSuperuser.logout();
        }
    }

    


    public void testGetNode() throws Exception {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        Node n1Sub = n1.addNode(nodeName1, testNodeType);
        ensureMixinType(n1Sub, mixLockable);
        testRootNode.getSession().save();

        
        n1.lock(true, true);

        assertEquals("getNode() must return the lock holder",
                n1.getPath(),
                n1.getLock().getNode().getPath());

        assertEquals("getNode() must return the lock holder",
                n1.getPath(),
                n1Sub.getLock().getNode().getPath());

        n1.unlock();
    }

    



    public void testGetLockOwnerProperty() throws Exception {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        testRootNode.getSession().save();

        
        Lock lock = n1.lock(false, true);

        if (n1.getSession().getUserID() == null) {
            assertFalse("jcr:lockOwner must not exist if Session.getUserId() returns null",
                    n1.hasProperty(jcrLockOwner));
        } else {
            assertEquals("getLockOwner() must return the same value as stored " +
                    "in property " + jcrLockOwner + " of the lock holding " +
                    "node",
                    n1.getProperty(jcrLockOwner).getString(),
                    lock.getLockOwner());
        }
        n1.unlock();
    }

    



    public void testGetLockOwner() throws Exception {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        testRootNode.getSession().save();

        
        Lock lock = n1.lock(false, true);

        assertEquals("getLockOwner() must return the same value as returned " +
                "by Session.getUserId at the time that the lock was placed",
                testRootNode.getSession().getUserID(),
                lock.getLockOwner());

        n1.unlock();
    }

    


    public void testShallowLock() throws Exception {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        Node n2 = n1.addNode(nodeName2, testNodeType);
        testRootNode.getSession().save();

        
        n1.lock(false, true);

        assertFalse("Shallow lock must not lock the child nodes of a node.",
                n2.isLocked());
    }

    


    public void testCheckedIn()
            throws NotExecutableException, RepositoryException {

        if (!isSupported(Repository.OPTION_VERSIONING_SUPPORTED)) {
            throw new NotExecutableException("Versioning is not supported.");
        }

        
        Node node = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(node, mixLockable);
        
        ensureMixinType(node, mixVersionable);
        testRootNode.getSession().save();

        node.checkin();

        try {
            node.lock(false, false);
        }
        catch (RepositoryException ex) {
            
            
            node.lock(true, false);
        }

        assertTrue("Locking of a checked-in node failed.",
                node.isLocked());

        node.unlock();
        assertFalse("Unlocking of a checked-in node failed.",
                node.isLocked());
    }

    


    public void testParentChildLock() throws Exception {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        Node n2 = n1.addNode(nodeName2, testNodeType);
        ensureMixinType(n2, mixLockable);
        testRootNode.getSession().save();

        
        n1.lock(false, true);

        
        n2.lock(false, true);

        
        n1.unlock();

        
        assertTrue("child node must still hold lock", n2.holdsLock());
    }

    


    public void testParentChildDeepLock() throws Exception {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        Node n2 = n1.addNode(nodeName2, testNodeType);
        ensureMixinType(n2, mixLockable);
        testRootNode.getSession().save();

        
        n2.lock(false, true);

        
        try {
            n1.lock(true, true);
            fail("unable to deep lock parent node");
        } catch (LockException e) {
            
        }
    }

    


    public void testIsDeep() throws RepositoryException, NotExecutableException {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        Node n2 = testRootNode.addNode(nodeName2, testNodeType);
        ensureMixinType(n2, mixLockable);
        testRootNode.getSession().save();

        
        Lock lock1 = n1.lock(false, true);
        assertFalse("Lock.isDeep() must be false if the lock has not been set " +
                "as not deep",
                lock1.isDeep());

        
        Lock lock2 = n2.lock(true, true);
        assertTrue("Lock.isDeep() must be true if the lock has been set " +
                "as deep",
                lock2.isDeep());
    }

    


    public void testIsSessionScoped() throws RepositoryException,
            NotExecutableException {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        Node n2 = testRootNode.addNode(nodeName2, testNodeType);
        ensureMixinType(n2, mixLockable);
        testRootNode.getSession().save();

        
        Lock lock1 = n1.lock(false, true);
        assertTrue("Lock.isSessionScoped() must be true if the lock " +
                "is session-scoped",
                lock1.isSessionScoped());

        
        Lock lock2 = n2.lock(false, false);
        assertFalse("Lock.isSessionScoped() must be false if the lock " +
                "is open-scoped",
                lock2.isSessionScoped());

        n2.unlock();
    }

    


    public void testLogout() throws Exception {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        testRootNode.getSession().save();

        
        Session otherSuperuser = getHelper().getSuperuserSession();

        Lock lock;
        try {
            
            Node n2 = (Node) otherSuperuser.getItem(n1.getPath());

            
            lock = n2.lock(false, true);

            
            assertTrue("lock must be alive", lock.isLive());

            
            n1.refresh(false);
            assertTrue("node must be locked", n1.isLocked());
        } finally {
            
            otherSuperuser.logout();
        }


        
        assertFalse("lock must not be alive", lock.isLive());

        
        n1.getSession().refresh(true);
        assertFalse("node must not be locked", n1.isLocked());
    }

    


    public void testLockTransfer() throws Exception {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        testRootNode.getSession().save();

        
        Session otherSuperuser = getHelper().getSuperuserSession();

        try {
            
            Node n2 = (Node) otherSuperuser.getItem(n1.getPath());

            
            Lock lock = n2.lock(false, false);

            
            assertNotNull("user must get non-null token", lock.getLockToken());

            
            String lockToken = lock.getLockToken();
            otherSuperuser.removeLockToken(lockToken);
            superuser.addLockToken(lockToken);

            String nlt = lock.getLockToken();
            assertTrue("freshly obtained lock token must either be null or the same as the one returned earlier",
                    nlt == null || nlt.equals(lockToken));

            
            assertNotNull("user must get non-null token",
                    n1.getLock().getLockToken());
        } finally {
            
            otherSuperuser.logout();
            
            n1.unlock();
        }
    }

    


    public void testOpenScopedLocks() throws Exception {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        testRootNode.getSession().save();

        
        Session otherSuperuser = getHelper().getSuperuserSession();

        try {
            
            Node n2 = (Node) otherSuperuser.getItem(n1.getPath());

            
            Lock lock = n2.lock(false, false);

            
            String lockToken = lock.getLockToken();
            otherSuperuser.removeLockToken(lockToken);
            superuser.addLockToken(lockToken);
        } finally {
            
            otherSuperuser.logout();
        }

        
        assertTrue(n1.isLocked());
    }

    


    public void testRefresh() throws Exception {
        
        Node n = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n, mixLockable);
        testRootNode.getSession().save();

        
        Lock lock = n.lock(false, true);

        
        assertTrue("lock must be alive", lock.isLive());

        
        lock.refresh();

        
        n.unlock();

        
        assertFalse("lock must not be alive", lock.isLive());
    }

    


    public void testRefreshNotLive() throws Exception {
        
        Node n = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n, mixLockable);
        testRootNode.getSession().save();

        
        Lock lock = n.lock(false, true);

        
        assertTrue("lock must be alive", lock.isLive());

        
        n.unlock();

        
        assertFalse("lock must not be alive", lock.isLive());

        
        try {
            lock.refresh();
            fail("Refresh on a lock that is not alive must fail");
        } catch (LockException e) {
            
        }
    }

    


    public void testGetLock() throws Exception {
        
        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(n1, mixLockable);
        Node n2 = n1.addNode(nodeName2, testNodeType);
        ensureMixinType(n2, mixLockable);
        testRootNode.getSession().save();

        
        n1.lock(true, true);

        
        Lock lock = n2.getLock();

        
        assertTrue("lock holding node must be parent", lock.getNode().isSame(n1));
    }

    


    public void testCheckedInUnlock() throws Exception {
        if (!isSupported(Repository.OPTION_VERSIONING_SUPPORTED)) {
            throw new NotExecutableException("Repository does not support versioning.");
        }

        
        Node testNode = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(testNode, mixLockable);
        ensureMixinType(testNode, mixVersionable);
        testRootNode.getSession().save();

        
        try {
            testNode.lock(false, false);
        }
        catch (RepositoryException ex) {
            
            
            testNode.lock(true, false);
        }
        testNode.save();
        testNode.checkin();

        
        testNode.unlock();
        assertFalse("Could not unlock a locked, checked-in node", testNode.holdsLock());
    }

    


    public void testReorder() throws Exception {

        Node testNode = setUpSameNameSiblings();

        
        testNode.lock(false, true);

        
        assertTrue("Third child node locked",
                testRootNode.getNode(nodeName1 + "[3]").isLocked());

        
        testRootNode.orderBefore(nodeName1 + "[3]", nodeName1 + "[1]");
        testRootNode.getSession().save();

        
        assertTrue("First child node locked",
                testRootNode.getNode(nodeName1 + "[1]").isLocked());
    }

    


    public void testReorder2() throws Exception {

        setUpSameNameSiblings();

        
        testRootNode.getNode(nodeName1 + "[1]").lock(false, true);

        
        assertTrue("First child node locked",
                testRootNode.getNode(nodeName1 + "[1]").isLocked());

        
        testRootNode.orderBefore(nodeName1 + "[1]", null);
        testRootNode.getSession().save();

        
        assertTrue("Third child node locked",
                testRootNode.getNode(nodeName1 + "[3]").isLocked());
    }

    




    public void testMoveLocked() throws Exception {
        Session session = testRootNode.getSession();

        
        Node testNode1 = testRootNode.addNode(nodeName1, testNodeType);
        ensureMixinType(testNode1, mixLockable);
        Node testNode2 = testNode1.addNode(nodeName2, testNodeType);
        ensureMixinType(testNode2, mixLockable);
        testRootNode.getSession().save();

        
        testNode2.lock(false, true);

        
        assertTrue("Child node locked", testNode2.isLocked());

        
        String newPath = testRootNode.getPath() + "/" + testNode2.getName();
        session.move(testNode2.getPath(), newPath);

        
        assertTrue("Child node locked before save", testNode2.isLocked());
        session.save();

        
        assertTrue("Child node locked after save", testNode2.isLocked());
    }

    



    public void testUnlockSameNameSibling() throws RepositoryException, NotExecutableException {
        Session session = testRootNode.getSession();

        Node n1, n2;

        try {
            
            n1 = testRootNode.addNode(nodeName1, testNodeType);
            n2 = testRootNode.addNode(nodeName1, testNodeType);
            session.save();
        }
        catch (ItemExistsException ex) {
            throw new NotExecutableException("Node does not seem to allow same name siblings");
        }

        ensureMixinType(n1, mixLockable);
        ensureMixinType(n2, mixLockable);
        session.save();

        
        n1.lock(true, true);
        n2.lock(true, true);

        
        assertTrue("First node locked: ", n1.isLocked());
        assertTrue("Second node locked: ", n2.isLocked());

        
        n1.unlock();

        
        assertFalse("First node unlocked: ", n1.isLocked());
        assertTrue("Second node locked: ", n2.isLocked());
    }

    



    private boolean containsLockToken(Session session, String lockToken) {
        String[] lt = session.getLockTokens();
        for (int i = 0; i < lt.length; i++) {
            if (lt[i].equals(lockToken)) {
                return true;
            }
        }
        return false;
    }

    


    private Node setUpSameNameSiblings() throws RepositoryException, NotExecutableException {
        
        try {
            Node testNode = testRootNode.addNode(nodeName1, testNodeType);
            ensureMixinType(testNode, mixLockable);
            testNode = testRootNode.addNode(nodeName1, testNodeType);
            ensureMixinType(testNode, mixLockable);
            testNode = testRootNode.addNode(nodeName1, testNodeType);
            ensureMixinType(testNode, mixLockable);
            testRootNode.getSession().save();
            return testNode;
        }
        catch (ItemExistsException ex) {
            
            throw new NotExecutableException("Node type " + testNodeType + " does not support same-name-siblings");
        }
    }
}
