30a31,32
> import java.util.Calendar;
> import java.util.GregorianCalendar;
32a35
> import java.util.TimeZone;
47a51,88
>     
> 
> 
>     private static final TimeZone[] COMMON_TIMEZONES = {
>         TimeZone.getTimeZone("GMT+00:00"), 
>         TimeZone.getTimeZone("GMT+01:00"), 
>         TimeZone.getTimeZone("GMT+02:00"), 
>         TimeZone.getTimeZone("GMT+03:00"), 
>         TimeZone.getTimeZone("GMT+04:00"), 
>         TimeZone.getTimeZone("GMT+05:00"), 
>         TimeZone.getTimeZone("GMT+06:00"), 
>         TimeZone.getTimeZone("GMT+07:00"), 
>         TimeZone.getTimeZone("GMT+08:00"), 
>         TimeZone.getTimeZone("GMT+09:00"), 
>         TimeZone.getTimeZone("GMT+10:00"), 
>         TimeZone.getTimeZone("GMT+11:00"), 
>         TimeZone.getTimeZone("GMT+12:00"), 
>         TimeZone.getTimeZone("GMT+13:00"), 
>         TimeZone.getTimeZone("GMT+14:00"), 
>         TimeZone.getTimeZone("GMT+15:00"), 
>         TimeZone.getTimeZone("GMT-16:00"), 
>         TimeZone.getTimeZone("GMT-15:00"), 
>         TimeZone.getTimeZone("GMT-14:00"), 
>         TimeZone.getTimeZone("GMT-13:00"), 
>         TimeZone.getTimeZone("GMT-12:00"), 
>         TimeZone.getTimeZone("GMT-11:00"), 
>         TimeZone.getTimeZone("GMT-10:00"), 
>         TimeZone.getTimeZone("GMT-09:00"), 
>         TimeZone.getTimeZone("GMT-08:00"), 
>         TimeZone.getTimeZone("GMT-07:00"), 
>         TimeZone.getTimeZone("GMT-06:00"), 
>         TimeZone.getTimeZone("GMT-05:00"), 
>         TimeZone.getTimeZone("GMT-04:00"), 
>         TimeZone.getTimeZone("GMT-03:00"), 
>         TimeZone.getTimeZone("GMT-02:00"), 
>         TimeZone.getTimeZone("GMT-01:00"), 
>     };
> 
252c293,297
<                     val = InternalValue.create(in.readLong());
---
>                     if (version >= BundleBinding.VERSION_3) {
>                         val = InternalValue.create(readVarLong());
>                     } else {
>                         val = InternalValue.create(in.readLong());
>                     }
265a311,315
>                 case PropertyType.DATE:
>                     if (version >= BundleBinding.VERSION_3) {
>                         val = InternalValue.create(readDate());
>                         break;
>                     } 
399a450,553
>     
> 
> 
> 
> 
> 
> 
>     private long readVarLong() throws IOException {
>         long value = 0;
>         int bits = 0;
>         long b;
>         do {
>             b = in.readUnsignedByte();
>             value = (b & 0x7f) << 57 | value >>> 7;
>             bits += 7;
>         } while ((b & 0x80) != 0);
>         value = value >>> (64 - bits);
>         if ((value & 1) != 0) {
>             return ~(value >>> 1);
>         } else {
>             return value >>> 1;
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     private Calendar readDate() throws IOException {
>         long ts = readVarLong();
> 
>         TimeZone tz;
>         if ((ts & 1) == 0) {
>             tz = COMMON_TIMEZONES[0];
>             ts >>= 1; 
>         } else if ((ts & 2) == 0) {
>             tz = COMMON_TIMEZONES[((int) ts >> 2) & 0x1f]; 
>             ts >>= 7;
>         } else {
>             int m = ((int) ts << 19) >> 21; 
>             int h = m / 60;
>             String s;
>             if (m < 0) {
>                 s = String.format("GMT-%02d:%02d", -h, h * 60 - m);
>             } else {
>                 s = String.format("GMT+%02d:%02d", h, m - h * 60);
>             }
>             tz = TimeZone.getTimeZone(s);
>             ts >>= 13;
>         }
> 
>         int u = 0;
>         int s = 0;
>         int m = 0;
>         int h = 0;
>         int type = (int) ts & 3;
>         ts >>= 2;
>         switch (type) {
>         case 3:
>             u = (int) ts & 0x3fffffff; 
>             s = u / 1000;
>             m = s / 60;
>             h = m / 60;
>             m -= h * 60;
>             s -= (h * 60 + m) * 60;
>             u -= ((h * 60 + m) * 60 + s) * 1000;
>             ts >>= 30;
>             break;
>         case 2:
>             m = (int) ts & 0x07ff; 
>             h = m / 60;
>             m -= h * 60;
>             ts >>= 11;
>             break;
>         case 1:
>             h = (int) ts & 0x1f; 
>             ts >>= 5;
>             break;
>         }
> 
>         int d = (int) ts & 0x01ff; 
>         ts >>= 9;
>         int y = (int) (ts + 2010);
> 
>         Calendar value = Calendar.getInstance(tz);
>         if (y <= 0) {
>             value.set(Calendar.YEAR, 1 - y);
>             value.set(Calendar.ERA, GregorianCalendar.BC);
>         } else {
>             value.set(Calendar.YEAR, y);
>             value.set(Calendar.ERA, GregorianCalendar.AD);
>         }
>         value.set(Calendar.DAY_OF_YEAR, d);
>         value.set(Calendar.HOUR_OF_DAY, h);
>         value.set(Calendar.MINUTE, m);
>         value.set(Calendar.SECOND, s);
>         value.set(Calendar.MILLISECOND, u);
> 
>         return value;
>     }
> 
