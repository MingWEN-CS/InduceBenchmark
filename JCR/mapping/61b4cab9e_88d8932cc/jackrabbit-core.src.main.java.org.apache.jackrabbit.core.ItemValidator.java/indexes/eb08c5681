















package org.apache.jackrabbit.core;

import javax.jcr.InvalidItemStateException;
import javax.jcr.ItemNotFoundException;
import javax.jcr.NamespaceException;
import javax.jcr.Node;
import javax.jcr.Property;
import javax.jcr.PropertyType;
import javax.jcr.RepositoryException;
import javax.jcr.lock.LockException;
import javax.jcr.nodetype.ConstraintViolationException;
import javax.jcr.nodetype.ItemDefinition;
import javax.jcr.version.VersionException;

import org.apache.jackrabbit.core.id.ItemId;
import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
import org.apache.jackrabbit.core.security.authorization.Permission;
import org.apache.jackrabbit.core.session.SessionContext;
import org.apache.jackrabbit.core.session.SessionOperation;
import org.apache.jackrabbit.core.state.NodeState;
import org.apache.jackrabbit.core.state.PropertyState;
import org.apache.jackrabbit.core.value.InternalValue;
import org.apache.jackrabbit.spi.Name;
import org.apache.jackrabbit.spi.Path;
import org.apache.jackrabbit.spi.QPropertyDefinition;
import org.apache.jackrabbit.spi.QItemDefinition;
import org.apache.jackrabbit.spi.QNodeDefinition;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;





public class ItemValidator {

    


    public static final int CHECK_ACCESS = 1;

    


    public static final int CHECK_LOCK = 2;

    


    public static final int CHECK_CHECKED_OUT = 4;

    


    public static final int CHECK_REFERENCES = 8;

    


    public static final int CHECK_CONSTRAINTS = 16;

    


    public static final int CHECK_PENDING_CHANGES = 32;

    


    public static final int CHECK_PENDING_CHANGES_ON_NODE = 64;

    


    public static final int CHECK_HOLD = 128;

    


    public static final int CHECK_RETENTION = 256;
    
    


    private static Logger log = LoggerFactory.getLogger(ItemValidator.class);

    


    protected final SessionContext context;

    





    private int enabledChecks = ~0;

    




    public ItemValidator(SessionContext context) {
        this.context = context;
    }

    







    public synchronized <T> T performRelaxed(
            SessionOperation<T> operation, int checksToDisable)
            throws RepositoryException {
        int previousChecks = enabledChecks;
        try {
            enabledChecks &= ~checksToDisable;
            log.debug("Performing {} with checks [{}] disabled",
                    operation, Integer.toBinaryString(~enabledChecks));
            return operation.perform(context);
        } finally {
            enabledChecks = previousChecks;
        }
    }

    















    public void validate(NodeState nodeState)
            throws ConstraintViolationException, RepositoryException {
        
        NodeTypeRegistry registry = context.getNodeTypeRegistry();
        EffectiveNodeType entPrimary =
            registry.getEffectiveNodeType(nodeState.getNodeTypeName());
        
        EffectiveNodeType entPrimaryAndMixins = getEffectiveNodeType(nodeState);
        QNodeDefinition def =
            context.getItemManager().getDefinition(nodeState).unwrap();

        
        for (Name requiredPrimaryType : def.getRequiredPrimaryTypes()) {
            if (!entPrimary.includesNodeType(requiredPrimaryType)) {
                String msg = safeGetJCRPath(nodeState.getNodeId())
                        + ": missing required primary type "
                        + requiredPrimaryType;
                log.debug(msg);
                throw new ConstraintViolationException(msg);
            }
        }
        
        for (QPropertyDefinition pd : entPrimaryAndMixins.getMandatoryPropDefs()) {
            if (!nodeState.hasPropertyName(pd.getName())) {
                String msg = safeGetJCRPath(nodeState.getNodeId())
                        + ": mandatory property " + pd.getName()
                        + " does not exist";
                log.debug(msg);
                throw new ConstraintViolationException(msg);
            }
        }
        
        for (QItemDefinition cnd : entPrimaryAndMixins.getMandatoryNodeDefs()) {
            if (!nodeState.hasChildNodeEntry(cnd.getName())) {
                String msg = safeGetJCRPath(nodeState.getNodeId())
                        + ": mandatory child node " + cnd.getName()
                        + " does not exist";
                log.debug(msg);
                throw new ConstraintViolationException(msg);
            }
        }
    }

    














    public void validate(PropertyState propState)
            throws ConstraintViolationException, RepositoryException {
        QPropertyDefinition def =
            context.getItemManager().getDefinition(propState).unwrap();
        InternalValue[] values = propState.getValues();
        int type = PropertyType.UNDEFINED;
        for (InternalValue value : values) {
            if (type == PropertyType.UNDEFINED) {
                type = value.getType();
            } else if (type != value.getType()) {
                throw new ConstraintViolationException(safeGetJCRPath(propState.getPropertyId())
                        + ": inconsistent value types");
            }
            if (def.getRequiredType() != PropertyType.UNDEFINED
                    && def.getRequiredType() != type) {
                throw new ConstraintViolationException(safeGetJCRPath(propState.getPropertyId())
                        + ": requiredType constraint is not satisfied");
            }
        }
        EffectiveNodeType.checkSetPropertyValueConstraints(def, values);
    }

    public synchronized void checkModify(
            ItemImpl item, int options, int permissions)
            throws RepositoryException {
        checkCondition(item, options & enabledChecks, permissions, false);
    }

    public synchronized void checkRemove(
            ItemImpl item, int options, int permissions)
            throws RepositoryException {
        checkCondition(item, options & enabledChecks, permissions, true);
    }

    private void checkCondition(ItemImpl item, int options, int permissions, boolean isRemoval) throws RepositoryException {
        if ((options & CHECK_PENDING_CHANGES) == CHECK_PENDING_CHANGES) {
            if (item.getSession().hasPendingChanges()) {
                String msg = "Unable to perform operation. Session has pending changes.";
                log.debug(msg);
                throw new InvalidItemStateException(msg);
            }
        }
        if ((options & CHECK_PENDING_CHANGES_ON_NODE) == CHECK_PENDING_CHANGES_ON_NODE) {
            if (item.isNode() && ((NodeImpl) item).hasPendingChanges()) {
                String msg = "Unable to perform operation. Session has pending changes.";
                log.debug(msg);
                throw new InvalidItemStateException(msg);
            }
        }
        if ((options & CHECK_CONSTRAINTS) == CHECK_CONSTRAINTS) {
            if (isProtected(item)) {
                String msg = "Unable to perform operation. Node is protected.";
                log.debug(msg);
                throw new ConstraintViolationException(msg);
            }
        }
        if ((options & CHECK_CHECKED_OUT) == CHECK_CHECKED_OUT) {
            NodeImpl node = (item.isNode()) ? (NodeImpl) item : (NodeImpl) item.getParent();
            if (!node.isCheckedOut()) {
                String msg = "Unable to perform operation. Node is checked-in.";
                log.debug(msg);
                throw new VersionException(msg);
            }
        }
        if ((options & CHECK_LOCK) == CHECK_LOCK) {
            checkLock(item);
        }

        if (permissions > Permission.NONE) {
            Path path = item.getPrimaryPath();
            context.getAccessManager().checkPermission(path, permissions);
        }
        if ((options & CHECK_HOLD) == CHECK_HOLD) {
            if (hasHold(item, isRemoval)) {
                throw new RepositoryException("Unable to perform operation. Node is affected by a hold.");
            }
        }
        if ((options & CHECK_RETENTION) == CHECK_RETENTION) {
            if (hasRetention(item, isRemoval)) {
                throw new RepositoryException("Unable to perform operation. Node is affected by a retention.");
            }
        }
    }

    public synchronized boolean canModify(
            ItemImpl item, int options, int permissions)
            throws RepositoryException {
        return hasCondition(item, options & enabledChecks, permissions, false);
    }

    private boolean hasCondition(ItemImpl item, int options, int permissions, boolean isRemoval) throws RepositoryException {
        if ((options & CHECK_PENDING_CHANGES) == CHECK_PENDING_CHANGES) {
            if (item.getSession().hasPendingChanges()) {
                return false;
            }
        }
        if ((options & CHECK_PENDING_CHANGES_ON_NODE) == CHECK_PENDING_CHANGES_ON_NODE) {
            if (item.isNode() && ((NodeImpl) item).hasPendingChanges()) {
                return false;
            }
        }
        if ((options & CHECK_CONSTRAINTS) == CHECK_CONSTRAINTS) {
            if (isProtected(item)) {
                return false;
            }
        }
        if ((options & CHECK_CHECKED_OUT) == CHECK_CHECKED_OUT) {
            NodeImpl node = (item.isNode()) ? (NodeImpl) item : (NodeImpl) item.getParent();
            if (!node.isCheckedOut()) {
                return false;
            }
        }
        if ((options & CHECK_LOCK) == CHECK_LOCK) {
            try {
                checkLock(item);
            } catch (LockException e) {
                return false;
            }
        }
        if (permissions > Permission.NONE) {
            Path path = item.getPrimaryPath();
            if (!context.getAccessManager().isGranted(path, permissions)) {
                return false;
            }
        }
        if ((options & CHECK_HOLD) == CHECK_HOLD) {
            if (hasHold(item, isRemoval)) {
                return false;
            }
        }
        if ((options & CHECK_RETENTION) == CHECK_RETENTION) {
            if (hasRetention(item, isRemoval)) {
                return false;
            }
        }
        return true;
    }

    private void checkLock(ItemImpl item) throws LockException, RepositoryException {
        if (item.isNew()) {
            
            return;
        }
        NodeImpl node = (item.isNode()) ? (NodeImpl) item : (NodeImpl) item.getParent();
        context.getWorkspace().getInternalLockManager().checkLock(node);
    }

    private boolean isProtected(ItemImpl item) throws RepositoryException {
        ItemDefinition def;
        if (item.isNode()) {
            def = ((Node) item).getDefinition();
        } else {
            def = ((Property) item).getDefinition();
        }
        return def.isProtected();
    }

    private boolean hasHold(ItemImpl item, boolean isRemoval) throws RepositoryException {
        if (item.isNew()) {
            return false;
        }
        Path path = item.getPrimaryPath();
        if (!item.isNode()) {
            path = path.getAncestor(1);
        }
        boolean checkParent = (item.isNode() && isRemoval);
        return context.getSessionImpl().getRetentionRegistry().hasEffectiveHold(path, checkParent);
    }

    private boolean hasRetention(ItemImpl item, boolean isRemoval) throws RepositoryException {
        if (item.isNew()) {
            return false;
        }
        Path path = item.getPrimaryPath();
        if (!item.isNode()) {
            path = path.getAncestor(1);
        }
        boolean checkParent = (item.isNode() && isRemoval);
        return context.getSessionImpl().getRetentionRegistry().hasEffectiveRetention(path, checkParent);
    }


    
    
    








    public EffectiveNodeType getEffectiveNodeType(NodeState state)
            throws RepositoryException {
        try {
            return context.getNodeTypeRegistry().getEffectiveNodeType(
                    state.getNodeTypeName(), state.getMixinTypeNames());
        } catch (NodeTypeConflictException ntce) {
            String msg = "internal error: failed to build effective node type for node "
                    + safeGetJCRPath(state.getNodeId());
            log.debug(msg);
            throw new RepositoryException(msg, ntce);
        }
    }

    












    public QNodeDefinition findApplicableNodeDefinition(Name name,
                                                Name nodeTypeName,
                                                NodeState parentState)
            throws RepositoryException, ConstraintViolationException {
        EffectiveNodeType entParent = getEffectiveNodeType(parentState);
        return entParent.getApplicableChildNodeDef(
                name, nodeTypeName, context.getNodeTypeRegistry());
    }

    



















    public QPropertyDefinition findApplicablePropertyDefinition(Name name,
                                                    int type,
                                                    boolean multiValued,
                                                    NodeState parentState)
            throws RepositoryException, ConstraintViolationException {
        EffectiveNodeType entParent = getEffectiveNodeType(parentState);
        return entParent.getApplicablePropertyDef(name, type, multiValued);
    }

    





















    public QPropertyDefinition findApplicablePropertyDefinition(Name name,
                                                    int type,
                                                    NodeState parentState)
            throws RepositoryException, ConstraintViolationException {
        EffectiveNodeType entParent = getEffectiveNodeType(parentState);
        return entParent.getApplicablePropertyDef(name, type);
    }

    






    public String safeGetJCRPath(Path path) {
        try {
            return context.getJCRPath(path);
        } catch (NamespaceException e) {
            log.error("failed to convert {} to a JCR path", path);
            
            return path.toString();
        }
    }

    






    public String safeGetJCRPath(ItemId id) {
        try {
            return safeGetJCRPath(
                    context.getHierarchyManager().getPath(id));
        } catch (ItemNotFoundException e) {
            
            return id.toString();
        } catch (RepositoryException e) {
            log.error(id + ": failed to build path");
            
            return id.toString();
        }
    }
}
