31a32
> import java.util.Arrays;
33a35
> import java.util.HashSet;
36a39
> import java.util.Set;
44a48,50
>     private static final String GET = "GET";
>     private static final String POST = "POST";
> 
45a52
>     private static final List<String> invalidURLs = new ArrayList<String>();
48d54
<         validURLs.add(null);
51a58,61
> 
>         invalidURLs.add("http:
>         invalidURLs.add("http:
>         invalidURLs.add("http:
54,56c64,74
<     private static void testValid(CSRFUtil util, Collection<String> validURLs) throws MalformedURLException {
<         for (String url : validURLs) {
<             assertTrue(url, util.isValidRequest(createRequest(url)));
---
>     private static void testValid(CSRFUtil util, Collection<String> validURLs, String method, Set<String> contentTypes) throws MalformedURLException {
>         if (null == contentTypes) {
>             for (String url : validURLs) {
>                 assertTrue(url, util.isValidRequest(createRequest(url, method, null)));
>             }
>         } else {
>             for (String contentType : contentTypes) {
>                 for (String url : validURLs) {
>                     assertTrue(url, util.isValidRequest(createRequest(url, method, contentType)));
>                 }
>             }
60,62c78,88
<     private static void testInvalid(CSRFUtil util, Collection<String> invalidURLs) throws MalformedURLException {
<         for (String url : invalidURLs) {
<             assertFalse(url, util.isValidRequest(createRequest(url)));
---
>     private static void testInvalid(CSRFUtil util, Collection<String> invalidURLs, String method, Set<String> contentTypes) throws MalformedURLException {
>         if (null == contentTypes) {
>             for (String url : validURLs) {
>                 assertFalse(url, util.isValidRequest(createRequest(url, method, null)));
>             }
>         } else {
>             for (String contentType : contentTypes) {
>                 for (String url : invalidURLs) {
>                     assertFalse(url, util.isValidRequest(createRequest(url, method, contentType)));
>                 }
>             }
66,67c92,93
<     private static HttpServletRequest createRequest(String url) {
<         return new DummyRequest(url, SERVER_NAME);
---
>     private static HttpServletRequest createRequest(String url, String method, String contentType) {
>         return new DummyRequest(url, SERVER_NAME, method, contentType);
72,79c98,99
< 
<         testValid(util, validURLs);
< 
<         List<String> invalidURLs = new ArrayList<String>();
<         invalidURLs.add("http:
<         invalidURLs.add("http:
<         invalidURLs.add("http:
<         testInvalid(util, invalidURLs);
---
>         testValid(util, validURLs, POST, CSRFUtil.CONTENT_TYPES);
>         testInvalid(util, invalidURLs, POST, CSRFUtil.CONTENT_TYPES);
84c104,106
<         testValid(util, validURLs);
---
>         testValid(util, validURLs, POST, CSRFUtil.CONTENT_TYPES);
>         testInvalid(util, invalidURLs, POST, CSRFUtil.CONTENT_TYPES);
>     }
86,90c108,111
<         List<String> invalidURLs = new ArrayList<String>();
<         invalidURLs.add("http:
<         invalidURLs.add("http:
<         invalidURLs.add("http:
<         testInvalid(util, invalidURLs);
---
>     public void testNoReferrer() throws Exception {
>         CSRFUtil util = new CSRFUtil("");
>         testValid(util, validURLs, POST, CSRFUtil.CONTENT_TYPES);
>         assertFalse("no referrer", util.isValidRequest(createRequest(null, POST, "text/plain")));
95,96c116
<         testValid(util, validURLs);
< 
---
>         testValid(util, validURLs, POST, CSRFUtil.CONTENT_TYPES);
98,102c118
<         List<String> otherHosts = new ArrayList<String>();
<         otherHosts.add("http:
<         otherHosts.add("http:
<         otherHosts.add("https:
<         testValid(util, otherHosts);
---
>         testValid(util, invalidURLs, POST, CSRFUtil.CONTENT_TYPES);
124,126c140,142
<             testValid(util, validURLs);
<             testValid(util, otherHosts);
<             testInvalid(util, invalidURLs);
---
>             testValid(util, validURLs, POST, CSRFUtil.CONTENT_TYPES);
>             testValid(util, otherHosts, POST, CSRFUtil.CONTENT_TYPES);
>             testInvalid(util, invalidURLs, POST, CSRFUtil.CONTENT_TYPES);
129a146,152
>     public void testMethodsAndMediaType() throws Exception {
>         CSRFUtil util = new CSRFUtil("");
>         testValid(util, invalidURLs, GET, CSRFUtil.CONTENT_TYPES);
>         testValid(util, invalidURLs, POST, new HashSet<String>(Arrays.asList(new String[] {"application/json"})));
>         testInvalid(util, invalidURLs, POST, CSRFUtil.CONTENT_TYPES);
>     }
> 
133a157,158
>         private final String method;
>         private final String contentType;
135c160
<         private DummyRequest(String referer, String serverName) {
---
>         private DummyRequest(String referer, String serverName, String method, String contentType) {
137a163,164
>             this.method = method;
>             this.contentType = contentType;
174c201
<             return null;
---
>             return method;
243c270
<             return null;
---
>             return contentType;
