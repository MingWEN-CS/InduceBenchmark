















package org.apache.jackrabbit.core.version;

import org.apache.jackrabbit.core.NodeImpl;
import org.apache.jackrabbit.core.NodeId;
import org.apache.jackrabbit.core.state.ItemStateException;
import org.apache.jackrabbit.core.state.NodeState;
import org.apache.jackrabbit.core.state.PropertyState;
import org.apache.jackrabbit.core.state.ChildNodeEntry;
import org.apache.jackrabbit.core.value.InternalValue;
import org.apache.jackrabbit.spi.Name;
import org.apache.jackrabbit.uuid.UUID;
import org.apache.jackrabbit.spi.commons.name.NameConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.jcr.PropertyType;
import javax.jcr.ReferentialIntegrityException;
import javax.jcr.RepositoryException;
import javax.jcr.Value;
import javax.jcr.version.VersionException;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.LinkedHashMap;
import java.util.Map;




class InternalVersionHistoryImpl extends InternalVersionItemImpl
        implements InternalVersionHistory {

    


    private static Logger log = LoggerFactory.getLogger(InternalVersionHistory.class);

    


    private static final Calendar CURRENT_TIME = Calendar.getInstance();

    




    private Map<Name, Name> labelCache = new HashMap<Name, Name>();

    


    private InternalVersion rootVersion;

    




    private Map<Name, NodeId> nameCache = new LinkedHashMap<Name, NodeId>();

    




    private Map<NodeId, InternalVersion> versionCache = new HashMap<NodeId, InternalVersion>();

    


    private Map<NodeId, InternalVersion> tempVersionCache = new HashMap<NodeId, InternalVersion>();

    


    private NodeStateEx labelNode;

    


    private NodeId historyId;

    


    private NodeId versionableId;

    





    public InternalVersionHistoryImpl(AbstractVersionManager vMgr, NodeStateEx node)
            throws RepositoryException {
        super(vMgr, node);
        init();
    }

    




    private void init() throws RepositoryException {
        nameCache.clear();
        versionCache.clear();
        labelCache.clear();

        
        historyId = node.getNodeId();

        
        versionableId = NodeId.valueOf(node.getPropertyValue(NameConstants.JCR_VERSIONABLEUUID).toString());

        
        labelNode = node.getNode(NameConstants.JCR_VERSIONLABELS, 1);

        
        try {
            PropertyState[] labels = labelNode.getProperties();
            for (PropertyState pState : labels) {
                if (pState.getType() == PropertyType.REFERENCE) {
                    Name labelName = pState.getName();
                    UUID ref = pState.getValues()[0].getUUID();
                    NodeId id = new NodeId(ref);
                    if (node.getState().hasChildNodeEntry(id)) {
                        labelCache.put(labelName, node.getState().getChildNodeEntry(id).getName());
                    } else {
                        log.warn("Error while resolving label reference. Version missing: " + ref);
                    }
                }
            }
        } catch (ItemStateException e) {
            throw new RepositoryException(e);
        }

        
        rootVersion = createVersionInstance(NameConstants.JCR_ROOTVERSION);

        
        ChildNodeEntry[] children = (ChildNodeEntry[])
            node.getState().getChildNodeEntries().toArray();
        for (ChildNodeEntry child : children) {
            if (child.getName().equals(NameConstants.JCR_VERSIONLABELS)) {
                continue;
            }
            nameCache.put(child.getName(), child.getId());
        }

        
        if (rootVersion.getSuccessors().length == 0) {
            for (Name versionName : nameCache.keySet()) {
                InternalVersionImpl v = createVersionInstance(versionName);
                v.legacyResolveSuccessors();
            }
        }
    }

    



    void reload() throws RepositoryException {
        tempVersionCache.putAll(versionCache);

        init();

        
        for (Object o : tempVersionCache.values()) {
            InternalVersionImpl v = (InternalVersionImpl) o;
            v.invalidate();
        }
        tempVersionCache.clear();
    }

    





    InternalVersionImpl createVersionInstance(Name name) {
        try {
            NodeStateEx nodeStateEx = node.getNode(name, 1);
            InternalVersionImpl v = createVersionInstance(nodeStateEx);
            versionCache.put(v.getId(), v);
            vMgr.versionCreated(v);

            
            for (Name labelName: labelCache.keySet()) {
                Name versionName = labelCache.get(labelName);
                if (v.getName().equals(versionName)) {
                    v.internalAddLabel(labelName);
                }
            }
            return v;
        } catch (RepositoryException e) {
            throw new IllegalArgumentException("Failed to create version " + name + ".");
        }
    }

    





    InternalVersionImpl createVersionInstance(NodeStateEx child) {
        InternalVersionImpl v = (InternalVersionImpl) tempVersionCache.remove(child.getNodeId());
        if (v != null) {
            v.clear();
        } else {
            v = new InternalVersionImpl(this, child, child.getName());
        }
        return v;
    }

    


    public NodeId getId() {
        return historyId;
    }

    


    public InternalVersionItem getParent() {
        return null;
    }

    


    public InternalVersion getRootVersion() {
        return rootVersion;
    }

    


    public InternalVersion getVersion(Name versionName) throws VersionException {
        NodeId versionId = nameCache.get(versionName);
        if (versionId == null) {
            throw new VersionException("Version " + versionName + " does not exist.");
        }

        InternalVersion v = versionCache.get(versionId);
        if (v == null) {
            v = createVersionInstance(versionName);
        }
        return v;
    }

    


    public boolean hasVersion(Name versionName) {
        return nameCache.containsKey(versionName);
    }

    


    public InternalVersion getVersion(NodeId id) {
        InternalVersion v = versionCache.get(id);
        if (v == null) {
            for (Name versionName : nameCache.keySet()) {
                if (nameCache.get(versionName).equals(id)) {
                    v = createVersionInstance(versionName);
                    break;
                }
            }
        }
        return v;
    }

    


    public InternalVersion getVersionByLabel(Name label) {
        Name versionName = labelCache.get(label);
        if (versionName == null) {
            return null;
        }

        NodeId id = nameCache.get(versionName);
        InternalVersion v = versionCache.get(id);
        if (v == null) {
            v = createVersionInstance(versionName);
        }
        return v;
    }

    


    public Name[] getVersionNames() {
        return nameCache.keySet().toArray(new Name[nameCache.size()]);
    }
    
    


    public int getNumVersions() {
        return nameCache.size();
    }

    


    public UUID getVersionableUUID() {
        return versionableId.getUUID();
    }

    


    public Name[] getVersionLabels() {
        return labelCache.keySet().toArray(new Name[labelCache.size()]);
    }

    


    public NodeId getVersionLabelsId() {
        return labelNode.getNodeId();
    }

    











    void removeVersion(Name versionName) throws RepositoryException {

        InternalVersionImpl v = (InternalVersionImpl) getVersion(versionName);
        if (v.equals(rootVersion)) {
            String msg = "Removal of " + versionName + " not allowed.";
            log.debug(msg);
            throw new VersionException(msg);
        }
        
        if (vMgr.hasItemReferences(v.getId())) {
            throw new ReferentialIntegrityException("Unable to remove version. At least once referenced.");
        }

        
        Name[] labels = v.internalGetLabels();
        for (Name label : labels) {
            v.internalRemoveLabel(label);
            labelNode.removeProperty(label);
        }
        
        v.internalDetach();

        
        InternalActivityImpl activity = v.getActivity();
        if (activity != null) {
            activity.removeVersion(v);
        }

        
        node.removeNode(v.getName());

        
        versionCache.remove(v.getId());
        nameCache.remove(versionName);
        vMgr.versionDestroyed(v);

        
        if (!vMgr.hasItemReferences(node.getNodeId())) {
            log.debug("Current version history has no references");
            NodeStateEx[] childNodes = node.getChildNodes();

            
            if (childNodes.length == 2) {
                log.debug("Removing orphan version history as it contains only two children");
                NodeStateEx parentNode = vMgr.getNodeStateEx(node.getParentId());
                
                parentNode.removeNode(node.getName());
                
                parentNode.store();
            }
        } else {
            log.debug("Current version history has at least one reference");
            
            node.store();
        }

        
        for (Name label : labels) {
            labelCache.remove(label);
        }
    }

    













    InternalVersion setVersionLabel(Name versionName, Name label, boolean move)
            throws VersionException {
        InternalVersion version =
            (versionName != null) ? getVersion(versionName) : null;
        if (versionName != null && version == null) {
            throw new VersionException("Version " + versionName + " does not exist in this version history.");
        }
        Name prevName = labelCache.get(label);
        InternalVersionImpl prev = null;
        if (prevName == null) {
            if (version == null) {
                return null;
            }
        } else {
            prev = (InternalVersionImpl) getVersion(prevName);
            if (prev.equals(version)) {
                return version;
            } else if (!move) {
                
                throw new VersionException("Version label " + label + " already defined for version " + prev.getName());
            }
        }

        
        try {
            if (version == null) {
                labelNode.removeProperty(label);
            } else {
                labelNode.setPropertyValue(label, InternalValue.create(version.getId().getUUID()));
            }
            labelNode.store();
        } catch (RepositoryException e) {
            throw new VersionException(e);
        }

        
        if (prev != null) {
            prev.internalRemoveLabel(label);
            labelCache.remove(label);
        }
        if (version != null) {
            labelCache.put(label, version.getName());
            ((InternalVersionImpl) version).internalAddLabel(label);
        }
        return prev;
    }

    








    InternalVersionImpl checkin(Name name, NodeImpl src)
            throws RepositoryException {

        
        InternalValue[] predecessors;
        if (src.hasProperty(NameConstants.JCR_PREDECESSORS)) {
            Value[] preds = src.getProperty(NameConstants.JCR_PREDECESSORS).getValues();
            predecessors = new InternalValue[preds.length];
            for (int i = 0; i < preds.length; i++) {
                UUID predId = UUID.fromString(preds[i].getString());
                
                if (!nameCache.containsValue(new NodeId(predId))) {
                    throw new RepositoryException("invalid predecessor in source node");
                }
                predecessors[i] = InternalValue.create(predId);
            }
        } else {
            
            
            Iterator iter = nameCache.values().iterator();
            NodeId last = null;
            while (iter.hasNext()) {
                last = (NodeId) iter.next();
            }
            if (last == null) {
                
                last = rootVersion.getId();
            }
            predecessors = new InternalValue[]{InternalValue.create(last.getUUID())};
        }

        NodeId versionId = new NodeId(UUID.randomUUID());
        NodeStateEx vNode = node.addNode(name, NameConstants.NT_VERSION, versionId, true);

        
        if (src.hasProperty(NameConstants.JCR_ACTIVITY)) {
            InternalValue act = src.getProperty(NameConstants.JCR_ACTIVITY).internalGetValue();
            vNode.setPropertyValue(NameConstants.JCR_ACTIVITY, act);
        }

        
        vNode.setPropertyValue(NameConstants.JCR_CREATED, InternalValue.create(getCurrentTime()));
        vNode.setPropertyValues(NameConstants.JCR_PREDECESSORS, PropertyType.REFERENCE, predecessors);
        vNode.setPropertyValues(NameConstants.JCR_SUCCESSORS, PropertyType.REFERENCE, InternalValue.EMPTY_ARRAY);

        
        InternalFrozenNodeImpl.checkin(vNode, NameConstants.JCR_FROZENNODE, src);

        
        InternalVersionImpl version = new InternalVersionImpl(this, vNode, name);
        version.internalAttach();

        
        node.store();

        vMgr.versionCreated(version);

        
        versionCache.put(version.getId(), version);
        nameCache.put(version.getName(), version.getId());

        return version;
    }

    











    static NodeStateEx create(
            AbstractVersionManager vMgr, NodeStateEx parent, Name name,
            NodeState nodeState, NodeId copiedFrom) throws RepositoryException {

        
        NodeId historyId = new NodeId(UUID.randomUUID());
        NodeStateEx pNode = parent.addNode(name, NameConstants.NT_VERSIONHISTORY, historyId, true);

        
        String versionableUUID = nodeState.getNodeId().getUUID().toString();
        pNode.setPropertyValue(NameConstants.JCR_VERSIONABLEUUID, InternalValue.create(versionableUUID));

        
        pNode.addNode(NameConstants.JCR_VERSIONLABELS, NameConstants.NT_VERSIONLABELS, null, false);

        
        if (copiedFrom != null) {
            pNode.setPropertyValue(NameConstants.JCR_COPIEDFROM, InternalValue.create(copiedFrom.getUUID(), true));
        }
        
        
        NodeId versionId = new NodeId(UUID.randomUUID());
        NodeStateEx vNode = pNode.addNode(NameConstants.JCR_ROOTVERSION, NameConstants.NT_VERSION, versionId, true);

        
        vNode.setPropertyValue(NameConstants.JCR_CREATED, InternalValue.create(getCurrentTime()));
        vNode.setPropertyValues(NameConstants.JCR_PREDECESSORS, PropertyType.REFERENCE, InternalValue.EMPTY_ARRAY);
        vNode.setPropertyValues(NameConstants.JCR_SUCCESSORS, PropertyType.REFERENCE, InternalValue.EMPTY_ARRAY);

        
        NodeStateEx node = vNode.addNode(NameConstants.JCR_FROZENNODE, NameConstants.NT_FROZENNODE, null, true);

        
        node.setPropertyValue(NameConstants.JCR_FROZENUUID, InternalValue.create(versionableUUID));
        node.setPropertyValue(NameConstants.JCR_FROZENPRIMARYTYPE,
                InternalValue.create(nodeState.getNodeTypeName()));

        Set mixins = nodeState.getMixinTypeNames();
        if (mixins.size() > 0) {
            InternalValue[] ivalues = new InternalValue[mixins.size()];
            Iterator iter = mixins.iterator();
            for (int i = 0; i < mixins.size(); i++) {
                ivalues[i] = InternalValue.create((Name) iter.next());
            }
            node.setPropertyValues(NameConstants.JCR_FROZENMIXINTYPES, PropertyType.NAME, ivalues);
        }

        parent.store();
        return pNode;
    }

    







    static Calendar getCurrentTime() {
        long time = System.currentTimeMillis();
        synchronized (CURRENT_TIME) {
            if (time > CURRENT_TIME.getTimeInMillis()) {
                CURRENT_TIME.setTimeInMillis(time);
            } else {
                CURRENT_TIME.add(Calendar.MILLISECOND, 1);
            }
            return (Calendar) CURRENT_TIME.clone();
        }
    }
}
