32,33d31
< import javax.jcr.nodetype.NodeDefinition;
< import javax.jcr.nodetype.PropertyDefinition;
39,42c37,39
< import org.apache.jackrabbit.core.nodetype.NodeDefId;
< import org.apache.jackrabbit.core.nodetype.NodeDefinitionImpl;
< import org.apache.jackrabbit.core.nodetype.PropDefId;
< import org.apache.jackrabbit.core.nodetype.PropertyDefinitionImpl;
---
> import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
> import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
> import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
48d44
< import org.apache.jackrabbit.core.state.ItemStateManager;
57a54,55
> import org.apache.jackrabbit.spi.QPropertyDefinition;
> import org.apache.jackrabbit.spi.QNodeDefinition;
89c87
<     private final NodeDefinition rootNodeDef;
---
>     private final org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl rootNodeDef;
94c92
<     private final ItemStateManager itemStateProvider;
---
>     private final SessionItemStateManager sism;
117,118c115,118
<     protected ItemManager(SessionItemStateManager itemStateProvider, HierarchyManager hierMgr,
<                           SessionImpl session, NodeDefinition rootNodeDef,
---
>     protected ItemManager(SessionItemStateManager sism,
>                           HierarchyManager hierMgr,
>                           SessionImpl session,
>                           org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl rootNodeDef,
120c120
<         this.itemStateProvider = itemStateProvider;
---
>         this.sism = sism;
148c148
<             NodeDefinition rootNodeDef,
---
>             org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl rootNodeDef,
166c166
<     NodeDefinition getDefinition(NodeState state)
---
>     org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl getDefinition(NodeState state)
173,175c173,174
<         NodeDefId defId = state.getDefinitionId();
<         NodeDefinitionImpl def = session.getNodeTypeManager().getNodeDefinition(defId);
<         if (def == null) {
---
>         NodeId parentId = state.getParentId();
>         if (parentId == null) {
177,182d175
< 
< 
< 
<             log.warn("node at " + safeGetJCRPath(state.getNodeId())
<                     + " has invalid definitionId (" + defId + ")");
< 
184,188c177,209
<             NodeImpl parent = (NodeImpl) getItem(state.getParentId());
<             NodeState parentState = parent.getNodeState();
<             ChildNodeEntry cne = parentState.getChildNodeEntry(state.getNodeId());
<             def = parent.getApplicableChildNodeDefinition(cne.getName(), state.getNodeTypeName());
<             state.setDefinitionId(def.unwrap().getId());
---
>             parentId = state.getOverlayedState().getParentId();
>         }
>         NodeState parentState;
>         try {
>             NodeImpl parent = (NodeImpl) getItem(parentId);
>             parentState = parent.getNodeState();
>             if (state.getParentId() == null) {
>                 
>                 
>                 
>                 parentState = (NodeState) parentState.getOverlayedState();
>             }
>         } catch (ItemNotFoundException e) {
>             
>             try {
>                 
>                 parentState = (NodeState) sism.getAttic().getItemState(
>                         parentId).getOverlayedState();
>             } catch (ItemStateException ex) {
>                 throw new RepositoryException(ex);
>             }
>         }
>         
>         ChildNodeEntry cne = parentState.getChildNodeEntry(state.getNodeId());
>         NodeTypeRegistry ntReg = session.getNodeTypeManager().getNodeTypeRegistry();
>         try {
>             EffectiveNodeType ent = ntReg.getEffectiveNodeType(
>                     parentState.getNodeTypeName(), parentState.getMixinTypeNames());
>             QNodeDefinition def = ent.getApplicableChildNodeDef(
>                     cne.getName(), state.getNodeTypeName(), ntReg);
>             return session.getNodeTypeManager().getNodeDefinition(def);
>         } catch (NodeTypeConflictException e) {
>             throw new RepositoryException(e);
190d210
<         return def;
193c213
<     PropertyDefinition getDefinition(PropertyState state)
---
>     org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl getDefinition(PropertyState state)
195,205c215
<         PropDefId defId = state.getDefinitionId();
<         PropertyDefinitionImpl def = session.getNodeTypeManager().getPropertyDefinition(defId);
<         if (def == null) {
<             
< 
< 
< 
<             log.warn("property at " + safeGetJCRPath(state.getPropertyId())
<                     + " has invalid definitionId (" + defId + ")");
< 
<             
---
>         try {
207c217
<             def = parent.getApplicablePropertyDefinition(
---
>             return parent.getApplicablePropertyDefinition(
209c219,234
<             state.setDefinitionId(def.unwrap().getId());
---
>         } catch (ItemNotFoundException e) {
>             
>         }
>         try {
>             NodeState parent = (NodeState) sism.getAttic().getItemState(
>                     state.getParentId()).getOverlayedState();
>             NodeTypeRegistry ntReg = session.getNodeTypeManager().getNodeTypeRegistry();
>             EffectiveNodeType ent = ntReg.getEffectiveNodeType(
>                     parent.getNodeTypeName(), parent.getMixinTypeNames());
>             QPropertyDefinition def = ent.getApplicablePropertyDef(
>                     state.getName(), state.getType(), state.isMultiValued());
>             return session.getNodeTypeManager().getPropertyDefinition(def);
>         } catch (ItemStateException e) {
>             throw new RepositoryException(e);
>         } catch (NodeTypeConflictException e) {
>             throw new RepositoryException(e);
211d235
<         return def;
231c255
<             if (!itemStateProvider.hasItemState(itemId)) {
---
>             if (!sism.hasItemState(itemId)) {
313c337
<                 state = itemStateProvider.getItemState(itemId);
---
>                 state = sism.getItemState(itemId);
